import"./main--F4etQ51.js";import{T as E}from"./theme-manager-CdLvXRPk.js";class S{constructor(){this.board=this.initializeBoard()}initializeBoard(){return[["bR","bN","bB","bQ","bK","bB","bN","bR"],["bP","bP","bP","bP","bP","bP","bP","bP"],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],["wP","wP","wP","wP","wP","wP","wP","wP"],["wR","wN","wB","wQ","wK","wB","wN","wR"]]}getPiece(e,t){return this.isValidSquare(e,t)?this.board[e][t]:null}setPiece(e,t,s){return this.isValidSquare(e,t)?(this.board[e][t]=s,!0):!1}isEmpty(e,t){return this.getPiece(e,t)===null}isValidSquare(e,t){return e>=0&&e<8&&t>=0&&t<8}getPieceColor(e,t){const s=this.getPiece(e,t);return s?s[0]:null}getPieceType(e,t){const s=this.getPiece(e,t);return s?s[1]:null}clone(){const e=new S;return e.board=this.board.map(t=>[...t]),e}clear(){this.board=Array(8).fill(null).map(()=>Array(8).fill(null))}findKing(e){for(let t=0;t<8;t++)for(let s=0;s<8;s++)if(this.getPiece(t,s)===`${e}K`)return{row:t,col:s};return null}}class k{static getPossibleMoves(e,t,s){const i=e.getPiece(t,s);if(!i)return[];const n=i[1],a=i[0];switch(n){case"P":return this.getPawnMoves(e,t,s,a);case"N":return this.getKnightMoves(e,t,s,a);case"B":return this.getBishopMoves(e,t,s,a);case"R":return this.getRookMoves(e,t,s,a);case"Q":return this.getQueenMoves(e,t,s,a);case"K":return this.getKingMoves(e,t,s,a);default:return[]}}static getPawnMoves(e,t,s,i){const n=[],a=i==="w"?-1:1,o=i==="w"?6:1,r=t+a;if(e.isEmpty(r,s)&&(n.push({row:r,col:s,type:"move"}),t===o)){const c=t+2*a;e.isEmpty(c,s)&&n.push({row:c,col:s,type:"move"})}for(const c of[-1,1]){const h=s+c;if(e.isValidSquare(r,h)){const l=e.getPiece(r,h);l&&l[0]!==i&&n.push({row:r,col:h,type:"capture"})}}return n}static getKnightMoves(e,t,s,i){const n=[],a=[[-2,-1],[-2,1],[-1,-2],[-1,2],[1,-2],[1,2],[2,-1],[2,1]];for(const[o,r]of a){const c=t+o,h=s+r;if(e.isValidSquare(c,h)){const l=e.getPiece(c,h);(!l||l[0]!==i)&&n.push({row:c,col:h,type:l?"capture":"move"})}}return n}static getBishopMoves(e,t,s,i){return this.getSlidingMoves(e,t,s,i,[[-1,-1],[-1,1],[1,-1],[1,1]])}static getRookMoves(e,t,s,i){return this.getSlidingMoves(e,t,s,i,[[-1,0],[1,0],[0,-1],[0,1]])}static getQueenMoves(e,t,s,i){return this.getSlidingMoves(e,t,s,i,[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]])}static getKingMoves(e,t,s,i){const n=[],a=[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];for(const[r,c]of a){const h=t+r,l=s+c;if(e.isValidSquare(h,l)){const d=e.getPiece(h,l);(!d||d[0]!==i)&&n.push({row:h,col:l,type:d?"capture":"move"})}}const o=i==="w"?7:0;return t===o&&s===4&&(n.push({row:o,col:6,type:"castle-kingside"}),n.push({row:o,col:2,type:"castle-queenside"})),n}static getSlidingMoves(e,t,s,i,n){const a=[];for(const[o,r]of n){let c=t+o,h=s+r;for(;e.isValidSquare(c,h);){const l=e.getPiece(c,h);if(!l)a.push({row:c,col:h,type:"move"});else if(l[0]!==i){a.push({row:c,col:h,type:"capture"});break}else break;c+=o,h+=r}}return a}}class y{static isLegalMove(e,t,s,i,n,a){const o=e.getPiece(t,s);if(!o||o[0]!==a[0]||!e.isValidSquare(i,n)||!k.getPossibleMoves(e,t,s).some(d=>d.row===i&&d.col===n))return!1;const h=e.clone();return h.setPiece(i,n,o),h.setPiece(t,s,null),!this.isInCheck(h,a[0])}static isInCheck(e,t){const s=e.findKing(t);if(!s)return!1;const i=t==="w"?"b":"w";for(let n=0;n<8;n++)for(let a=0;a<8;a++){const o=e.getPiece(n,a);if(o&&o[0]===i&&k.getPossibleMoves(e,n,a).some(c=>c.row===s.row&&c.col===s.col))return!0}return!1}static isCheckmate(e,t){return this.isInCheck(e,t)?!this.hasLegalMoves(e,t):!1}static isStalemate(e,t){return this.isInCheck(e,t)?!1:!this.hasLegalMoves(e,t)}static hasLegalMoves(e,t){for(let s=0;s<8;s++)for(let i=0;i<8;i++){const n=e.getPiece(s,i);if(n&&n[0]===t){const a=k.getPossibleMoves(e,s,i);for(const o of a)if(this.isLegalMove(e,s,i,o.row,o.col,t))return!0}}return!1}static getLegalMoves(e,t,s,i){const n=e.getPiece(t,s);return!n||n[0]!==i[0]?[]:k.getPossibleMoves(e,t,s).filter(o=>this.isLegalMove(e,t,s,o.row,o.col,i))}}class v{static canCastle(e,t,s,i){const n=s==="w"?7:0,a=e.getPiece(n,4);if(!a||a!==`${s}K`||t.hasPieceMoved(n,4))return!1;if(i==="kingside"){const o=e.getPiece(n,7);return!(!o||o!==`${s}R`||t.hasPieceMoved(n,7)||!e.isEmpty(n,5)||!e.isEmpty(n,6)||this.isSquareAttacked(e,n,4,s)||this.isSquareAttacked(e,n,5,s)||this.isSquareAttacked(e,n,6,s))}else{const o=e.getPiece(n,0);return!(!o||o!==`${s}R`||t.hasPieceMoved(n,0)||!e.isEmpty(n,1)||!e.isEmpty(n,2)||!e.isEmpty(n,3)||this.isSquareAttacked(e,n,4,s)||this.isSquareAttacked(e,n,3,s)||this.isSquareAttacked(e,n,2,s))}}static executeCastle(e,t,s){const i=t==="w"?7:0;return s==="kingside"?(e.setPiece(i,6,`${t}K`),e.setPiece(i,4,null),e.setPiece(i,5,`${t}R`),e.setPiece(i,7,null),{type:"castle",side:"kingside",kingMove:{from:{row:i,col:4},to:{row:i,col:6}},rookMove:{from:{row:i,col:7},to:{row:i,col:5}}}):(e.setPiece(i,2,`${t}K`),e.setPiece(i,4,null),e.setPiece(i,3,`${t}R`),e.setPiece(i,0,null),{type:"castle",side:"queenside",kingMove:{from:{row:i,col:4},to:{row:i,col:2}},rookMove:{from:{row:i,col:0},to:{row:i,col:3}}})}static canEnPassant(e,t,s,i,n,a){const o=e.getPiece(s,i);if(!o||o[1]!=="P")return!1;const r=o[0];if(n!==s+(r==="w"?-1:1)||Math.abs(a-i)!==1||!e.isEmpty(n,a))return!1;const h=e.getPiece(s,a);if(!h||h[1]!=="P"||h[0]===r)return!1;const l=t.getLastMove();if(!l)return!1;const d=r==="w"?1:6,u=s;return!(l.to.row!==u||l.to.col!==a||l.from.row!==d||Math.abs(l.to.row-l.from.row)!==2)}static executeEnPassant(e,t,s,i,n){const a=e.getPiece(t,s);e.setPiece(i,n,a),e.setPiece(t,s,null);const o=e.getPiece(t,n);return e.setPiece(t,n,null),{type:"enpassant",capturedPawn:o,capturedAt:{row:t,col:n}}}static shouldPromote(e,t,s){const i=e.getPiece(t,s);if(!i||i[1]!=="P")return!1;const a=i[0]==="w"?0:7;return t===a}static executePromotion(e,t,s,i="Q"){const n=e.getPiece(t,s);if(!n)return!1;const o=`${n[0]}${i}`;return e.setPiece(t,s,o),{type:"promotion",from:n,to:o,position:{row:t,col:s}}}static isSquareAttacked(e,t,s,i){const n=i==="w"?"b":"w",o=t+(i==="w"?-1:1);for(const l of[-1,1]){const d=s+l;if(e.isValidSquare(o,d)&&e.getPiece(o,d)===`${n}P`)return!0}const r=[[-2,-1],[-2,1],[-1,-2],[-1,2],[1,-2],[1,2],[2,-1],[2,1]];for(const[l,d]of r){const u=t+l,g=s+d;if(e.isValidSquare(u,g)&&e.getPiece(u,g)===`${n}N`)return!0}for(let l=-1;l<=1;l++)for(let d=-1;d<=1;d++){if(l===0&&d===0)continue;const u=t+l,g=s+d;if(e.isValidSquare(u,g)&&e.getPiece(u,g)===`${n}K`)return!0}const c=[[-1,-1],[-1,1],[1,-1],[1,1]];for(const[l,d]of c){let u=t+l,g=s+d;for(;e.isValidSquare(u,g);){const f=e.getPiece(u,g);if(f){if(f[0]===n&&(f[1]==="B"||f[1]==="Q"))return!0;break}u+=l,g+=d}}const h=[[-1,0],[1,0],[0,-1],[0,1]];for(const[l,d]of h){let u=t+l,g=s+d;for(;e.isValidSquare(u,g);){const f=e.getPiece(u,g);if(f){if(f[0]===n&&(f[1]==="R"||f[1]==="Q"))return!0;break}u+=l,g+=d}}return!1}}class x{constructor(){this.board=new S,this.currentTurn="white",this.moveHistory=[],this.capturedPieces={white:[],black:[]},this.gameStatus="active",this.gameId=null,this.pieceMoveTracker=new Set,this.pendingPromotion=null}makeMove(e,t,s,i,n=null){if(this.pendingPromotion){if(!n)return"promotion";const d=v.executePromotion(this.board,this.pendingPromotion.row,this.pendingPromotion.col,n);return this.moveHistory[this.moveHistory.length-1].promotion=d,this.pendingPromotion=null,this.currentTurn=this.currentTurn==="white"?"black":"white",this.updateGameStatus(),!0}if(!y.isLegalMove(this.board,e,t,s,i,this.currentTurn)){const d=this.board.getPiece(e,t);if(d&&d[1]==="K"){const u=d[0];if(i===t+2&&v.canCastle(this.board,this,u,"kingside"))return this.executeCastling(u,"kingside");if(i===t-2&&v.canCastle(this.board,this,u,"queenside"))return this.executeCastling(u,"queenside")}return console.warn("Illegal move attempted:",{fromRow:e,fromCol:t,toRow:s,toCol:i}),!1}const o=this.board.getPiece(e,t),r=this.board.getPiece(s,i);let c=null;o[1]==="P"&&v.canEnPassant(this.board,this,e,t,s,i)?c=v.executeEnPassant(this.board,e,t,s,i):(this.board.setPiece(s,i,o),this.board.setPiece(e,t,null)),this.markPieceMoved(e,t);const h={from:{row:e,col:t},to:{row:s,col:i},piece:o,captured:c?c.capturedPawn:r,enPassant:c,timestamp:Date.now(),notation:this.moveToNotation(e,t,s,i,o,r||(c==null?void 0:c.capturedPawn))};this.moveHistory.push(h);const l=c?c.capturedPawn:r;if(l){const d=l[0]==="w"?"white":"black";this.capturedPieces[d].push(l)}return o[1]==="P"&&v.shouldPromote(this.board,s,i)?(this.pendingPromotion={row:s,col:i},"promotion"):(this.currentTurn=this.currentTurn==="white"?"black":"white",this.updateGameStatus(),!0)}executeCastling(e,t){const s=v.executeCastle(this.board,e,t);this.markPieceMoved(s.kingMove.from.row,s.kingMove.from.col),this.markPieceMoved(s.rookMove.from.row,s.rookMove.from.col);const i=t==="kingside"?"O-O":"O-O-O",n={from:s.kingMove.from,to:s.kingMove.to,piece:`${e}K`,captured:null,castle:s,timestamp:Date.now(),notation:i};return this.moveHistory.push(n),this.currentTurn=this.currentTurn==="white"?"black":"white",this.updateGameStatus(),!0}markPieceMoved(e,t){this.pieceMoveTracker.add(`${e},${t}`)}hasPieceMoved(e,t){return this.pieceMoveTracker.has(`${e},${t}`)}updateGameStatus(){const e=this.currentTurn[0];if(y.isCheckmate(this.board,e)){this.gameStatus="checkmate";const t=this.currentTurn==="white"?"Black":"White";console.log(`Checkmate! ${t} wins!`)}else y.isStalemate(this.board,e)?(this.gameStatus="stalemate",console.log("Stalemate! Game is a draw.")):y.isInCheck(this.board,e)?(this.gameStatus="check",console.log(`${this.currentTurn} is in check!`)):this.gameStatus="active"}moveToNotation(e,t,s,i,n,a){const o=n[1],r="abcdefgh",h=r[i]+"87654321"[s];return o==="P"?a?`${r[t]}x${h}`:h:a?`${o}x${h}`:`${o}${h}`}getLegalMoves(e,t){return y.getLegalMoves(this.board,e,t,this.currentTurn)}undoMove(){if(this.moveHistory.length===0)return!1;const e=this.moveHistory.pop();if(this.board.setPiece(e.from.row,e.from.col,e.piece),this.board.setPiece(e.to.row,e.to.col,e.captured),e.captured){const t=e.captured[0]==="w"?"white":"black";this.capturedPieces[t].pop()}return this.currentTurn=this.currentTurn==="white"?"black":"white",this.updateGameStatus(),!0}reset(){this.board=new S,this.currentTurn="white",this.moveHistory=[],this.capturedPieces={white:[],black:[]},this.gameStatus="active",this.pieceMoveTracker=new Set,this.pendingPromotion=null}getLastMove(){return this.moveHistory.length>0?this.moveHistory[this.moveHistory.length-1]:null}}class b{constructor(){this.gameState=new x}newGame(e=null){return this.gameState.reset(),e&&(this.gameState.gameId=e),this.gameState}makeMove(e,t,s,i){return this.gameState.makeMove(e,t,s,i)}getLegalMoves(e,t){return this.gameState.getLegalMoves(e,t)}undoMove(){return this.gameState.undoMove()}getBoard(){return this.gameState.board}getCurrentTurn(){return this.gameState.currentTurn}getGameStatus(){return this.gameState.gameStatus}getMoveHistory(){return this.gameState.moveHistory}getCapturedPieces(){return this.gameState.capturedPieces}getLastMove(){return this.gameState.getLastMove()}loadGameState(e){this.gameState=e}}class w{constructor(){this.worker=null,this.ready=!1,this.resolveMove=null,this.rejectMove=null,this.currentFen="",this.skillLevel=10,this.thinkingTime=1e3}async init(){this.worker&&this.quit();try{return this.worker=new Worker("/stockfish-worker.js"),this.worker.onmessage=this.handleMessage.bind(this),this.worker.onerror=e=>{console.error("❌ Stockfish Worker Error:",e),this.rejectMove&&(this.rejectMove(new Error("Stockfish worker error")),this.rejectMove=null)},new Promise((e,t)=>{const s=setTimeout(()=>{t(new Error("Stockfish initialization timeout"))},1e4),i=n=>{const a=n.data;if(a&&a.type==="ready"){clearTimeout(s),this.sendCommand("uci");const o=()=>{const r=n.data;typeof r=="string"&&r==="uciok"&&(this.ready=!0,console.log("✅ Stockfish initialized"),this.worker.removeEventListener("message",o),this.configureEngine(),e(!0))};this.worker.addEventListener("message",o)}};this.worker.addEventListener("message",i)})}catch(e){throw console.error("❌ Failed to initialize Stockfish:",e),e}}configureEngine(){this.setSkillLevel(this.skillLevel),this.sendCommand("ucinewgame")}handleMessage(e){const t=e.data;if(typeof t=="string"){if(console.log("Stockfish:",t),t.startsWith("bestmove")){const s=t.match(/bestmove ([a-h][1-8][a-h][1-8])([qrbn])?/);if(s&&this.resolveMove){const i={from:s[1].substring(0,2),to:s[1].substring(2,4),promotion:s[2]||null};this.resolveMove(i),this.resolveMove=null,this.rejectMove=null}}t==="uciok"&&(this.ready=!0)}}sendCommand(e){this.worker&&(console.log("→ Stockfish:",e),this.worker.postMessage(e))}setSkillLevel(e){this.skillLevel=Math.max(0,Math.min(20,e));const t=800+this.skillLevel*110;this.sendCommand("setoption name Skill Level value "+this.skillLevel),this.sendCommand("setoption name UCI_LimitStrength value true"),this.sendCommand("setoption name UCI_Elo value "+t)}async getBestMove(e,t=[]){if(!this.ready)throw new Error("Stockfish not ready");return new Promise((s,i)=>{if(this.resolveMove=s,this.rejectMove=i,t.length>0){const n=t.map(a=>this.moveToUCI(a)).join(" ");this.sendCommand(`position startpos moves ${n}`)}else this.sendCommand(`position fen ${e}`);this.sendCommand(`go movetime ${this.thinkingTime}`),setTimeout(()=>{this.rejectMove&&(this.rejectMove(new Error("Move calculation timeout")),this.rejectMove=null,this.resolveMove=null)},this.thinkingTime+5e3)})}moveToUCI(e){if(typeof e=="string")return e;const t=this.positionToSquare(e.from.row,e.from.col),s=this.positionToSquare(e.to.row,e.to.col),i=e.promotion?e.promotion.to[1].toLowerCase():"";return t+s+i}positionToSquare(e,t){const s=String.fromCharCode(97+t),i=8-e;return s+i}squareToPosition(e){const t=e.charCodeAt(0)-97;return{row:8-parseInt(e[1]),col:t}}stop(){this.worker&&this.sendCommand("stop")}quit(){this.worker&&(this.sendCommand("quit"),this.worker.terminate(),this.worker=null,this.ready=!1)}}class L{constructor(e){this.app=e,this.engine=null,this.enabled=!1,this.autoHint=!1,this.lastAnalysis=null}async init(){if(this.engine)return!0;try{return console.log("Initializing Coach AI..."),this.engine=new w,await this.engine.init(),this.engine.setSkillLevel(20),console.log("Coach AI ready!"),!0}catch(e){return console.error("Failed to initialize Coach AI:",e),!1}}async enable(e=!1){return await this.init()?(this.enabled=!0,this.autoHint=e,this.showCoachPanel(),!0):!1}disable(){this.enabled=!1,this.hideCoachPanel()}async getHint(e=[]){if(!this.enabled||!this.engine)return null;try{const t=await this.engine.getBestMove(null,e,2e3);if(!t)return null;const s=w.uciToCoords(t),i=this.explainMove(s,e);return this.lastAnalysis={bestMove:s,uciMove:t,explanation:i},this.lastAnalysis}catch(t){return console.error("Coach hint error:",t),null}}explainMove(e,t){const s=this.app.engine.getBoard(),i=s.getPiece(e.from.row,e.from.col),n=i?i[1]:"?",a={P:"pawn",N:"knight",B:"bishop",R:"rook",Q:"queen",K:"king"},o=a[n]||"piece",h="abcdefgh"[e.to.col]+"87654321"[e.to.row],l=[];t.length<20&&l.push(`Move your ${o} to ${h}. In the opening, focus on controlling the center and developing your pieces.`);const d=s.getPiece(e.to.row,e.to.col);if(d){const g=a[d[1]]||"piece";l.push(`This captures the opponent's ${g}!`)}n!=="P"&&t.length<20&&l.push("Good development - getting pieces into the game early is crucial.");const u=["This move strengthens your position.","Look for tactical opportunities after this move.","This improves your piece coordination.","Consider your opponent's threats after moving."];return l.length===0&&l.push(u[Math.floor(Math.random()*u.length)]),l.join(" ")}async analyzePosition(e=[]){if(!this.enabled)return null;const t=await this.getHint(e);if(!t)return null;const s=this.getGameStage(e),i=this.getStrategicAdvice(s);return{...t,stage:s,advice:i}}getGameStage(e){const t=e.length;return t<20?"opening":t<60?"middlegame":"endgame"}getStrategicAdvice(e){const t={opening:["🎯 Opening Tips: Control the center, develop knights before bishops, castle early for king safety.","📚 Opening Goals: Get your pieces out, control key squares, prepare for the middlegame.","♟️ Opening Principles: Don't move the same piece twice, develop with a threat when possible."],middlegame:["⚔️ Middlegame Strategy: Look for tactical opportunities, improve piece placement, create threats.","🎭 Middlegame Focus: Attack weak points, coordinate your pieces, consider pawn breaks.","🧩 Middlegame Plans: Improve your worst piece, target opponent weaknesses, maintain tension."],endgame:["👑 Endgame Key: Activate your king! In the endgame, the king becomes a strong piece.","⚡ Endgame Priority: Passed pawns are crucial, keep your king active, use opposition.","🏆 Endgame Technique: Push passed pawns, use your king actively, be precise with moves."]},s=t[e]||t.middlegame;return s[Math.floor(Math.random()*s.length)]}showCoachPanel(){let e=document.getElementById("coach-panel");e||(e=document.createElement("div"),e.id="coach-panel",e.className="coach-panel",e.innerHTML=`
        <div class="coach-header">
          <span class="coach-icon">🎓</span>
          <span class="coach-title">Chess Coach</span>
          <button class="coach-close" onclick="window.app.aiManager.coachAI.disable()">×</button>
        </div>
        <div class="coach-content">
          <div class="coach-hint" id="coach-hint">
            <em>Click "Get Hint" to see the best move!</em>
          </div>
          <div class="coach-advice" id="coach-advice"></div>
        </div>
        <div class="coach-actions">
          <button class="btn-primary" onclick="window.app.requestHint()">💡 Get Hint</button>
          <button class="btn-secondary" onclick="window.app.requestAnalysis()">📊 Analyze</button>
        </div>
      `,document.body.appendChild(e)),e.style.display="flex"}hideCoachPanel(){const e=document.getElementById("coach-panel");e&&(e.style.display="none")}displayHint(e){const t=document.getElementById("coach-hint"),s=document.getElementById("coach-advice");if(t&&e){const i="abcdefgh",n="87654321",a=i[e.bestMove.from.col]+n[e.bestMove.from.row],o=i[e.bestMove.to.col]+n[e.bestMove.to.row];t.innerHTML=`
        <strong>💡 Best Move:</strong> ${a} → ${o}<br>
        <em>${e.explanation}</em>
      `,this.highlightSuggestion(e.bestMove)}s&&e&&e.advice&&(s.innerHTML=`<div class="strategic-tip">${e.advice}</div>`)}highlightSuggestion(e){this.app.coachSuggestion=e,this.app.render(),setTimeout(()=>{this.app.coachSuggestion=null,this.app.render()},1e4)}clearHint(){const e=document.getElementById("coach-hint");e&&(e.innerHTML='<em>Click "Get Hint" to see the best move!</em>'),this.app.coachSuggestion=null,this.app.render()}}class M{constructor(e){this.app=e,this.engine=null,this.coachAI=null,this.enabled=!1,this.vsComputerActive=!1,this.aiColor="black",this.skillLevel=10,this.thinking=!1,this.moveHistory=[],this.coachAI=new L(e)}async init(){if(this.engine)return!0;try{return console.log("Initializing Stockfish engine..."),this.engine=new w,await this.engine.init(),this.engine.setSkillLevel(this.skillLevel),console.log("Stockfish engine ready!"),!0}catch(e){return console.error("Failed to initialize AI:",e),this.app.showNotification("Failed to load AI engine"),!1}}async startVsComputer(e="black",t=10){return await this.init()?(this.enabled=!0,this.vsComputerActive=!0,this.aiColor=e,this.skillLevel=t,this.moveHistory=[],this.engine.setSkillLevel(t),this.app.engine.newGame(),this.app.lastMove=null,this.app.selectedSquare=null,this.app.legalMoves=[],this.app.render(),console.log(`Starting game vs computer (AI plays ${e}, skill ${t})`),e==="white"&&setTimeout(()=>this.makeAIMove(),500),!0):!1}async startAIGame(e="black",t=10){return this.startVsComputer(e,t)}stopVsComputer(){this.enabled=!1,this.vsComputerActive=!1,this.thinking=!1,this.moveHistory=[],this.hideThinkingIndicator()}isAITurn(){if(!this.enabled)return console.log("AI not enabled"),!1;const e=this.app.engine.getCurrentTurn(),t=e==="white"&&this.aiColor==="white"||e==="black"&&this.aiColor==="black";return console.log("AI turn check:",{enabled:this.enabled,currentTurn:e,aiColor:this.aiColor,isTurn:t}),t}async makeAIMove(){if(!this.enabled||this.thinking)return;const e=this.app.engine.getGameStatus();if(!(e==="checkmate"||e==="stalemate")){this.thinking=!0,this.showThinkingIndicator();try{const i=500+this.skillLevel/20*1500;console.log(`AI thinking... (${Math.round(i)}ms)`);const n=await this.engine.getBestMove(null,this.moveHistory,i);if(!n){console.error("AI failed to find a move"),this.thinking=!1,this.hideThinkingIndicator();return}console.log("AI chose move:",n);const a=w.uciToCoords(n);this.app.engine.makeMove(a.from.row,a.from.col,a.to.row,a.to.col,a.promotion)==="promotion"&&this.app.engine.makeMove(0,0,0,0,a.promotion||"Q"),this.moveHistory.push(n),this.app.lastMove=this.app.engine.getLastMove(),this.app.selectedSquare=null,this.app.legalMoves=[],this.app.render(),this.app.updateGameInfo();const r=this.app.engine.getGameStatus();if(r==="checkmate"){const c=this.app.engine.getCurrentTurn()==="white"?"Black":"White";this.app.showNotification(`Checkmate! ${c} wins!`),this.stopVsComputer()}else r==="check"?this.app.showNotification("Check!"):r==="stalemate"&&(this.app.showNotification("Stalemate! Game is a draw."),this.stopVsComputer())}catch(t){console.error("AI move error:",t),this.app.showNotification("AI error - please try again")}finally{this.thinking=!1,this.hideThinkingIndicator()}}}recordMove(e,t,s,i,n=null){if(!this.enabled)return;const a=w.coordsToUci(e,t,s,i,n);this.moveHistory.push(a),this.isAITurn()&&setTimeout(()=>this.makeAIMove(),300)}showThinkingIndicator(){let e=document.getElementById("ai-thinking");e||(e=document.createElement("div"),e.id="ai-thinking",e.className="ai-thinking",e.innerHTML=`
        <div class="thinking-content">
          <div class="thinking-spinner"></div>
          <span>AI is thinking...</span>
        </div>
      `,document.body.appendChild(e)),e.style.display="flex"}hideThinkingIndicator(){const e=document.getElementById("ai-thinking");e&&(e.style.display="none")}static getSkillLevelName(e){return e<=3?"Beginner":e<=7?"Casual":e<=12?"Intermediate":e<=16?"Advanced":"Expert"}static getApproxELO(e){return 800+e*110}}class q{constructor(e){this.app=e,this.currentLesson=0,this.active=!1,this.lessons=[{title:"Welcome to Chess!",description:"Let's learn how to play chess step by step.",setup:"empty",pieces:[],instructions:"Chess is played on an 8×8 board with 64 squares. Each player starts with 16 pieces. Click 'Next' to continue!",task:null},{title:"The Pawn ♟️",description:"Pawns are the foot soldiers of chess",setup:"custom",pieces:[{piece:"wP",row:6,col:4}],instructions:"Pawns move forward one square. On their first move, they can move two squares! Try moving this white pawn forward.",task:{type:"move_piece",from:{row:6,col:4},validMoves:[{row:5,col:4},{row:4,col:4}]}},{title:"Pawn Captures ⚔️",description:"Pawns capture diagonally",setup:"custom",pieces:[{piece:"wP",row:4,col:4},{piece:"bP",row:3,col:5}],instructions:"Pawns capture pieces diagonally, one square forward. Capture the black pawn!",task:{type:"capture",from:{row:4,col:4},target:{row:3,col:5}}},{title:"The Rook ♜",description:"Rooks move in straight lines",setup:"custom",pieces:[{piece:"wR",row:7,col:0}],instructions:"Rooks move any number of squares horizontally or vertically. Try moving the rook!",task:{type:"move_piece",from:{row:7,col:0},validMoves:[{row:7,col:3},{row:7,col:4},{row:4,col:0},{row:3,col:0}]}},{title:"The Bishop ♝",description:"Bishops move diagonally",setup:"custom",pieces:[{piece:"wB",row:7,col:2}],instructions:"Bishops move any number of squares diagonally. Move the bishop along a diagonal!",task:{type:"move_piece",from:{row:7,col:2},validMoves:[{row:5,col:4},{row:4,col:5},{row:6,col:3},{row:5,col:0}]}},{title:"The Knight ♞",description:"Knights jump in an L-shape",setup:"custom",pieces:[{piece:"wN",row:7,col:1}],instructions:"Knights move in an 'L' shape: 2 squares in one direction, then 1 square perpendicular. Knights can jump over other pieces!",task:{type:"move_piece",from:{row:7,col:1},validMoves:[{row:5,col:0},{row:5,col:2},{row:6,col:3}]}},{title:"The Queen ♛",description:"The most powerful piece",setup:"custom",pieces:[{piece:"wQ",row:4,col:4}],instructions:"The Queen combines rook and bishop powers! She can move any number of squares horizontally, vertically, or diagonally.",task:{type:"move_piece",from:{row:4,col:4},validMoves:[{row:4,col:7},{row:7,col:4},{row:1,col:1},{row:2,col:6}]}},{title:"The King ♚",description:"The most important piece",setup:"custom",pieces:[{piece:"wK",row:7,col:4}],instructions:"The King moves one square in any direction. The goal of chess is to checkmate the opponent's king! Move your king one square.",task:{type:"move_piece",from:{row:7,col:4},validMoves:[{row:7,col:3},{row:7,col:5},{row:6,col:3},{row:6,col:4},{row:6,col:5}]}},{title:"Check! ⚠️",description:"Attacking the enemy king",setup:"custom",pieces:[{piece:"wQ",row:4,col:3},{piece:"bK",row:0,col:3}],instructions:"When you attack the opponent's king, it's called 'CHECK'. The king must escape! Put the black king in check by moving your queen.",task:{type:"check",from:{row:4,col:3},target:{row:0,col:3}}},{title:"Checkmate! 🏆",description:"Winning the game",setup:"custom",pieces:[{piece:"wQ",row:7,col:3},{piece:"wR",row:1,col:0},{piece:"bK",row:0,col:0}],instructions:"Checkmate means the king is in check and cannot escape! Move the queen to deliver checkmate!",task:{type:"checkmate",from:{row:7,col:3},to:{row:0,col:1}}},{title:"Congratulations! 🎉",description:"You've learned the basics!",setup:"start",pieces:[],instructions:"You now know how all the pieces move! Ready to play a full game? Start with the AI on beginner mode to practice!",task:null}]}start(){this.currentLesson=0,this.active=!0,this.showLesson()}showLesson(){const e=this.lessons[this.currentLesson];this.setupBoard(e),this.showLessonUI(e),e.task&&this.enableTask(e.task)}setupBoard(e){const t=this.app.engine.getBoard();t.clear(),e.setup==="start"?this.app.engine.newGame():e.setup==="custom"&&e.pieces&&e.pieces.forEach(({piece:s,row:i,col:n})=>{t.setPiece(i,n,s)}),this.app.render()}showLessonUI(e){let t=document.getElementById("learn-panel");t||(t=document.createElement("div"),t.id="learn-panel",t.className="learn-panel",document.body.appendChild(t));const s=((this.currentLesson+1)/this.lessons.length*100).toFixed(0);t.innerHTML=`
      <div class="learn-header">
        <span class="learn-icon">🎓</span>
        <div class="learn-title">
          <h3>${e.title}</h3>
          <p>${e.description}</p>
        </div>
        <button class="learn-close" onclick="window.app.learnMode.exit()">×</button>
      </div>
      <div class="learn-progress">
        <div class="progress-bar">
          <div class="progress-fill" style="width: ${s}%"></div>
        </div>
        <span class="progress-text">Lesson ${this.currentLesson+1} of ${this.lessons.length}</span>
      </div>
      <div class="learn-content">
        <p class="learn-instructions">${e.instructions}</p>
      </div>
      <div class="learn-actions">
        ${this.currentLesson>0?'<button class="btn-secondary" onclick="window.app.learnMode.previousLesson()">← Previous</button>':""}
        ${e.task?"":'<button class="btn-primary" onclick="window.app.learnMode.nextLesson()">Next →</button>'}
      </div>
    `,t.style.display="flex"}enableTask(e){this.app.currentTask=e}validateTask(e,t,s,i){const n=this.app.currentTask;return!n||n.from&&(n.from.row!==e||n.from.col!==t)?!1:n.type==="move_piece"?n.validMoves.some(a=>a.row===s&&a.col===i):n.type==="capture"||n.type==="check"||n.type==="checkmate"?n.to?n.to.row===s&&n.to.col===i:n.target?n.target.row===s&&n.target.col===i:!1:!1}taskCompleted(){this.app.showNotification("✅ Great job! Moving to next lesson..."),setTimeout(()=>this.nextLesson(),1500)}nextLesson(){this.currentLesson<this.lessons.length-1?(this.currentLesson++,this.showLesson()):this.complete()}previousLesson(){this.currentLesson>0&&(this.currentLesson--,this.showLesson())}complete(){this.app.showNotification("🎉 Tutorial complete! You're ready to play!"),this.exit()}exit(){this.active=!1,this.app.currentTask=null;const e=document.getElementById("learn-panel");e&&(e.style.display="none"),this.app.engine.newGame(),this.app.render()}}class B{constructor(e){this.app=e,this.engine=e.engine,this.isReplaying=!1,this.replayIndex=0,this.autoPlayInterval=null,this.replaySpeed=1e3,this.originalMoveHistory=[],this.originalBoard=null,this.originalTurn=null,this.setupEventListeners()}setupEventListeners(){this.addTouchEvents("replay-btn",()=>{this.isReplaying?this.exit():this.start()}),this.addTouchEvents("replay-start",()=>this.jumpToStart()),this.addTouchEvents("replay-prev",()=>this.prevMove()),this.addTouchEvents("replay-play",()=>this.autoPlay()),this.addTouchEvents("replay-pause",()=>this.stopAutoPlay()),this.addTouchEvents("replay-next",()=>this.nextMove()),this.addTouchEvents("replay-end",()=>this.jumpToCurrent()),this.addTouchEvents("replay-exit",()=>this.exit()),document.addEventListener("keydown",e=>{if(this.isReplaying)switch(e.key){case"ArrowLeft":e.preventDefault(),this.prevMove();break;case"ArrowRight":e.preventDefault(),this.nextMove();break;case" ":e.preventDefault(),this.autoPlayInterval?this.stopAutoPlay():this.autoPlay();break;case"Home":e.preventDefault(),this.jumpToStart();break;case"End":e.preventDefault(),this.jumpToCurrent();break;case"Escape":e.preventDefault(),this.exit();break}})}addTouchEvents(e,t){const s=document.getElementById(e);s&&(s.addEventListener("click",t),s.addEventListener("touchstart",i=>{i.preventDefault(),t()},{passive:!1}),s.addEventListener("touchend",i=>{i.preventDefault()},{passive:!1}))}start(){var t;const e=this.engine.getMoveHistory();if(e.length===0){this.app.showNotification("No moves to replay!");return}this.isReplaying=!0,this.originalMoveHistory=[...e],this.originalBoard=this.engine.getBoard(),this.originalTurn=this.engine.getCurrentTurn(),this.jumpToStart(),this.showControls(),(t=document.querySelector(".footer"))==null||t.style.setProperty("display","none"),this.app.showNotification("🎬 Replay Mode - Use ← → or buttons")}exit(){var e,t;if(this.isReplaying){this.stopAutoPlay(),this.isReplaying=!1,this.engine.gameState.reset(),this.engine.gameState.moveHistory=[...this.originalMoveHistory];for(const s of this.originalMoveHistory)this.engine.makeMove(s.from.row,s.from.col,s.to.row,s.to.col,(e=s.promotion)==null?void 0:e.to[1]);this.hideControls(),(t=document.querySelector(".footer"))==null||t.style.removeProperty("display"),this.app.render(),this.app.showNotification("Exited replay mode")}}jumpToStart(){this.replayIndex=0,this.renderAtIndex(0)}jumpToCurrent(){this.replayIndex=this.originalMoveHistory.length,this.renderAtIndex(this.replayIndex)}prevMove(){this.replayIndex>0&&(this.replayIndex--,this.renderAtIndex(this.replayIndex))}nextMove(){this.replayIndex<this.originalMoveHistory.length&&(this.replayIndex++,this.renderAtIndex(this.replayIndex))}autoPlay(){this.autoPlayInterval||(document.getElementById("replay-play").style.display="none",document.getElementById("replay-pause").style.display="inline-block",this.autoPlayInterval=setInterval(()=>{this.replayIndex<this.originalMoveHistory.length?this.nextMove():this.stopAutoPlay()},this.replaySpeed))}stopAutoPlay(){this.autoPlayInterval&&(clearInterval(this.autoPlayInterval),this.autoPlayInterval=null,document.getElementById("replay-play").style.display="inline-block",document.getElementById("replay-pause").style.display="none")}renderAtIndex(e){var i;const t=new b;t.newGame();for(let n=0;n<e;n++){const a=this.originalMoveHistory[n];t.makeMove(a.from.row,a.from.col,a.to.row,a.to.col,(i=a.promotion)==null?void 0:i.to[1])}const s=this.app.engine;this.app.engine=t,e>0?this.app.lastMove=this.originalMoveHistory[e-1]:this.app.lastMove=null,this.app.render(),this.app.engine=s,this.updateReplayUI()}updateReplayUI(){const e=this.originalMoveHistory.length,t=this.replayIndex,s=document.getElementById("replay-position");s&&(s.textContent=`Move ${t} of ${e}`);const i=document.getElementById("current-move-display");if(i&&t>0){const h=this.originalMoveHistory[t-1],l=Math.floor((t-1)/2)+1,d=(t-1)%2===0?"":"...";i.textContent=`${l}${d}. ${h.notation}`}else i&&(i.textContent="Starting position");const n=document.getElementById("current-turn");if(n){const h=t%2===0?"White":"Black";n.textContent=`${h} to move`}const a=document.getElementById("replay-start"),o=document.getElementById("replay-prev"),r=document.getElementById("replay-next"),c=document.getElementById("replay-end");a&&(a.disabled=t===0),o&&(o.disabled=t===0),r&&(r.disabled=t===e),c&&(c.disabled=t===e)}showControls(){const e=document.getElementById("replay-controls");e&&(e.style.display="flex");const t=document.getElementById("replay-btn");t&&(t.textContent="✖️ Exit Replay",t.classList.add("active")),document.body.classList.add("replay-active")}hideControls(){const e=document.getElementById("replay-controls");e&&(e.style.display="none");const t=document.getElementById("replay-btn");t&&(t.textContent="🎬 Replay",t.classList.remove("active")),document.body.classList.remove("replay-active")}isActive(){return this.isReplaying}setSpeed(e){this.replaySpeed=e,this.autoPlayInterval&&(this.stopAutoPlay(),this.autoPlay())}}class H{constructor(){this.base36Chars="0123456789abcdefghijklmnopqrstuvwxyz"}generateGameId(){const e=Date.now()%1679616;return this.toBase36(e,4)}toBase36(e,t=1){let s="",i=e;do s=this.base36Chars[i%36]+s,i=Math.floor(i/36);while(i>0);for(;s.length<t;)s="0"+s;return s}fromBase36(e){let t=0;for(let s=0;s<e.length;s++){const i=this.base36Chars.indexOf(e[s].toLowerCase());if(i===-1)throw new Error("Invalid base36 character");t=t*36+i}return t}encodeMove(e){if(e.castle)return e.castle==="kingside"||e.notation==="O-O"?"O-O":"O-O-O";if(e.notation)return e.notation;const t=this.positionToSquare(e.from.row,e.from.col),s=this.positionToSquare(e.to.row,e.to.col),i=e.piece[1],n=e.captured?"x":"";return i==="P"?n?t[0]+n+s:s:i+n+s}decodeMove(e,t,s){if(e==="O-O"||e==="O-O-O"){const u=s==="white"?7:0;return{type:"castle",side:e==="O-O"?"kingside":"queenside",from:{row:u,col:4},to:{row:u,col:e==="O-O"?6:2}}}const i=s[0];let n="P",a="",o=null,r=null,c=null;const h=e.match(/([a-h][18])=?([QRBN])/);if(h)a=h[1],c=h[2],n="P";else{const u=e.match(/^([KQRBN])?([a-h])?([1-8])?(x)?([a-h][1-8])$/);u?(n=u[1]||"P",o=u[2],r=u[3],a=u[5]):a=e}const l=this.squareToPosition(a);return{from:this.findPieceForMove(t,i+n,l,o,r),to:l,piece:i+n,promotion:c}}findPieceForMove(e,t,s,i,n){for(let a=0;a<8;a++)for(let o=0;o<8;o++)if(e.getPiece(a,o)===t&&!(i&&String.fromCharCode(97+o)!==i)&&!(n&&(8-a).toString()!==n))return{row:a,col:o};throw new Error(`Cannot find ${t} that can move to target`)}positionToSquare(e,t){const s=String.fromCharCode(97+t),i=8-e;return s+i}squareToPosition(e){const t=e.charCodeAt(0)-97;return{row:8-parseInt(e[1]),col:t}}encodeGameState(e,t=null){t||(t=this.generateGameId());const s=e.map(n=>this.encodeMove(n)).join("-");return`${window.location.origin}/m/${t}-${s}`}decodeGameState(e){let t=e;e.includes("://")&&(t=new URL(e).pathname);const s=t.match(/\/m\/([a-z0-9]{4})(?:-(.+))?$/);if(!s)throw new Error("Invalid game URL format");const i=s[1],n=s[2]||"",a=n?n.split("-"):[];return{gameId:i,moves:a}}createShareMessage(e,t){return`♟️ Your turn! ${t==="white"?"Black":"White"} to move.

Play here: ${e}`}estimateUrlLength(e){return 26+e*4}}class ${constructor(e){this.app=e,this.encoder=new H,this.currentGameId=null}async shareGame(){const e=this.app.engine.getMoveHistory();if(e.length===0)return this.app.showNotification("No moves to share yet!"),!1;this.currentGameId||(this.currentGameId=this.encoder.generateGameId(),this.saveGameId());const t=this.encoder.encodeGameState(e,this.currentGameId),s=this.app.engine.getCurrentTurn(),i=this.encoder.createShareMessage(t,s);if(this.canUseWebShare())try{return await navigator.share({title:"Mate - Your Turn!",text:i,url:t}),this.app.showNotification("✅ Game shared!"),!0}catch(n){if(n.name!=="AbortError")console.error("Share failed:",n);else return!1}return await this.copyToClipboard(t,i)}async copyToClipboard(e,t=null){const s=t||e;try{return navigator.clipboard&&navigator.clipboard.writeText?(await navigator.clipboard.writeText(s),this.app.showNotification("🔗 Link copied! Share it with your friend."),this.showShareOptionsDialog(e),!0):this.fallbackCopy(s)}catch(i){return console.error("Clipboard failed:",i),this.fallbackCopy(s)}}fallbackCopy(e){const t=document.createElement("textarea");t.value=e,t.style.position="fixed",t.style.opacity="0",t.style.pointerEvents="none",document.body.appendChild(t);try{t.select(),t.setSelectionRange(0,t.value.length);const s=document.execCommand("copy");return document.body.removeChild(t),s?(this.app.showNotification("🔗 Link copied to clipboard!"),!0):(this.app.showNotification("❌ Failed to copy link"),!1)}catch{return document.body.removeChild(t),this.app.showNotification("❌ Failed to copy link"),!1}}showShareOptionsDialog(e){const t=document.createElement("div");t.className="share-dialog",t.innerHTML=`
      <div class="share-dialog-content">
        <h3>Share via:</h3>
        <div class="share-options">
          <a href="sms:?body=${encodeURIComponent(e)}" class="share-btn sms">
            <span class="share-icon">📱</span>
            <span>SMS</span>
          </a>
          <a href="https://wa.me/?text=${encodeURIComponent(e)}" target="_blank" class="share-btn whatsapp">
            <span class="share-icon">💬</span>
            <span>WhatsApp</span>
          </a>
          <button class="share-btn copy" onclick="navigator.clipboard.writeText('${e}')">
            <span class="share-icon">📋</span>
            <span>Copy Again</span>
          </button>
        </div>
        <input type="text" readonly value="${e}" class="share-url-input" onclick="this.select()">
        <button class="btn-secondary" onclick="this.closest('.share-dialog').remove()">Close</button>
      </div>
    `,t.style.cssText=`
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 5000;
    `,document.body.appendChild(t),t.addEventListener("click",s=>{s.target===t&&t.remove()}),setTimeout(()=>{t.parentNode&&t.remove()},3e4)}canUseWebShare(){return navigator.share&&navigator.canShare}generateShareText(e){const s=this.app.engine.getCurrentTurn()==="white"?"Black":"White",i=this.app.engine.getMoveHistory().length;return`♟️ Mate - Your Turn!

${s} to move (Move ${i+1})

${e}`}saveGameId(){this.currentGameId&&localStorage.setItem("mate-current-game-id",this.currentGameId)}loadGameId(){return this.currentGameId=localStorage.getItem("mate-current-game-id"),this.currentGameId}newGame(){return this.currentGameId=this.encoder.generateGameId(),this.saveGameId(),this.currentGameId}getGameId(){return this.currentGameId||(this.currentGameId=this.loadGameId()||this.encoder.generateGameId(),this.saveGameId()),this.currentGameId}setGameId(e){this.currentGameId=e,this.saveGameId()}getShareUrl(){const e=this.app.engine.getMoveHistory(),t=this.getGameId();return this.encoder.encodeGameState(e,t)}estimateUrlLength(){const e=this.app.engine.getMoveHistory().length;return this.encoder.estimateUrlLength(e)}}class N{constructor(){this.engine=new b}decodeGame(e,t){try{this.engine.newGame();for(let s=0;s<t.length;s++){const i=t[s];if(i==="O-O"||i==="O-O-O"){if(!this.applyCastling(i))return{valid:!1,error:`Invalid castling at move ${s+1}: ${i}`,engine:null};continue}if(!this.applyMoveFromNotation(i))return{valid:!1,error:`Invalid move at position ${s+1}: ${i}`,engine:null}}return{valid:!0,engine:this.engine,gameId:e,moveCount:t.length,error:null}}catch(s){return{valid:!1,error:s.message,engine:null}}}applyCastling(e){const s=this.engine.getCurrentTurn()==="white"?7:0,i=e==="O-O"?"kingside":"queenside";return this.engine.makeMove(s,4,s,i==="kingside"?6:2)}applyMoveFromNotation(e){const t=this.engine.getCurrentTurn(),s=this.engine.getBoard(),i=t[0],n=e.match(/([a-h][18])=?([QRBN])/);if(n){const u=n[1],g=n[2],f=this.squareToPosition(u),P=u.charCodeAt(0)-97,A=t==="white"?1:6;return this.engine.makeMove(A,P,f.row,f.col,g)}let a="P",o="",r=null,c=null;const h=e.match(/^([a-h])x([a-h][1-8])$/);if(h)a="P",r=h[1],o=h[2];else{const u=e.match(/^([KQRBN])?([a-h])?([1-8])?(x)?([a-h][1-8])$/);if(u)a=u[1]||"P",r=u[2],c=u[3],u[4],o=u[5];else if(e.match(/^[a-h][1-8]$/))o=e,a="P";else return console.error("Cannot parse notation:",e),!1}const l=this.squareToPosition(o),d=this.findPieceForMove(s,i+a,l,r,c,t);return d?this.engine.makeMove(d.row,d.col,l.row,l.col):(console.error("Cannot find piece for move:",e),!1)}findPieceForMove(e,t,s,i,n,a){const o=[];for(let r=0;r<8;r++)for(let c=0;c<8;c++){if(e.getPiece(r,c)!==t||i&&String.fromCharCode(97+c)!==i||n&&(8-r).toString()!==n)continue;this.engine.getLegalMoves(r,c).some(u=>u.row===s.row&&u.col===s.col)&&o.push({row:r,col:c})}return o.length===0?null:(o.length===1||console.warn("Multiple candidates for move, using first:",o),o[0])}squareToPosition(e){const t=e.charCodeAt(0)-97;return{row:8-parseInt(e[1]),col:t}}static isValidGameUrl(e){return/\/m\/[a-z0-9]{4}(?:-[a-zA-Z0-9\-]+)?$/.test(e)}static getGameInfo(e){const t=e.match(/\/m\/([a-z0-9]{4})(?:-(.+))?$/);if(!t)return null;const s=t[1],i=t[2]||"",n=i?i.split("-"):[];return{gameId:s,moveCount:n.length,lastMove:n[n.length-1]||null}}}class T{constructor(){this.enabled=this.loadSoundSetting(),this.audioContext=null,this.sounds={},this.initialized=!1,this.pendingSound=null}init(){if(!this.initialized)try{const e=window.AudioContext||window.webkitAudioContext;this.audioContext=new e,this.initialized=!0,console.log("[Sound] Audio context initialized"),this.pendingSound&&(this.play(this.pendingSound),this.pendingSound=null)}catch(e){console.error("[Sound] Failed to initialize audio context:",e)}}play(e){if(this.enabled){if(!this.initialized&&(this.init(),!this.initialized)){this.pendingSound=e;return}try{switch(e){case"move":this.playMoveSound();break;case"capture":this.playCaptureSound();break;case"check":this.playCheckSound();break;case"checkmate":this.playCheckmateSound();break;case"illegal":this.playIllegalSound();break;case"select":this.playSelectSound();break;default:console.warn("[Sound] Unknown sound type:",e)}}catch(t){console.error("[Sound] Error playing sound:",t)}}}playMoveSound(){const e=this.audioContext,t=e.createOscillator(),s=e.createGain();t.connect(s),s.connect(e.destination),t.frequency.setValueAtTime(800,e.currentTime),t.frequency.exponentialRampToValueAtTime(600,e.currentTime+.05),s.gain.setValueAtTime(.15,e.currentTime),s.gain.exponentialRampToValueAtTime(.01,e.currentTime+.05),t.start(e.currentTime),t.stop(e.currentTime+.05)}playCaptureSound(){const e=this.audioContext,t=e.createOscillator(),s=e.createGain();t.connect(s),s.connect(e.destination),t.frequency.setValueAtTime(1200,e.currentTime),t.frequency.exponentialRampToValueAtTime(400,e.currentTime+.08),s.gain.setValueAtTime(.2,e.currentTime),s.gain.exponentialRampToValueAtTime(.01,e.currentTime+.08),t.start(e.currentTime),t.stop(e.currentTime+.08)}playCheckSound(){const e=this.audioContext;for(let t=0;t<2;t++){const s=e.createOscillator(),i=e.createGain();s.connect(i),i.connect(e.destination);const n=e.currentTime+t*.1;s.frequency.setValueAtTime(900,n),i.gain.setValueAtTime(.18,n),i.gain.exponentialRampToValueAtTime(.01,n+.08),s.start(n),s.stop(n+.08)}}playCheckmateSound(){const e=this.audioContext;[{freq:523.25,time:0},{freq:659.25,time:.12},{freq:783.99,time:.24},{freq:1046.5,time:.36}].forEach(s=>{const i=e.createOscillator(),n=e.createGain();i.connect(n),n.connect(e.destination);const a=e.currentTime+s.time;i.frequency.setValueAtTime(s.freq,a),n.gain.setValueAtTime(.2,a),n.gain.exponentialRampToValueAtTime(.01,a+.3),i.start(a),i.stop(a+.3)})}playIllegalSound(){const e=this.audioContext,t=e.createOscillator(),s=e.createGain();t.connect(s),s.connect(e.destination),t.frequency.setValueAtTime(200,e.currentTime),s.gain.setValueAtTime(.1,e.currentTime),s.gain.exponentialRampToValueAtTime(.01,e.currentTime+.1),t.start(e.currentTime),t.stop(e.currentTime+.1)}playSelectSound(){const e=this.audioContext,t=e.createOscillator(),s=e.createGain();t.connect(s),s.connect(e.destination),t.frequency.setValueAtTime(1e3,e.currentTime),t.frequency.exponentialRampToValueAtTime(800,e.currentTime+.03),s.gain.setValueAtTime(.08,e.currentTime),s.gain.exponentialRampToValueAtTime(.01,e.currentTime+.03),t.start(e.currentTime),t.stop(e.currentTime+.03)}toggle(){return this.enabled=!this.enabled,this.saveSoundSetting(),this.enabled}setEnabled(e){this.enabled=e,this.saveSoundSetting()}loadSoundSetting(){const e=localStorage.getItem("mate-sound-enabled");return e===null?!0:e==="true"}saveSoundSetting(){localStorage.setItem("mate-sound-enabled",this.enabled.toString())}isEnabled(){return this.enabled}}if(typeof window<"u"){window.soundManager=new T;const m=()=>{window.soundManager.init(),document.removeEventListener("click",m),document.removeEventListener("touchstart",m),document.removeEventListener("keydown",m)};document.addEventListener("click",m,{once:!0}),document.addEventListener("touchstart",m,{once:!0}),document.addEventListener("keydown",m,{once:!0})}class D{constructor(e,t,s){this.canvas=e,this.ctx=t,this.squareSize=s,this.animations=new Map,this.animationId=null,this.isAnimating=!1,this.moveDuration=300,this.fadeDuration=200,this.flipDuration=500,this.easing=this.easeInOutCubic}animateMove(e,t,s,i,n,a=null){const o=`move_${Date.now()}_${Math.random()}`,r=performance.now(),c=t*this.squareSize,h=e*this.squareSize,l=i*this.squareSize,d=s*this.squareSize,u={id:o,type:"move",startTime:r,duration:this.moveDuration,startX:c,startY:h,endX:l,endY:d,piece:n,onComplete:a};return this.animations.set(o,u),this.startAnimationLoop(),o}animateCapture(e,t,s,i=null){const n=`capture_${Date.now()}_${Math.random()}`,a=performance.now(),o=t*this.squareSize,r=e*this.squareSize,c={id:n,type:"capture",startTime:a,duration:this.fadeDuration,x:o,y:r,piece:s,opacity:1,onComplete:i};return this.animations.set(n,c),this.startAnimationLoop(),n}animateBoardFlip(e=null){const t=`flip_${Date.now()}_${Math.random()}`,s=performance.now(),i={id:t,type:"flip",startTime:s,duration:this.flipDuration,scale:1,onComplete:e};return this.animations.set(t,i),this.startAnimationLoop(),t}startAnimationLoop(){if(this.animationId)return;this.isAnimating=!0;const e=t=>{let s=!1;for(const[i,n]of this.animations){const a=t-n.startTime,o=Math.min(a/n.duration,1);o<1?(s=!0,this.updateAnimation(n,o)):(this.completeAnimation(n),this.animations.delete(i))}s?this.animationId=requestAnimationFrame(e):(this.animationId=null,this.isAnimating=!1)};this.animationId=requestAnimationFrame(e)}updateAnimation(e,t){const s=this.easing(t);switch(e.type){case"move":e.currentX=e.startX+(e.endX-e.startX)*s,e.currentY=e.startY+(e.endY-e.startY)*s;break;case"capture":e.opacity=1-s;break;case"flip":t<.5?e.scale=1-s*.4:e.scale=.6+(s-.5)*.8;break}}completeAnimation(e){e.onComplete&&e.onComplete(e)}renderAnimations(e){if(this.isAnimating)for(const t of this.animations.values())this.renderAnimation(t,e)}renderAnimation(e,t){switch(this.ctx.save(),e.type){case"move":this.ctx.globalAlpha=.8,t(e.piece,e.currentX+this.squareSize/2,e.currentY+this.squareSize/2,this.squareSize*.8);break;case"capture":this.ctx.globalAlpha=e.opacity,t(e.piece,e.x+this.squareSize/2,e.y+this.squareSize/2,this.squareSize*.8);break;case"flip":const s=this.canvas.width/2,i=this.canvas.height/2;this.ctx.translate(s,i),this.ctx.scale(e.scale,e.scale),this.ctx.translate(-s,-i);break}this.ctx.restore()}easeInOutCubic(e){return e<.5?4*e*e*e:1-Math.pow(-2*e+2,3)/2}hasActiveAnimations(){return this.animations.size>0}cancelAllAnimations(){this.animations.clear(),this.animationId&&(cancelAnimationFrame(this.animationId),this.animationId=null,this.isAnimating=!1)}cancelAnimation(e){this.animations.delete(e),this.animations.size===0&&this.animationId&&(cancelAnimationFrame(this.animationId),this.animationId=null,this.isAnimating=!1)}setMoveDuration(e){this.moveDuration=e}setFadeDuration(e){this.fadeDuration=e}setFlipDuration(e){this.flipDuration=e}}class C{constructor(){this.enabled=this.loadHapticSetting(),this.vibrationSupported="vibrate"in navigator,this.hapticSupported="vibrate"in navigator,console.log("[Haptic] Initialized:",{enabled:this.enabled,vibrationSupported:this.vibrationSupported,hapticSupported:this.hapticSupported})}move(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate(50)}catch(e){console.warn("[Haptic] Move feedback failed:",e)}}capture(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate([50,30,50])}catch(e){console.warn("[Haptic] Capture feedback failed:",e)}}check(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate([100,50,100])}catch(e){console.warn("[Haptic] Check feedback failed:",e)}}checkmate(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate([100,50,100,50,200])}catch(e){console.warn("[Haptic] Checkmate feedback failed:",e)}}illegal(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate([200,100,200])}catch(e){console.warn("[Haptic] Illegal feedback failed:",e)}}select(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate(25)}catch(e){console.warn("[Haptic] Select feedback failed:",e)}}setEnabled(e){this.enabled=e,this.saveHapticSetting()}toggle(){return this.enabled=!this.enabled,this.saveHapticSetting(),this.enabled}isEnabled(){return this.enabled}isSupported(){return this.hapticSupported}loadHapticSetting(){const e=localStorage.getItem("mate-haptic-enabled");return e===null?!0:e==="true"}saveHapticSetting(){localStorage.setItem("mate-haptic-enabled",this.enabled.toString())}}typeof window<"u"&&(window.hapticManager=new C);class z{constructor(){this.games=new Map,this.defaultGame=null}register(e,t,s={}){if(this.games.has(e)){console.warn(`[GameRegistry] Game '${e}' is already registered`);return}if(!this.isValidGameEngine(t))throw new Error(`Game engine for '${e}' must extend BaseGameEngine`);const i={id:e,name:s.name||e,description:s.description||"",icon:s.icon||"🎮",category:s.category||"board",minPlayers:s.minPlayers||2,maxPlayers:s.maxPlayers||2,aiSupported:s.aiSupported||!1,difficultyLevels:s.difficultyLevels||[],GameEngine:t,metadata:s};this.games.set(e,i),console.log(`[GameRegistry] Registered game: ${e} (${i.name})`),(s.isDefault||this.games.size===1)&&(this.defaultGame=e)}unregister(e){this.games.delete(e)&&(console.log(`[GameRegistry] Unregistered game: ${e}`),this.defaultGame===e&&(this.defaultGame=this.games.size>0?this.games.keys().next().value:null))}getAllGames(){return Array.from(this.games.values())}getGameInfo(e){return this.games.get(e)||null}getDefaultGame(){return this.defaultGame}setDefaultGame(e){if(this.games.has(e))this.defaultGame=e,console.log(`[GameRegistry] Set default game to: ${e}`);else throw new Error(`Game '${e}' is not registered`)}createGameEngine(e){const t=this.games.get(e);if(!t)throw new Error(`Game '${e}' is not registered`);const s=t.GameEngine;return new s}getGamesByCategory(e){return this.getAllGames().filter(t=>t.category===e)}getAIGames(){return this.getAllGames().filter(e=>e.aiSupported)}isRegistered(e){return this.games.has(e)}getGameCount(){return this.games.size}isValidGameEngine(e){const t=["newGame","getBoard","getCurrentTurn","makeMove","getLegalMoves","getGameStatus","getMoveHistory","getCapturedPieces","undoMove","getGameName","getGameDescription","getBoardDimensions","getPieceTypes","getPlayerColors","getPieceAt","isValidPosition","getSquareColor","serialize","deserialize","encodeForURL","decodeFromURL"],s=e.prototype;return t.every(i=>typeof s[i]=="function")}getStats(){const e=this.getAllGames(),t=[...new Set(e.map(i=>i.category))],s=e.filter(i=>i.aiSupported);return{totalGames:e.length,categories:t.length,aiSupported:s.length,defaultGame:this.defaultGame,categories:t.sort()}}clear(){this.games.clear(),this.defaultGame=null,console.log("[GameRegistry] Cleared all games")}}const p=new z;typeof window<"u"&&(window.gameRegistry=p);class G{constructor(){if(this.constructor===G)throw new Error("BaseGameEngine is abstract and cannot be instantiated directly")}newGame(){throw new Error("newGame() must be implemented by subclass")}getBoard(){throw new Error("getBoard() must be implemented by subclass")}getCurrentTurn(){throw new Error("getCurrentTurn() must be implemented by subclass")}makeMove(e,t,s,i,n=null){throw new Error("makeMove() must be implemented by subclass")}getLegalMoves(e,t){throw new Error("getLegalMoves() must be implemented by subclass")}getGameStatus(){throw new Error("getGameStatus() must be implemented by subclass")}getMoveHistory(){throw new Error("getMoveHistory() must be implemented by subclass")}getCapturedPieces(){throw new Error("getCapturedPieces() must be implemented by subclass")}undoMove(){throw new Error("undoMove() must be implemented by subclass")}getGameName(){throw new Error("getGameName() must be implemented by subclass")}getGameDescription(){throw new Error("getGameDescription() must be implemented by subclass")}getBoardDimensions(){throw new Error("getBoardDimensions() must be implemented by subclass")}getPieceTypes(){throw new Error("getPieceTypes() must be implemented by subclass")}getPlayerColors(){throw new Error("getPlayerColors() must be implemented by subclass")}getPieceAt(e,t){throw new Error("getPieceAt() must be implemented by subclass")}isValidPosition(e,t){throw new Error("isValidPosition() must be implemented by subclass")}getSquareColor(e,t){throw new Error("getSquareColor() must be implemented by subclass")}async getAIMove(e,t){throw new Error("AI not supported for this game")}isAISupported(){return!1}serialize(){throw new Error("serialize() must be implemented by subclass")}deserialize(e){throw new Error("deserialize() must be implemented by subclass")}encodeForURL(){throw new Error("encodeForURL() must be implemented by subclass")}decodeFromURL(e){throw new Error("decodeFromURL() must be implemented by subclass")}getLastMove(){const e=this.getMoveHistory();return e.length>0?e[e.length-1]:null}isGameOver(){const e=this.getGameStatus();return e!=="playing"&&e!=="check"}getWinner(){return this.getGameStatus()==="checkmate"?this.getCurrentTurn()==="white"?"black":"white":null}getGameResult(){switch(this.getGameStatus()){case"checkmate":return this.getCurrentTurn()==="white"?"black-wins":"white-wins";case"stalemate":case"draw":return"draw";default:return"playing"}}}class O extends G{constructor(){super(),this.engine=new b}newGame(){return this.engine.newGame(),this.engine.getBoard()}getBoard(){return this.engine.getBoard()}getCurrentTurn(){return this.engine.getCurrentTurn()}makeMove(e,t,s,i,n=null){return this.engine.makeMove(e,t,s,i,n)}getLegalMoves(e,t){return this.engine.getLegalMoves(e,t)}getGameStatus(){return this.engine.getGameStatus()}getMoveHistory(){return this.engine.getMoveHistory()}getCapturedPieces(){return this.engine.getCapturedPieces()}undoMove(){return this.engine.undoMove()}getGameName(){return"Chess"}getGameDescription(){return"Classic strategy game with kings, queens, rooks, bishops, knights, and pawns"}getBoardDimensions(){return{rows:8,cols:8}}getPieceTypes(){return["K","Q","R","B","N","P"]}getPlayerColors(){return["white","black"]}getPieceAt(e,t){return this.getBoard().getPiece(e,t)}isValidPosition(e,t){return e>=0&&e<8&&t>=0&&t<8}getSquareColor(e,t){return(e+t)%2===0?"light":"dark"}async getAIMove(e,t){return null}isAISupported(){return!0}serialize(){return{gameType:"chess",board:this.engine.getBoard().serialize(),currentTurn:this.getCurrentTurn(),moveHistory:this.getMoveHistory(),capturedPieces:this.getCapturedPieces(),gameStatus:this.getGameStatus()}}deserialize(e){if(e.gameType!=="chess")throw new Error("Invalid game type for chess engine");this.engine.getBoard().deserialize(e.board),this.engine.gameState.currentTurn=e.currentTurn,this.engine.gameState.moveHistory=e.moveHistory,this.engine.gameState.capturedPieces=e.capturedPieces,this.engine.gameState.gameStatus=e.gameStatus}encodeForURL(){throw new Error("URL encoding not yet implemented in new architecture")}decodeFromURL(e){throw new Error("URL decoding not yet implemented in new architecture")}}class V extends G{constructor(){super(),this.board=null,this.currentTurn="red",this.moveHistory=[],this.capturedPieces={red:[],black:[]},this.gameStatus="playing",this.lastMove=null,this.newGame()}newGame(){this.board=Array(8).fill(null).map(()=>Array(8).fill(null));for(let e=0;e<3;e++)for(let t=0;t<8;t++)(e+t)%2===1&&(this.board[e][t]="red");for(let e=5;e<8;e++)for(let t=0;t<8;t++)(e+t)%2===1&&(this.board[e][t]="black");return this.currentTurn="red",this.moveHistory=[],this.capturedPieces={red:[],black:[]},this.gameStatus="playing",this.lastMove=null,this.getBoard()}getBoard(){return{getPiece:(e,t)=>this.board[e][t],setPiece:(e,t,s)=>{this.board[e][t]=s},serialize:()=>this.board.map(e=>[...e]),deserialize:e=>{this.board=e.map(t=>[...t])}}}getCurrentTurn(){return this.currentTurn}makeMove(e,t,s,i,n=null){if(!this.isValidMove(e,t,s,i))return!1;const a=this.getCapturedPiece(e,t,s,i),o=this.board[e][t];this.board[e][t]=null,this.board[s][i]=o,a&&this.capturedPieces[this.currentTurn].push(a),this.shouldPromoteToKing(s,i)&&(this.board[s][i]=this.currentTurn+"_king");const r={from:{row:e,col:t},to:{row:s,col:i},piece:o,captured:a,timestamp:Date.now()};return this.moveHistory.push(r),this.lastMove=r,a&&this.hasMoreCaptures(s,i)?(this.gameStatus="capturing","continue_capture"):(this.currentTurn=this.currentTurn==="red"?"black":"red",this.gameStatus="playing",this.checkWinCondition(),!0)}getLegalMoves(e,t){const s=this.board[e][t];if(!s||!s.startsWith(this.currentTurn))return[];const i=[],a=s.includes("king")?[[-1,-1],[-1,1],[1,-1],[1,1]]:this.currentTurn==="red"?[[1,-1],[1,1]]:[[-1,-1],[-1,1]];for(const[o,r]of a){const c=e+o,h=t+r;this.isValidPosition(c,h)&&this.board[c][h]===null&&i.push({row:c,col:h,type:"move"});const l=e+o*2,d=t+r*2,u=e+o,g=t+r;this.isValidPosition(l,d)&&this.board[l][d]===null&&this.board[u][g]!==null&&!this.board[u][g].startsWith(this.currentTurn)&&i.push({row:l,col:d,type:"capture",captured:{row:u,col:g}})}return i}getGameStatus(){return this.gameStatus}getMoveHistory(){return this.moveHistory}getCapturedPieces(){return this.capturedPieces}undoMove(){if(this.moveHistory.length===0)return!1;const e=this.moveHistory.pop(),{from:t,to:s,piece:i,captured:n}=e;return this.board[s.row][s.col]=null,this.board[t.row][t.col]=i,n&&(this.board[n.row][n.col]=n.piece,this.capturedPieces[this.currentTurn].pop()),this.currentTurn=this.currentTurn==="red"?"black":"red",this.gameStatus="playing",this.lastMove=this.moveHistory.length>0?this.moveHistory[this.moveHistory.length-1]:null,!0}getGameName(){return"Checkers"}getGameDescription(){return"Classic strategy game where pieces capture by jumping over opponents"}getBoardDimensions(){return{rows:8,cols:8}}getPieceTypes(){return["red","black","red_king","black_king"]}getPlayerColors(){return["red","black"]}getPieceAt(e,t){return this.board[e][t]}isValidPosition(e,t){return e>=0&&e<8&&t>=0&&t<8}getSquareColor(e,t){return(e+t)%2===0?"light":"dark"}async getAIMove(e,t){throw new Error("AI not yet implemented for checkers")}isAISupported(){return!0}serialize(){return{gameType:"checkers",board:this.board.map(e=>[...e]),currentTurn:this.currentTurn,moveHistory:this.moveHistory,capturedPieces:{...this.capturedPieces},gameStatus:this.gameStatus}}deserialize(e){if(e.gameType!=="checkers")throw new Error("Invalid game type for checkers engine");this.board=e.board.map(t=>[...t]),this.currentTurn=e.currentTurn,this.moveHistory=e.moveHistory,this.capturedPieces={...e.capturedPieces},this.gameStatus=e.gameStatus}encodeForURL(){throw new Error("URL encoding not yet implemented for checkers")}decodeFromURL(e){throw new Error("URL decoding not yet implemented for checkers")}isValidMove(e,t,s,i){const n=this.board[e][t];if(!n||!n.startsWith(this.currentTurn)||!this.isValidPosition(s,i)||this.board[s][i]!==null)return!1;const a=Math.abs(s-e),o=Math.abs(i-t);if(a!==o)return!1;if(!n.includes("king")){const c=this.currentTurn==="red"?1:-1;if((s-e)*c<=0)return!1}if(a===1)return!0;if(a===2){const c=e+(s-e)/2,h=t+(i-t)/2,l=this.board[c][h];return l!==null&&!l.startsWith(this.currentTurn)}return!1}getCapturedPiece(e,t,s,i){if(Math.abs(s-e)!==2)return null;const a=e+(s-e)/2,o=t+(i-t)/2,r=this.board[a][o];return r&&!r.startsWith(this.currentTurn)?(this.board[a][o]=null,r):null}shouldPromoteToKing(e,t){const s=this.board[e][t];return!s||s.includes("king")?!1:this.currentTurn==="red"&&e===7||this.currentTurn==="black"&&e===0}hasMoreCaptures(e,t){return this.getLegalMoves(e,t).some(i=>i.type==="capture")}checkWinCondition(){let e=!1;for(let s=0;s<8;s++){for(let i=0;i<8;i++)if(this.board[s][i]&&this.board[s][i].startsWith(this.currentTurn)){e=!0;break}if(e)break}if(!e){this.gameStatus="checkmate";return}let t=!1;for(let s=0;s<8;s++){for(let i=0;i<8;i++)if(this.board[s][i]&&this.board[s][i].startsWith(this.currentTurn)&&this.getLegalMoves(s,i).length>0){t=!0;break}if(t)break}t||(this.gameStatus="stalemate")}}class I{constructor(){this.currentGame=null,this.currentGameId=null,this.gameEngine=null,this.initializeGameRegistry(),this.loadGamePreference()}initializeGameRegistry(){p.register("chess",O,{name:"Chess",description:"Classic strategy game with kings, queens, rooks, bishops, knights, and pawns",icon:"♟️",category:"strategy",minPlayers:2,maxPlayers:2,aiSupported:!0,difficultyLevels:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],isDefault:!0}),p.register("checkers",V,{name:"Checkers",description:"Classic strategy game where pieces capture by jumping over opponents",icon:"🔴",category:"strategy",minPlayers:2,maxPlayers:2,aiSupported:!0,difficultyLevels:[1,2,3,4,5,6,7,8,9,10],isDefault:!1}),console.log("[MultiGameApp] Game registry initialized with",p.getGameCount(),"games")}loadGamePreference(){const e=localStorage.getItem("mate-current-game-type");e&&p.isRegistered(e)?this.currentGameId=e:this.currentGameId=p.getDefaultGame()}saveGamePreference(){this.currentGameId&&localStorage.setItem("mate-current-game-type",this.currentGameId)}getAvailableGames(){return p.getAllGames()}getCurrentGameInfo(){return p.getGameInfo(this.currentGameId)}switchGame(e){if(!p.isRegistered(e))return console.error(`[MultiGameApp] Game '${e}' is not registered`),!1;if(this.currentGameId===e)return console.log(`[MultiGameApp] Already playing ${e}`),!0;try{const t=p.createGameEngine(e);return this.currentGameId=e,this.gameEngine=t,this.saveGamePreference(),console.log(`[MultiGameApp] Switched to ${e}`),!0}catch(t){return console.error(`[MultiGameApp] Failed to switch to ${e}:`,t),!1}}getCurrentGameEngine(){if(!this.gameEngine&&this.currentGameId)try{this.gameEngine=p.createGameEngine(this.currentGameId)}catch(e){return console.error("[MultiGameApp] Failed to create game engine:",e),null}return this.gameEngine}startNewGame(e=null){if(e&&e!==this.currentGameId&&!this.switchGame(e))return!1;const t=this.getCurrentGameEngine();if(!t)return console.error("[MultiGameApp] No game engine available"),!1;try{return t.newGame(),console.log(`[MultiGameApp] Started new ${this.currentGameId} game`),!0}catch(s){return console.error("[MultiGameApp] Failed to start new game:",s),!1}}getGamesByCategory(e){return p.getGamesByCategory(e)}getAIGames(){return p.getAIGames()}currentGameSupportsAI(){const e=this.getCurrentGameEngine();return e?e.isAISupported():!1}getCurrentGameDifficultyLevels(){const e=this.getCurrentGameInfo();return e?e.difficultyLevels:[]}getStats(){return p.getStats()}getCurrentGameId(){return this.currentGameId}isGameAvailable(e){return p.isRegistered(e)}}typeof window<"u"&&(window.multiGameApp=new I);class U{constructor(){this.currentGame=null,this.gameContainer=null,this.gameInfo=null}init(e,t){this.currentGame=e,this.gameInfo=t,this.gameContainer=document.getElementById("game-container"),this.updateGameTitle(),this.updateGameDescription()}updateGameTitle(){const e=document.getElementById("game-title");e&&this.gameInfo&&(e.textContent=this.gameInfo.name)}updateGameDescription(){const e=document.getElementById("game-description");e&&this.gameInfo&&(e.textContent=this.gameInfo.description)}showGameSelection(e,t){let s=document.getElementById("game-selection-modal");s||(s=this.createGameSelectionModal(),document.body.appendChild(s)),this.populateGameSelection(e),s.style.display="flex",s.onclick=i=>{i.target===s&&this.hideGameSelection()},s._onSelect=t}hideGameSelection(){const e=document.getElementById("game-selection-modal");e&&(e.style.display="none")}createGameSelectionModal(){const e=document.createElement("div");return e.id="game-selection-modal",e.className="modal",e.innerHTML=`
      <div class="modal-content">
        <div class="modal-header">
          <h2>🎮 Choose a Game</h2>
          <button class="modal-close" onclick="this.closest('.modal').style.display='none'">&times;</button>
        </div>
        <div class="modal-body">
          <div id="game-selection-grid" class="game-selection-grid">
            <!-- Games will be populated here -->
          </div>
        </div>
      </div>
    `,e}populateGameSelection(e){const t=document.getElementById("game-selection-grid");t&&(t.innerHTML=e.map(s=>`
      <div class="game-card" data-game-id="${s.id}">
        <div class="game-icon">${s.icon}</div>
        <div class="game-name">${s.name}</div>
        <div class="game-description">${s.description}</div>
        <div class="game-meta">
          <span class="game-players">👥 ${s.minPlayers}-${s.maxPlayers} players</span>
          ${s.aiSupported?'<span class="game-ai">🤖 AI</span>':""}
        </div>
      </div>
    `).join(""),t.querySelectorAll(".game-card").forEach(s=>{s.addEventListener("click",()=>{const i=s.dataset.gameId,n=document.getElementById("game-selection-modal");n._onSelect&&n._onSelect(i),this.hideGameSelection()})}))}updateGameInfo(e){const t=document.getElementById("current-turn");t&&(t.textContent=e.currentTurn);const s=document.getElementById("move-count");s&&(s.textContent=e.moveHistory.length);const i=document.getElementById("game-status");i&&(i.textContent=this.formatGameStatus(e.status))}formatGameStatus(e){return{playing:"Playing",check:"Check!",checkmate:"Checkmate!",stalemate:"Stalemate",draw:"Draw"}[e]||e}showGameSettings(e){console.log("[GameUIManager] Game settings for:",e.name)}updateBoardDimensions(e){const t=document.getElementById("chess-board");if(t){const s=Math.min(400,500)/Math.max(e.rows,e.cols);t.width=e.cols*s,t.height=e.rows*s}}}class F{constructor(){this.stats=this.loadStats(),this.currentGame=null,this.gameStartTime=null,this.moveCount=0,this.captureCount=0,this.checkCount=0,this.checkmateCount=0,this.undoCount=0,this.hintCount=0}startGame(e,t,s=null,i=null){this.currentGame={gameType:e,gameMode:t,aiDifficulty:s,playerColor:i,startTime:Date.now(),endTime:null,moves:[],captures:[],checks:[],checkmates:[],undos:0,hints:0,result:null,winner:null},this.gameStartTime=Date.now(),this.moveCount=0,this.captureCount=0,this.checkCount=0,this.checkmateCount=0,this.undoCount=0,this.hintCount=0}recordMove(e,t,s,i=null,n=null){if(!this.currentGame)return;const a={from:e,to:t,piece:s,captured:i,special:n,timestamp:Date.now(),moveNumber:this.moveCount+1};this.currentGame.moves.push(a),this.moveCount++,i&&(this.captureCount++,this.currentGame.captures.push({piece:i,moveNumber:this.moveCount,timestamp:Date.now()}))}recordCheck(e,t){this.currentGame&&(this.checkCount++,this.currentGame.checks.push({kingPosition:e,checkingPiece:t,moveNumber:this.moveCount,timestamp:Date.now()}))}recordCheckmate(e,t){this.currentGame&&(this.checkmateCount++,this.currentGame.checkmates.push({kingPosition:e,matingPiece:t,moveNumber:this.moveCount,timestamp:Date.now()}))}recordUndo(){this.currentGame&&(this.undoCount++,this.currentGame.undos++)}recordHint(){this.currentGame&&(this.hintCount++,this.currentGame.hints++)}endGame(e,t=null){this.currentGame&&(this.currentGame.endTime=Date.now(),this.currentGame.result=e,this.currentGame.winner=t,this.currentGame.duration=this.currentGame.endTime-this.currentGame.startTime,this.updateOverallStats(),this.saveGameToHistory(),this.currentGame=null)}updateOverallStats(){if(!this.currentGame)return;const e=this.currentGame.gameType;this.currentGame.gameMode,this.stats.games[e]||(this.stats.games[e]={total:0,wins:0,losses:0,draws:0,totalTime:0,totalMoves:0,totalCaptures:0,totalChecks:0,totalCheckmates:0,totalUndos:0,totalHints:0,bestTime:null,worstTime:null,averageTime:0,averageMoves:0,winRate:0,streaks:{current:0,longest:0}});const t=this.stats.games[e];t.total++,t.totalTime+=this.currentGame.duration,t.totalMoves+=this.moveCount,t.totalCaptures+=this.captureCount,t.totalChecks+=this.checkCount,t.totalCheckmates+=this.checkmateCount,t.totalUndos+=this.undoCount,t.totalHints+=this.hintCount,this.currentGame.result==="win"?(t.wins++,t.streaks.current++,t.streaks.current>t.streaks.longest&&(t.streaks.longest=t.streaks.current)):this.currentGame.result==="loss"?(t.losses++,t.streaks.current=0):this.currentGame.result==="draw"&&(t.draws++,t.streaks.current=0),(t.bestTime===null||this.currentGame.duration<t.bestTime)&&(t.bestTime=this.currentGame.duration),(t.worstTime===null||this.currentGame.duration>t.worstTime)&&(t.worstTime=this.currentGame.duration),t.averageTime=t.totalTime/t.total,t.averageMoves=t.totalMoves/t.total,t.winRate=t.wins/t.total*100,this.stats.overall.totalGames++,this.stats.overall.totalTime+=this.currentGame.duration,this.stats.overall.totalMoves+=this.moveCount,this.updateDailyStats(),this.saveStats()}updateDailyStats(){const e=new Date().toDateString();this.stats.daily[e]||(this.stats.daily[e]={games:0,time:0,moves:0,wins:0,losses:0,draws:0});const t=this.stats.daily[e];t.games++,t.time+=this.currentGame.duration,t.moves+=this.moveCount,this.currentGame.result==="win"?t.wins++:this.currentGame.result==="loss"?t.losses++:this.currentGame.result==="draw"&&t.draws++}saveGameToHistory(){if(!this.currentGame)return;const e=this.loadGameHistory();e.unshift({...this.currentGame,id:Date.now().toString()}),e.length>100&&e.splice(100),localStorage.setItem("mate-game-history",JSON.stringify(e))}getCurrentGameStats(){return this.currentGame?{gameType:this.currentGame.gameType,gameMode:this.currentGame.gameMode,duration:Date.now()-this.currentGame.startTime,moves:this.moveCount,captures:this.captureCount,checks:this.checkCount,checkmates:this.checkmateCount,undos:this.undoCount,hints:this.hintCount}:null}getOverallStats(){return this.stats.overall}getGameTypeStats(e){return this.stats.games[e]||null}getDailyStats(e=7){const t=[],s=new Date;for(let i=0;i<e;i++){const n=new Date(s);n.setDate(n.getDate()-i);const a=n.toDateString();t.unshift({date:a,...this.stats.daily[a]||{games:0,time:0,moves:0,wins:0,losses:0,draws:0}})}return t}getGameHistory(e=20){return this.loadGameHistory().slice(0,e)}getAchievements(){const e=[];this.stats.overall.totalGames>=1&&e.push({id:"first-game",name:"First Game",description:"Played your first game",unlocked:!0}),this.stats.overall.totalGames>=10&&e.push({id:"ten-games",name:"Getting Started",description:"Played 10 games",unlocked:!0}),this.stats.overall.totalGames>=100&&e.push({id:"hundred-games",name:"Century",description:"Played 100 games",unlocked:!0});const t=this.stats.games.chess;return t&&t.streaks.longest>=3&&e.push({id:"win-streak-3",name:"Hot Streak",description:"Won 3 games in a row",unlocked:!0}),t&&t.streaks.longest>=10&&e.push({id:"win-streak-10",name:"Unstoppable",description:"Won 10 games in a row",unlocked:!0}),t&&t.bestTime&&t.bestTime<6e4&&e.push({id:"quick-win",name:"Lightning",description:"Won a game in under 1 minute",unlocked:!0}),e}loadStats(){const e=localStorage.getItem("mate-game-stats");return e?JSON.parse(e):{overall:{totalGames:0,totalTime:0,totalMoves:0,firstGame:null,lastGame:null},games:{},daily:{},achievements:[]}}loadGameHistory(){const e=localStorage.getItem("mate-game-history");return e?JSON.parse(e):[]}saveStats(){localStorage.setItem("mate-game-stats",JSON.stringify(this.stats))}clearStats(){this.stats={overall:{totalGames:0,totalTime:0,totalMoves:0,firstGame:null,lastGame:null},games:{},daily:{},achievements:[]},localStorage.removeItem("mate-game-stats"),localStorage.removeItem("mate-game-history")}exportStats(){return{stats:this.stats,history:this.loadGameHistory(),exportDate:new Date().toISOString()}}importStats(e){e.stats&&(this.stats=e.stats,this.saveStats()),e.history&&localStorage.setItem("mate-game-history",JSON.stringify(e.history))}}console.log("♟️ Mate starting...");class R{constructor(){console.log("Chess app initialized!"),this.canvas=document.getElementById("chess-board"),this.ctx=this.canvas.getContext("2d"),this.squareSize=this.canvas.width/8,this.engine=new b,this.engine.newGame(),this.themeManager=new E,this.soundManager=new T,this.animationManager=new D(this.canvas,this.ctx,this.squareSize),this.hapticManager=new C,this.multiGameApp=new I,this.gameUIManager=new U,this.gameStats=new F,this.aiManager=new M(this),this.learnMode=new q(this),this.replayManager=new B(this),this.shareManager=new $(this),this.selectedSquare=null,this.legalMoves=[],this.lastMove=null,this.coachSuggestion=null,this.currentTask=null,this.boardOrientation=localStorage.getItem("mate-board-orientation")||"bottom",this.showHints=localStorage.getItem("mate-show-hints"),this.showHints=this.showHints===null||this.showHints==="true",this.setupEventListeners(),this.checkForNewGame(),this.loadGameFromUrl(),this.restoreGameState(),this.render(),console.log("✅ Chess PWA ready!")}setupEventListeners(){this.canvas.addEventListener("click",this.handleBoardClick.bind(this)),this.canvas.addEventListener("touchstart",e=>{e.preventDefault(),this.handleBoardClick(e.touches[0])},{passive:!1}),this.canvas.addEventListener("touchend",e=>{e.preventDefault(),e.changedTouches.length>0&&this.handleBoardClick(e.changedTouches[0])},{passive:!1}),this.addTouchEvents("learn-btn",()=>{this.learnMode.start()}),this.addTouchEvents("coach-btn",()=>{this.toggleCoachMode()}),this.addTouchEvents("share-btn",()=>{this.shareManager.shareGame()}),this.addTouchEvents("game-select-btn",()=>{this.showGameSelection()}),this.addTouchEvents("settings-btn",()=>{this.saveGameState(),window.location.href="/settings.html"}),this.addTouchEvents("undo-btn",()=>{this.engine.undoMove()&&(this.selectedSquare=null,this.legalMoves=[],this.render(),this.showNotification("Move undone"))}),this.addTouchEvents("new-game-btn",()=>{}),this.addTouchEvents("stats-btn",()=>{})}addTouchEvents(e,t){const s=document.getElementById(e);s&&(s.addEventListener("click",t),s.addEventListener("touchstart",i=>{i.preventDefault(),t()},{passive:!1}),s.addEventListener("touchend",i=>{i.preventDefault()},{passive:!1}))}handleBoardClick(e){if(this.replayManager.isActive()){this.showNotification("Exit replay mode to make moves");return}this.boardOrientation=localStorage.getItem("mate-board-orientation")||"bottom";const t=this.canvas.getBoundingClientRect(),s=e.clientX-t.left,i=e.clientY-t.top;let n=Math.floor(s/this.squareSize),a=Math.floor(i/this.squareSize);this.boardOrientation==="top"&&(a=7-a,n=7-n),!(a<0||a>7||n<0||n>7)&&(console.log("Clicked square:",{row:a,col:n}),this.selectedSquare?this.tryMove(this.selectedSquare.row,this.selectedSquare.col,a,n):this.selectPiece(a,n))}selectPiece(e,t){const i=this.engine.getBoard().getPiece(e,t),n=this.engine.getCurrentTurn();i&&i[0]===n[0]&&(this.selectedSquare={row:e,col:t},this.soundManager.play("select"),this.hapticManager.select(),this.showHints=localStorage.getItem("mate-show-hints"),this.showHints=this.showHints===null||this.showHints==="true",this.legalMoves=this.engine.getLegalMoves(e,t),console.log("Selected piece:",i,"Legal moves:",this.legalMoves.length),this.legalMoves.length===0&&this.showHints&&(this.flashSquare(e,t),this.soundManager.play("illegal"),this.hapticManager.illegal(),this.showNotification("❌ No legal moves for this piece!")),this.render())}flashSquare(e,t){const s=this.selectedSquare;this.selectedSquare=null,this.render(),setTimeout(()=>{this.selectedSquare=s,this.render()},150)}tryMove(e,t,s,i,n=null){if(this.currentTask&&this.learnMode.active&&!this.learnMode.validateTask(e,t,s,i)){this.showNotification("❌ Try again! Follow the instructions."),this.selectedSquare=null,this.legalMoves=[],this.render();return}const a=this.engine.getBoard(),o=a.getPiece(s,i),r=a.getPiece(e,t),c=this.engine.makeMove(e,t,s,i,n);c==="promotion"?(console.log("Pawn promotion required!"),this.showPromotionDialog(e,t,s,i),this.lastMove=this.engine.getLastMove(),this.selectedSquare=null,this.legalMoves=[],this.render(),this.updateGameInfo()):c?(console.log("Move successful!"),this.currentTask&&this.learnMode.active&&(this.learnMode.taskCompleted(),this.currentTask=null),this.aiManager.recordMove(e,t,s,i,n),this.lastMove=this.engine.getLastMove(),this.selectedSquare=null,this.legalMoves=[],this.animateMove(e,t,s,i,r,o),console.log("Checking AI turn...",{enabled:this.aiManager.enabled,currentTurn:this.engine.getCurrentTurn(),aiColor:this.aiManager.aiColor,isAITurn:this.aiManager.isAITurn()}),this.aiManager.isAITurn()?(console.log("AI turn detected, triggering move..."),setTimeout(()=>{this.aiManager.makeAIMove()},1e3)):console.log("Not AI turn, skipping...")):(console.log("Illegal move"),this.soundManager.play("illegal"),this.hapticManager.illegal(),this.selectedSquare=null,this.legalMoves=[],this.render())}animateMove(e,t,s,i,n,a){a?this.animationManager.animateCapture(s,i,a,()=>{this.animationManager.animateMove(e,t,s,i,n,()=>{this.onMoveAnimationComplete(e,t,s,i,a)})}):this.animationManager.animateMove(e,t,s,i,n,()=>{this.onMoveAnimationComplete(e,t,s,i,a)})}onMoveAnimationComplete(e,t,s,i,n){this.render(),this.updateGameInfo(),this.saveGameState();const a=this.engine.getGameStatus(),o=this.lastMove&&this.lastMove.captured;if(a==="checkmate"){const r=this.engine.getCurrentTurn()==="white"?"Black":"White";this.showNotification(`Checkmate! ${r} wins!`),this.soundManager.play("checkmate"),this.hapticManager.checkmate(),this.aiManager.stopVsComputer()}else a==="check"?(this.showNotification(`${this.engine.getCurrentTurn()} is in check!`),this.soundManager.play("check"),this.hapticManager.check()):a==="stalemate"?(this.showNotification("Stalemate! Game is a draw."),this.soundManager.play("move"),this.hapticManager.move(),this.aiManager.stopVsComputer()):o?(this.soundManager.play("capture"),this.hapticManager.capture()):(this.soundManager.play("move"),this.hapticManager.move())}showGameSelection(){const e=this.multiGameApp.getAvailableGames();this.gameUIManager.showGameSelection(e,t=>{this.switchToGame(t)})}switchToGame(e){if(this.multiGameApp.switchGame(e)){const t=this.multiGameApp.getCurrentGameInfo();this.gameUIManager.init(e,t),this.multiGameApp.startNewGame(),this.updateGameInfo(),this.showNotification(`Switched to ${t.name}! 🎮`)}else this.showNotification("Failed to switch game. Please try again.")}showPromotionDialog(e,t,s,i){const n=document.getElementById("promotion-modal");n.style.display="flex",n.querySelectorAll(".promotion-btn").forEach(o=>{o.onclick=null,o.removeEventListener("click",o._promotionHandler),o.removeEventListener("touchstart",o._promotionTouchHandler);const r=()=>{const h=o.dataset.piece;this.handlePromotion(h,e,t,s,i),n.style.display="none"},c=h=>{h.preventDefault(),r()};o._promotionHandler=r,o._promotionTouchHandler=c,o.addEventListener("click",r),o.addEventListener("touchstart",c,{passive:!1})})}handlePromotion(e,t,s,i,n){this.tryMove(0,0,0,0,e),this.aiManager.recordMove(t,s,i,n,e)}showNewGameDialog(){const e=document.getElementById("new-game-modal");e.style.display="flex"}checkForNewGame(){if(localStorage.getItem("mate-new-game")==="true")if(localStorage.removeItem("mate-new-game"),localStorage.getItem("mate-ai-mode")==="true"){const s=localStorage.getItem("mate-ai-color"),i=parseInt(localStorage.getItem("mate-ai-skill")||"10");localStorage.removeItem("mate-ai-mode"),localStorage.removeItem("mate-ai-color"),localStorage.removeItem("mate-ai-skill"),this.startVsAIFromSetup(s,i)}else this.startTwoPlayerGame()}startTwoPlayerGame(){this.aiManager.stopVsComputer(),this.engine.newGame(),this.selectedSquare=null,this.legalMoves=[],this.lastMove=null;const e=this.shareManager.newGame();this.clearSavedGame(),this.render(),this.showNotification(`New 2-player game started! (Game ID: ${e})`)}async startVsAIFromSetup(e,t){this.engine.newGame(),this.shareManager.newGame(),this.selectedSquare=null,this.legalMoves=[],this.lastMove=null,this.clearSavedGame(),await this.aiManager.startVsComputer(e,t),this.render(),this.updateGameInfo(),this.showNotification(`🤖 AI game started! (Level ${t})`)}showAIDialog(){const e=document.getElementById("ai-modal");e.style.display="flex";const t=document.getElementById("ai-skill-level"),s=document.getElementById("skill-level-display");t&&s&&(t.oninput=()=>{const i=parseInt(t.value),n=M.getSkillLevelName(i),a=M.getApproxELO(i);s.textContent=`${n} (Level ${i}, ~${a} ELO)`},t.oninput())}async startVsAI(e){const t=document.getElementById("ai-skill-level"),s=t?parseInt(t.value):10,i=e==="white"?"black":"white";if(document.getElementById("ai-modal").style.display="none",this.showNotification("Loading AI engine..."),await this.aiManager.startVsComputer(i,s)){this.render();const a=M.getSkillLevelName(s);this.showNotification(`Game started! AI: ${a} (${i})`)}}async toggleCoachMode(){this.aiManager.coachAI.enabled?(this.aiManager.coachAI.disable(),this.showNotification("Coach mode disabled")):(this.showNotification("Loading chess coach..."),await this.aiManager.coachAI.enable()&&this.showNotification('🎓 Coach ready! Click "Get Hint" for help.'))}async requestHint(){this.aiManager.coachAI.enabled||await this.toggleCoachMode(),this.showNotification("Coach is analyzing...");const e=await this.aiManager.coachAI.getHint(this.aiManager.moveHistory);e?this.aiManager.coachAI.displayHint(e):this.showNotification("Unable to get hint")}async requestAnalysis(){this.aiManager.coachAI.enabled||await this.toggleCoachMode(),this.showNotification("Coach is analyzing...");const e=await this.aiManager.coachAI.analyzePosition(this.aiManager.moveHistory);e?this.aiManager.coachAI.displayHint(e):this.showNotification("Unable to analyze position")}updateGameInfo(){const e=this.engine.getCurrentTurn();document.getElementById("current-turn").textContent=`${e.charAt(0).toUpperCase()+e.slice(1)} to move`;const t=this.engine.getMoveHistory(),s=document.getElementById("move-history");s&&(s.innerHTML=t.map((i,n)=>`<div>${n+1}. ${i.notation}</div>`).join(""),s.scrollTop=s.scrollHeight)}render(){this.drawBoard(),this.drawPieces(),this.animationManager.renderAnimations((e,t,s,i)=>{this.drawPieceAt(e,t,s,i)}),this.updateGameInfo()}drawBoard(){const e=this.themeManager.getCurrentBoardTheme();for(let t=0;t<8;t++)for(let s=0;s<8;s++){let i=t,n=s;this.boardOrientation==="top"&&(i=7-t,n=7-s);const a=n*this.squareSize,o=i*this.squareSize;let c=(t+s)%2===0?e.light:e.dark;this.lastMove&&(this.lastMove.from.row===t&&this.lastMove.from.col===s||this.lastMove.to.row===t&&this.lastMove.to.col===s)&&(c=e.lastMove),this.selectedSquare&&this.selectedSquare.row===t&&this.selectedSquare.col===s&&(c=e.selected),this.showHints&&this.legalMoves.some(u=>u.row===t&&u.col===s)&&(c=e.legalMove);const l=this.engine.getBoard().getPiece(t,s),d=this.engine.getGameStatus();if(l&&l[1]==="K"&&d==="check"){const u=this.engine.getCurrentTurn();l[0]===u[0]&&(c=e.check)}this.ctx.fillStyle=c,this.ctx.fillRect(a,o,this.squareSize,this.squareSize)}this.ctx.strokeStyle=e.border,this.ctx.lineWidth=4,this.ctx.strokeRect(0,0,this.canvas.width,this.canvas.height)}drawPieces(){const e=this.engine.getBoard(),t=this.themeManager.getCurrentPieceSet(),s=t.style;this.ctx.font=`${this.squareSize*s.fontSize}px Arial`,this.ctx.textAlign="center",this.ctx.textBaseline="middle",s.glow?this.ctx.shadowBlur=8:this.ctx.shadowBlur=0;for(let i=0;i<8;i++)for(let n=0;n<8;n++){const a=e.getPiece(i,n);if(a){const o=t.pieces[a];let r=n,c=i;this.boardOrientation==="top"&&(r=7-n,c=7-i);const h=r*this.squareSize+this.squareSize/2,l=c*this.squareSize+this.squareSize/2;a[0]==="b"?(this.ctx.strokeStyle=s.blackShadow,this.ctx.fillStyle=s.blackColor,s.glow&&(this.ctx.shadowColor=s.blackColor)):(this.ctx.strokeStyle=s.whiteShadow,this.ctx.fillStyle=s.whiteColor,s.glow&&(this.ctx.shadowColor=s.whiteColor)),this.ctx.lineWidth=s.strokeWidth,this.ctx.strokeText(o,h,l),this.ctx.fillText(o,h,l)}}this.ctx.shadowBlur=0}drawPieceAt(e,t,s,i){const n=this.themeManager.getCurrentPieceSet(),a=n.style,o=i*a.fontSize;this.ctx.font=`${o}px Arial`,this.ctx.textAlign="center",this.ctx.textBaseline="middle",a.glow?this.ctx.shadowBlur=8:this.ctx.shadowBlur=0;const r=n.pieces[e];e[0]==="b"?(this.ctx.strokeStyle=a.blackShadow,this.ctx.fillStyle=a.blackColor,a.glow&&(this.ctx.shadowColor=a.blackColor)):(this.ctx.strokeStyle=a.whiteShadow,this.ctx.fillStyle=a.whiteColor,a.glow&&(this.ctx.shadowColor=a.whiteColor)),this.ctx.lineWidth=1,this.ctx.strokeText(r,t,s),this.ctx.fillText(r,t,s)}isPieceAnimating(e,t){return!1}loadGameFromUrl(){const e=window.location.pathname;if(e.startsWith("/m/")){console.log("Loading game from URL:",e);try{const t=new N,i=this.shareManager.encoder.decodeGameState(e),n=t.decodeGame(i.gameId,i.moves);if(!n.valid){console.error("Invalid game URL:",n.error),this.showNotification(`❌ Invalid game link: ${n.error}`);return}this.engine=n.engine,this.shareManager.setGameId(i.gameId),this.lastMove=this.engine.getLastMove(),this.render();const a=this.engine.getCurrentTurn(),o=a==="white"?"Black":"White";this.showNotification(`✅ Game loaded! ${o} to move (${i.moves.length} moves)`),console.log("✅ Game loaded successfully:",{gameId:i.gameId,moves:i.moves.length,turn:a})}catch(t){console.error("Failed to load game from URL:",t),this.showNotification("❌ Failed to load game from link")}}}saveGameState(){try{if(this.engine.getMoveHistory().length===0){console.log("No moves yet, skipping save");return}const e={board:this.engine.getBoard().squares,currentTurn:this.engine.getCurrentTurn(),moveHistory:this.engine.getMoveHistory(),capturedPieces:this.engine.getCapturedPieces(),gameStatus:this.engine.getGameStatus(),gameId:this.shareManager.gameId,isAIGame:this.aiManager.vsComputerActive,aiColor:this.aiManager.aiColor,aiSkillLevel:this.aiManager.skillLevel,savedAt:Date.now(),pieceMoveTracker:Array.from(this.engine.gameState.pieceMoveTracker||[])};localStorage.setItem("mate-current-game",JSON.stringify(e)),console.log("✅ Game state saved:",{moves:e.moveHistory.length,turn:e.currentTurn,gameId:e.gameId})}catch(e){console.error("❌ Failed to save game state:",e)}}restoreGameState(){try{const e=localStorage.getItem("mate-current-game");if(!e){console.log("No saved game found");return}const t=JSON.parse(e),s=7*24*60*60*1e3;if(Date.now()-t.savedAt>s){console.log("Saved game is too old, discarding"),localStorage.removeItem("mate-current-game");return}console.log("Restoring saved game:",{moves:t.moveHistory.length,turn:t.currentTurn,savedAt:new Date(t.savedAt).toLocaleString()}),this.engine.gameState.board.squares=t.board,this.engine.gameState.currentTurn=t.currentTurn,this.engine.gameState.moveHistory=t.moveHistory,this.engine.gameState.capturedPieces=t.capturedPieces,this.engine.gameState.gameStatus=t.gameStatus,this.engine.gameState.gameId=t.gameId,t.pieceMoveTracker&&(this.engine.gameState.pieceMoveTracker=new Set(t.pieceMoveTracker)),t.gameId&&this.shareManager.setGameId(t.gameId),t.isAIGame&&this.aiManager.startVsComputer(t.aiColor,t.aiSkillLevel),t.moveHistory.length>0&&(this.lastMove=t.moveHistory[t.moveHistory.length-1]),this.showNotification(`✅ Game resumed! (${t.moveHistory.length} moves)`)}catch(e){console.error("❌ Failed to restore game state:",e),localStorage.removeItem("mate-current-game")}}clearSavedGame(){localStorage.removeItem("mate-current-game"),console.log("Saved game cleared")}showNotification(e){const t=document.getElementById("game-status");t&&(t.textContent=e,setTimeout(()=>{t.textContent=""},3e3))}}document.addEventListener("DOMContentLoaded",()=>{try{window.app=new R,console.log("✅ Chess PWA ready!")}catch(m){console.error("❌ Failed to initialize Chess PWA:",m)}});
