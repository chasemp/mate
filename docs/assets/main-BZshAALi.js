import"./main-vhD-KP9M.js";import{T as b}from"./theme-manager-CdLvXRPk.js";class M{constructor(){this.board=this.initializeBoard()}initializeBoard(){return[["bR","bN","bB","bQ","bK","bB","bN","bR"],["bP","bP","bP","bP","bP","bP","bP","bP"],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],["wP","wP","wP","wP","wP","wP","wP","wP"],["wR","wN","wB","wQ","wK","wB","wN","wR"]]}getPiece(e,t){return this.isValidSquare(e,t)?this.board[e][t]:null}setPiece(e,t,i){return this.isValidSquare(e,t)?(this.board[e][t]=i,!0):!1}isEmpty(e,t){return this.getPiece(e,t)===null}isValidSquare(e,t){return e>=0&&e<8&&t>=0&&t<8}getPieceColor(e,t){const i=this.getPiece(e,t);return i?i[0]:null}getPieceType(e,t){const i=this.getPiece(e,t);return i?i[1]:null}clone(){const e=new M;return e.board=this.board.map(t=>[...t]),e}clear(){this.board=Array(8).fill(null).map(()=>Array(8).fill(null))}findKing(e){for(let t=0;t<8;t++)for(let i=0;i<8;i++)if(this.getPiece(t,i)===`${e}K`)return{row:t,col:i};return null}}class w{static getPossibleMoves(e,t,i){const s=e.getPiece(t,i);if(!s)return[];const n=s[1],o=s[0];switch(n){case"P":return this.getPawnMoves(e,t,i,o);case"N":return this.getKnightMoves(e,t,i,o);case"B":return this.getBishopMoves(e,t,i,o);case"R":return this.getRookMoves(e,t,i,o);case"Q":return this.getQueenMoves(e,t,i,o);case"K":return this.getKingMoves(e,t,i,o);default:return[]}}static getPawnMoves(e,t,i,s){const n=[],o=s==="w"?-1:1,a=s==="w"?6:1,c=t+o;if(e.isEmpty(c,i)&&(n.push({row:c,col:i,type:"move"}),t===a)){const r=t+2*o;e.isEmpty(r,i)&&n.push({row:r,col:i,type:"move"})}for(const r of[-1,1]){const h=i+r;if(e.isValidSquare(c,h)){const l=e.getPiece(c,h);l&&l[0]!==s&&n.push({row:c,col:h,type:"capture"})}}return n}static getKnightMoves(e,t,i,s){const n=[],o=[[-2,-1],[-2,1],[-1,-2],[-1,2],[1,-2],[1,2],[2,-1],[2,1]];for(const[a,c]of o){const r=t+a,h=i+c;if(e.isValidSquare(r,h)){const l=e.getPiece(r,h);(!l||l[0]!==s)&&n.push({row:r,col:h,type:l?"capture":"move"})}}return n}static getBishopMoves(e,t,i,s){return this.getSlidingMoves(e,t,i,s,[[-1,-1],[-1,1],[1,-1],[1,1]])}static getRookMoves(e,t,i,s){return this.getSlidingMoves(e,t,i,s,[[-1,0],[1,0],[0,-1],[0,1]])}static getQueenMoves(e,t,i,s){return this.getSlidingMoves(e,t,i,s,[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]])}static getKingMoves(e,t,i,s){const n=[],o=[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];for(const[c,r]of o){const h=t+c,l=i+r;if(e.isValidSquare(h,l)){const d=e.getPiece(h,l);(!d||d[0]!==s)&&n.push({row:h,col:l,type:d?"capture":"move"})}}const a=s==="w"?7:0;return t===a&&i===4&&(n.push({row:a,col:6,type:"castle-kingside"}),n.push({row:a,col:2,type:"castle-queenside"})),n}static getSlidingMoves(e,t,i,s,n){const o=[];for(const[a,c]of n){let r=t+a,h=i+c;for(;e.isValidSquare(r,h);){const l=e.getPiece(r,h);if(!l)o.push({row:r,col:h,type:"move"});else if(l[0]!==s){o.push({row:r,col:h,type:"capture"});break}else break;r+=a,h+=c}}return o}}class f{static isLegalMove(e,t,i,s,n,o){const a=e.getPiece(t,i);if(!a||a[0]!==o[0]||!e.isValidSquare(s,n)||!w.getPossibleMoves(e,t,i).some(d=>d.row===s&&d.col===n))return!1;const h=e.clone();return h.setPiece(s,n,a),h.setPiece(t,i,null),!this.isInCheck(h,o[0])}static isInCheck(e,t){const i=e.findKing(t);if(!i)return!1;const s=t==="w"?"b":"w";for(let n=0;n<8;n++)for(let o=0;o<8;o++){const a=e.getPiece(n,o);if(a&&a[0]===s&&w.getPossibleMoves(e,n,o).some(r=>r.row===i.row&&r.col===i.col))return!0}return!1}static isCheckmate(e,t){return this.isInCheck(e,t)?!this.hasLegalMoves(e,t):!1}static isStalemate(e,t){return this.isInCheck(e,t)?!1:!this.hasLegalMoves(e,t)}static hasLegalMoves(e,t){for(let i=0;i<8;i++)for(let s=0;s<8;s++){const n=e.getPiece(i,s);if(n&&n[0]===t){const o=w.getPossibleMoves(e,i,s);for(const a of o)if(this.isLegalMove(e,i,s,a.row,a.col,t))return!0}}return!1}static getLegalMoves(e,t,i,s){const n=e.getPiece(t,i);return!n||n[0]!==s[0]?[]:w.getPossibleMoves(e,t,i).filter(a=>this.isLegalMove(e,t,i,a.row,a.col,s))}}class v{static canCastle(e,t,i,s){const n=i==="w"?7:0,o=e.getPiece(n,4);if(!o||o!==`${i}K`||t.hasPieceMoved(n,4))return!1;if(s==="kingside"){const a=e.getPiece(n,7);return!(!a||a!==`${i}R`||t.hasPieceMoved(n,7)||!e.isEmpty(n,5)||!e.isEmpty(n,6)||this.isSquareAttacked(e,n,4,i)||this.isSquareAttacked(e,n,5,i)||this.isSquareAttacked(e,n,6,i))}else{const a=e.getPiece(n,0);return!(!a||a!==`${i}R`||t.hasPieceMoved(n,0)||!e.isEmpty(n,1)||!e.isEmpty(n,2)||!e.isEmpty(n,3)||this.isSquareAttacked(e,n,4,i)||this.isSquareAttacked(e,n,3,i)||this.isSquareAttacked(e,n,2,i))}}static executeCastle(e,t,i){const s=t==="w"?7:0;return i==="kingside"?(e.setPiece(s,6,`${t}K`),e.setPiece(s,4,null),e.setPiece(s,5,`${t}R`),e.setPiece(s,7,null),{type:"castle",side:"kingside",kingMove:{from:{row:s,col:4},to:{row:s,col:6}},rookMove:{from:{row:s,col:7},to:{row:s,col:5}}}):(e.setPiece(s,2,`${t}K`),e.setPiece(s,4,null),e.setPiece(s,3,`${t}R`),e.setPiece(s,0,null),{type:"castle",side:"queenside",kingMove:{from:{row:s,col:4},to:{row:s,col:2}},rookMove:{from:{row:s,col:0},to:{row:s,col:3}}})}static canEnPassant(e,t,i,s,n,o){const a=e.getPiece(i,s);if(!a||a[1]!=="P")return!1;const c=a[0];if(n!==i+(c==="w"?-1:1)||Math.abs(o-s)!==1||!e.isEmpty(n,o))return!1;const h=e.getPiece(i,o);if(!h||h[1]!=="P"||h[0]===c)return!1;const l=t.getLastMove();if(!l)return!1;const d=c==="w"?1:6,u=i;return!(l.to.row!==u||l.to.col!==o||l.from.row!==d||Math.abs(l.to.row-l.from.row)!==2)}static executeEnPassant(e,t,i,s,n){const o=e.getPiece(t,i);e.setPiece(s,n,o),e.setPiece(t,i,null);const a=e.getPiece(t,n);return e.setPiece(t,n,null),{type:"enpassant",capturedPawn:a,capturedAt:{row:t,col:n}}}static shouldPromote(e,t,i){const s=e.getPiece(t,i);if(!s||s[1]!=="P")return!1;const o=s[0]==="w"?0:7;return t===o}static executePromotion(e,t,i,s="Q"){const n=e.getPiece(t,i);if(!n)return!1;const a=`${n[0]}${s}`;return e.setPiece(t,i,a),{type:"promotion",from:n,to:a,position:{row:t,col:i}}}static isSquareAttacked(e,t,i,s){const n=s==="w"?"b":"w",a=t+(s==="w"?-1:1);for(const l of[-1,1]){const d=i+l;if(e.isValidSquare(a,d)&&e.getPiece(a,d)===`${n}P`)return!0}const c=[[-2,-1],[-2,1],[-1,-2],[-1,2],[1,-2],[1,2],[2,-1],[2,1]];for(const[l,d]of c){const u=t+l,g=i+d;if(e.isValidSquare(u,g)&&e.getPiece(u,g)===`${n}N`)return!0}for(let l=-1;l<=1;l++)for(let d=-1;d<=1;d++){if(l===0&&d===0)continue;const u=t+l,g=i+d;if(e.isValidSquare(u,g)&&e.getPiece(u,g)===`${n}K`)return!0}const r=[[-1,-1],[-1,1],[1,-1],[1,1]];for(const[l,d]of r){let u=t+l,g=i+d;for(;e.isValidSquare(u,g);){const m=e.getPiece(u,g);if(m){if(m[0]===n&&(m[1]==="B"||m[1]==="Q"))return!0;break}u+=l,g+=d}}const h=[[-1,0],[1,0],[0,-1],[0,1]];for(const[l,d]of h){let u=t+l,g=i+d;for(;e.isValidSquare(u,g);){const m=e.getPiece(u,g);if(m){if(m[0]===n&&(m[1]==="R"||m[1]==="Q"))return!0;break}u+=l,g+=d}}return!1}}class T{constructor(){this.board=new M,this.currentTurn="white",this.moveHistory=[],this.capturedPieces={white:[],black:[]},this.gameStatus="active",this.gameId=null,this.pieceMoveTracker=new Set,this.pendingPromotion=null}makeMove(e,t,i,s,n=null){if(this.pendingPromotion){if(!n)return"promotion";const d=v.executePromotion(this.board,this.pendingPromotion.row,this.pendingPromotion.col,n);return this.moveHistory[this.moveHistory.length-1].promotion=d,this.pendingPromotion=null,this.currentTurn=this.currentTurn==="white"?"black":"white",this.updateGameStatus(),!0}if(!f.isLegalMove(this.board,e,t,i,s,this.currentTurn)){const d=this.board.getPiece(e,t);if(d&&d[1]==="K"){const u=d[0];if(s===t+2&&v.canCastle(this.board,this,u,"kingside"))return this.executeCastling(u,"kingside");if(s===t-2&&v.canCastle(this.board,this,u,"queenside"))return this.executeCastling(u,"queenside")}return console.warn("Illegal move attempted:",{fromRow:e,fromCol:t,toRow:i,toCol:s}),!1}const a=this.board.getPiece(e,t),c=this.board.getPiece(i,s);let r=null;a[1]==="P"&&v.canEnPassant(this.board,this,e,t,i,s)?r=v.executeEnPassant(this.board,e,t,i,s):(this.board.setPiece(i,s,a),this.board.setPiece(e,t,null)),this.markPieceMoved(e,t);const h={from:{row:e,col:t},to:{row:i,col:s},piece:a,captured:r?r.capturedPawn:c,enPassant:r,timestamp:Date.now(),notation:this.moveToNotation(e,t,i,s,a,c||(r==null?void 0:r.capturedPawn))};this.moveHistory.push(h);const l=r?r.capturedPawn:c;if(l){const d=l[0]==="w"?"white":"black";this.capturedPieces[d].push(l)}return a[1]==="P"&&v.shouldPromote(this.board,i,s)?(this.pendingPromotion={row:i,col:s},"promotion"):(this.currentTurn=this.currentTurn==="white"?"black":"white",this.updateGameStatus(),!0)}executeCastling(e,t){const i=v.executeCastle(this.board,e,t);this.markPieceMoved(i.kingMove.from.row,i.kingMove.from.col),this.markPieceMoved(i.rookMove.from.row,i.rookMove.from.col);const s=t==="kingside"?"O-O":"O-O-O",n={from:i.kingMove.from,to:i.kingMove.to,piece:`${e}K`,captured:null,castle:i,timestamp:Date.now(),notation:s};return this.moveHistory.push(n),this.currentTurn=this.currentTurn==="white"?"black":"white",this.updateGameStatus(),!0}markPieceMoved(e,t){this.pieceMoveTracker.add(`${e},${t}`)}hasPieceMoved(e,t){return this.pieceMoveTracker.has(`${e},${t}`)}updateGameStatus(){const e=this.currentTurn[0];if(f.isCheckmate(this.board,e)){this.gameStatus="checkmate";const t=this.currentTurn==="white"?"Black":"White";console.log(`Checkmate! ${t} wins!`)}else f.isStalemate(this.board,e)?(this.gameStatus="stalemate",console.log("Stalemate! Game is a draw.")):f.isInCheck(this.board,e)?(this.gameStatus="check",console.log(`${this.currentTurn} is in check!`)):this.gameStatus="active"}moveToNotation(e,t,i,s,n,o){const a=n[1],c="abcdefgh",h=c[s]+"87654321"[i];return a==="P"?o?`${c[t]}x${h}`:h:o?`${a}x${h}`:`${a}${h}`}getLegalMoves(e,t){return f.getLegalMoves(this.board,e,t,this.currentTurn)}undoMove(){if(this.moveHistory.length===0)return!1;const e=this.moveHistory.pop();if(this.board.setPiece(e.from.row,e.from.col,e.piece),this.board.setPiece(e.to.row,e.to.col,e.captured),e.captured){const t=e.captured[0]==="w"?"white":"black";this.capturedPieces[t].pop()}return this.currentTurn=this.currentTurn==="white"?"black":"white",this.updateGameStatus(),!0}reset(){this.board=new M,this.currentTurn="white",this.moveHistory=[],this.capturedPieces={white:[],black:[]},this.gameStatus="active",this.pieceMoveTracker=new Set,this.pendingPromotion=null}getLastMove(){return this.moveHistory.length>0?this.moveHistory[this.moveHistory.length-1]:null}}class S{constructor(){this.gameState=new T}newGame(e=null){return this.gameState.reset(),e&&(this.gameState.gameId=e),this.gameState}makeMove(e,t,i,s){return this.gameState.makeMove(e,t,i,s)}getLegalMoves(e,t){return this.gameState.getLegalMoves(e,t)}undoMove(){return this.gameState.undoMove()}getBoard(){return this.gameState.board}getCurrentTurn(){return this.gameState.currentTurn}getGameStatus(){return this.gameState.gameStatus}getMoveHistory(){return this.gameState.moveHistory}getCapturedPieces(){return this.gameState.capturedPieces}getLastMove(){return this.gameState.getLastMove()}loadGameState(e){this.gameState=e}}class y{constructor(){this.worker=null,this.ready=!1,this.resolveMove=null,this.rejectMove=null,this.currentFen="",this.skillLevel=10,this.thinkingTime=1e3}async init(){this.worker&&this.quit();try{return this.worker=new Worker("/stockfish-worker.js"),this.worker.onmessage=this.handleMessage.bind(this),this.worker.onerror=e=>{console.error("❌ Stockfish Worker Error:",e),this.rejectMove&&(this.rejectMove(new Error("Stockfish worker error")),this.rejectMove=null)},new Promise((e,t)=>{const i=setTimeout(()=>{t(new Error("Stockfish initialization timeout"))},1e4),s=n=>{const o=n.data;if(o&&o.type==="ready"){clearTimeout(i),this.sendCommand("uci");const a=()=>{const c=n.data;typeof c=="string"&&c==="uciok"&&(this.ready=!0,console.log("✅ Stockfish initialized"),this.worker.removeEventListener("message",a),this.configureEngine(),e(!0))};this.worker.addEventListener("message",a)}};this.worker.addEventListener("message",s)})}catch(e){throw console.error("❌ Failed to initialize Stockfish:",e),e}}configureEngine(){this.setSkillLevel(this.skillLevel),this.sendCommand("ucinewgame")}handleMessage(e){const t=e.data;if(typeof t=="string"){if(console.log("Stockfish:",t),t.startsWith("bestmove")){const i=t.match(/bestmove ([a-h][1-8][a-h][1-8])([qrbn])?/);if(i&&this.resolveMove){const s={from:i[1].substring(0,2),to:i[1].substring(2,4),promotion:i[2]||null};this.resolveMove(s),this.resolveMove=null,this.rejectMove=null}}t==="uciok"&&(this.ready=!0)}}sendCommand(e){this.worker&&(console.log("→ Stockfish:",e),this.worker.postMessage(e))}setSkillLevel(e){this.skillLevel=Math.max(0,Math.min(20,e));const t=800+this.skillLevel*110;this.sendCommand("setoption name Skill Level value "+this.skillLevel),this.sendCommand("setoption name UCI_LimitStrength value true"),this.sendCommand("setoption name UCI_Elo value "+t)}async getBestMove(e,t=[]){if(!this.ready)throw new Error("Stockfish not ready");return new Promise((i,s)=>{if(this.resolveMove=i,this.rejectMove=s,t.length>0){const n=t.map(o=>this.moveToUCI(o)).join(" ");this.sendCommand(`position startpos moves ${n}`)}else this.sendCommand(`position fen ${e}`);this.sendCommand(`go movetime ${this.thinkingTime}`),setTimeout(()=>{this.rejectMove&&(this.rejectMove(new Error("Move calculation timeout")),this.rejectMove=null,this.resolveMove=null)},this.thinkingTime+5e3)})}moveToUCI(e){if(typeof e=="string")return e;const t=this.positionToSquare(e.from.row,e.from.col),i=this.positionToSquare(e.to.row,e.to.col),s=e.promotion?e.promotion.to[1].toLowerCase():"";return t+i+s}positionToSquare(e,t){const i=String.fromCharCode(97+t),s=8-e;return i+s}squareToPosition(e){const t=e.charCodeAt(0)-97;return{row:8-parseInt(e[1]),col:t}}stop(){this.worker&&this.sendCommand("stop")}quit(){this.worker&&(this.sendCommand("quit"),this.worker.terminate(),this.worker=null,this.ready=!1)}}class C{constructor(e){this.app=e,this.engine=null,this.enabled=!1,this.autoHint=!1,this.lastAnalysis=null}async init(){if(this.engine)return!0;try{return console.log("Initializing Coach AI..."),this.engine=new y,await this.engine.init(),this.engine.setSkillLevel(20),console.log("Coach AI ready!"),!0}catch(e){return console.error("Failed to initialize Coach AI:",e),!1}}async enable(e=!1){return await this.init()?(this.enabled=!0,this.autoHint=e,this.showCoachPanel(),!0):!1}disable(){this.enabled=!1,this.hideCoachPanel()}async getHint(e=[]){if(!this.enabled||!this.engine)return null;try{const t=await this.engine.getBestMove(null,e,2e3);if(!t)return null;const i=y.uciToCoords(t),s=this.explainMove(i,e);return this.lastAnalysis={bestMove:i,uciMove:t,explanation:s},this.lastAnalysis}catch(t){return console.error("Coach hint error:",t),null}}explainMove(e,t){const i=this.app.engine.getBoard(),s=i.getPiece(e.from.row,e.from.col),n=s?s[1]:"?",o={P:"pawn",N:"knight",B:"bishop",R:"rook",Q:"queen",K:"king"},a=o[n]||"piece",h="abcdefgh"[e.to.col]+"87654321"[e.to.row],l=[];t.length<20&&l.push(`Move your ${a} to ${h}. In the opening, focus on controlling the center and developing your pieces.`);const d=i.getPiece(e.to.row,e.to.col);if(d){const g=o[d[1]]||"piece";l.push(`This captures the opponent's ${g}!`)}n!=="P"&&t.length<20&&l.push("Good development - getting pieces into the game early is crucial.");const u=["This move strengthens your position.","Look for tactical opportunities after this move.","This improves your piece coordination.","Consider your opponent's threats after moving."];return l.length===0&&l.push(u[Math.floor(Math.random()*u.length)]),l.join(" ")}async analyzePosition(e=[]){if(!this.enabled)return null;const t=await this.getHint(e);if(!t)return null;const i=this.getGameStage(e),s=this.getStrategicAdvice(i);return{...t,stage:i,advice:s}}getGameStage(e){const t=e.length;return t<20?"opening":t<60?"middlegame":"endgame"}getStrategicAdvice(e){const t={opening:["🎯 Opening Tips: Control the center, develop knights before bishops, castle early for king safety.","📚 Opening Goals: Get your pieces out, control key squares, prepare for the middlegame.","♟️ Opening Principles: Don't move the same piece twice, develop with a threat when possible."],middlegame:["⚔️ Middlegame Strategy: Look for tactical opportunities, improve piece placement, create threats.","🎭 Middlegame Focus: Attack weak points, coordinate your pieces, consider pawn breaks.","🧩 Middlegame Plans: Improve your worst piece, target opponent weaknesses, maintain tension."],endgame:["👑 Endgame Key: Activate your king! In the endgame, the king becomes a strong piece.","⚡ Endgame Priority: Passed pawns are crucial, keep your king active, use opposition.","🏆 Endgame Technique: Push passed pawns, use your king actively, be precise with moves."]},i=t[e]||t.middlegame;return i[Math.floor(Math.random()*i.length)]}showCoachPanel(){let e=document.getElementById("coach-panel");e||(e=document.createElement("div"),e.id="coach-panel",e.className="coach-panel",e.innerHTML=`
        <div class="coach-header">
          <span class="coach-icon">🎓</span>
          <span class="coach-title">Chess Coach</span>
          <button class="coach-close" onclick="window.app.aiManager.coachAI.disable()">×</button>
        </div>
        <div class="coach-content">
          <div class="coach-hint" id="coach-hint">
            <em>Click "Get Hint" to see the best move!</em>
          </div>
          <div class="coach-advice" id="coach-advice"></div>
        </div>
        <div class="coach-actions">
          <button class="btn-primary" onclick="window.app.requestHint()">💡 Get Hint</button>
          <button class="btn-secondary" onclick="window.app.requestAnalysis()">📊 Analyze</button>
        </div>
      `,document.body.appendChild(e)),e.style.display="flex"}hideCoachPanel(){const e=document.getElementById("coach-panel");e&&(e.style.display="none")}displayHint(e){const t=document.getElementById("coach-hint"),i=document.getElementById("coach-advice");if(t&&e){const s="abcdefgh",n="87654321",o=s[e.bestMove.from.col]+n[e.bestMove.from.row],a=s[e.bestMove.to.col]+n[e.bestMove.to.row];t.innerHTML=`
        <strong>💡 Best Move:</strong> ${o} → ${a}<br>
        <em>${e.explanation}</em>
      `,this.highlightSuggestion(e.bestMove)}i&&e&&e.advice&&(i.innerHTML=`<div class="strategic-tip">${e.advice}</div>`)}highlightSuggestion(e){this.app.coachSuggestion=e,this.app.render(),setTimeout(()=>{this.app.coachSuggestion=null,this.app.render()},1e4)}clearHint(){const e=document.getElementById("coach-hint");e&&(e.innerHTML='<em>Click "Get Hint" to see the best move!</em>'),this.app.coachSuggestion=null,this.app.render()}}class k{constructor(e){this.app=e,this.engine=null,this.coachAI=null,this.enabled=!1,this.aiColor="black",this.skillLevel=10,this.thinking=!1,this.moveHistory=[],this.coachAI=new C(e)}async init(){if(this.engine)return!0;try{return console.log("Initializing Stockfish engine..."),this.engine=new y,await this.engine.init(),this.engine.setSkillLevel(this.skillLevel),console.log("Stockfish engine ready!"),!0}catch(e){return console.error("Failed to initialize AI:",e),this.app.showNotification("Failed to load AI engine"),!1}}async startVsComputer(e="black",t=10){return await this.init()?(this.enabled=!0,this.aiColor=e,this.skillLevel=t,this.moveHistory=[],this.engine.setSkillLevel(t),this.app.engine.newGame(),this.app.lastMove=null,this.app.selectedSquare=null,this.app.legalMoves=[],this.app.render(),console.log(`Starting game vs computer (AI plays ${e}, skill ${t})`),e==="white"&&setTimeout(()=>this.makeAIMove(),500),!0):!1}stopVsComputer(){this.enabled=!1,this.thinking=!1,this.moveHistory=[],this.hideThinkingIndicator()}isAITurn(){if(!this.enabled)return!1;const e=this.app.engine.getCurrentTurn();return e==="white"&&this.aiColor==="white"||e==="black"&&this.aiColor==="black"}async makeAIMove(){if(!this.enabled||this.thinking)return;const e=this.app.engine.getGameStatus();if(!(e==="checkmate"||e==="stalemate")){this.thinking=!0,this.showThinkingIndicator();try{const s=500+this.skillLevel/20*1500;console.log(`AI thinking... (${Math.round(s)}ms)`);const n=await this.engine.getBestMove(null,this.moveHistory,s);if(!n){console.error("AI failed to find a move"),this.thinking=!1,this.hideThinkingIndicator();return}console.log("AI chose move:",n);const o=y.uciToCoords(n);this.app.engine.makeMove(o.from.row,o.from.col,o.to.row,o.to.col,o.promotion)==="promotion"&&this.app.engine.makeMove(0,0,0,0,o.promotion||"Q"),this.moveHistory.push(n),this.app.lastMove=this.app.engine.getLastMove(),this.app.selectedSquare=null,this.app.legalMoves=[],this.app.render(),this.app.updateGameInfo();const c=this.app.engine.getGameStatus();if(c==="checkmate"){const r=this.app.engine.getCurrentTurn()==="white"?"Black":"White";this.app.showNotification(`Checkmate! ${r} wins!`),this.stopVsComputer()}else c==="check"?this.app.showNotification("Check!"):c==="stalemate"&&(this.app.showNotification("Stalemate! Game is a draw."),this.stopVsComputer())}catch(t){console.error("AI move error:",t),this.app.showNotification("AI error - please try again")}finally{this.thinking=!1,this.hideThinkingIndicator()}}}recordMove(e,t,i,s,n=null){if(!this.enabled)return;const o=y.coordsToUci(e,t,i,s,n);this.moveHistory.push(o),this.isAITurn()&&setTimeout(()=>this.makeAIMove(),300)}showThinkingIndicator(){let e=document.getElementById("ai-thinking");e||(e=document.createElement("div"),e.id="ai-thinking",e.className="ai-thinking",e.innerHTML=`
        <div class="thinking-content">
          <div class="thinking-spinner"></div>
          <span>AI is thinking...</span>
        </div>
      `,document.body.appendChild(e)),e.style.display="flex"}hideThinkingIndicator(){const e=document.getElementById("ai-thinking");e&&(e.style.display="none")}static getSkillLevelName(e){return e<=3?"Beginner":e<=7?"Casual":e<=12?"Intermediate":e<=16?"Advanced":"Expert"}static getApproxELO(e){return 800+e*110}}class L{constructor(e){this.app=e,this.currentLesson=0,this.active=!1,this.lessons=[{title:"Welcome to Chess!",description:"Let's learn how to play chess step by step.",setup:"empty",pieces:[],instructions:"Chess is played on an 8×8 board with 64 squares. Each player starts with 16 pieces. Click 'Next' to continue!",task:null},{title:"The Pawn ♟️",description:"Pawns are the foot soldiers of chess",setup:"custom",pieces:[{piece:"wP",row:6,col:4}],instructions:"Pawns move forward one square. On their first move, they can move two squares! Try moving this white pawn forward.",task:{type:"move_piece",from:{row:6,col:4},validMoves:[{row:5,col:4},{row:4,col:4}]}},{title:"Pawn Captures ⚔️",description:"Pawns capture diagonally",setup:"custom",pieces:[{piece:"wP",row:4,col:4},{piece:"bP",row:3,col:5}],instructions:"Pawns capture pieces diagonally, one square forward. Capture the black pawn!",task:{type:"capture",from:{row:4,col:4},target:{row:3,col:5}}},{title:"The Rook ♜",description:"Rooks move in straight lines",setup:"custom",pieces:[{piece:"wR",row:7,col:0}],instructions:"Rooks move any number of squares horizontally or vertically. Try moving the rook!",task:{type:"move_piece",from:{row:7,col:0},validMoves:[{row:7,col:3},{row:7,col:4},{row:4,col:0},{row:3,col:0}]}},{title:"The Bishop ♝",description:"Bishops move diagonally",setup:"custom",pieces:[{piece:"wB",row:7,col:2}],instructions:"Bishops move any number of squares diagonally. Move the bishop along a diagonal!",task:{type:"move_piece",from:{row:7,col:2},validMoves:[{row:5,col:4},{row:4,col:5},{row:6,col:3},{row:5,col:0}]}},{title:"The Knight ♞",description:"Knights jump in an L-shape",setup:"custom",pieces:[{piece:"wN",row:7,col:1}],instructions:"Knights move in an 'L' shape: 2 squares in one direction, then 1 square perpendicular. Knights can jump over other pieces!",task:{type:"move_piece",from:{row:7,col:1},validMoves:[{row:5,col:0},{row:5,col:2},{row:6,col:3}]}},{title:"The Queen ♛",description:"The most powerful piece",setup:"custom",pieces:[{piece:"wQ",row:4,col:4}],instructions:"The Queen combines rook and bishop powers! She can move any number of squares horizontally, vertically, or diagonally.",task:{type:"move_piece",from:{row:4,col:4},validMoves:[{row:4,col:7},{row:7,col:4},{row:1,col:1},{row:2,col:6}]}},{title:"The King ♚",description:"The most important piece",setup:"custom",pieces:[{piece:"wK",row:7,col:4}],instructions:"The King moves one square in any direction. The goal of chess is to checkmate the opponent's king! Move your king one square.",task:{type:"move_piece",from:{row:7,col:4},validMoves:[{row:7,col:3},{row:7,col:5},{row:6,col:3},{row:6,col:4},{row:6,col:5}]}},{title:"Check! ⚠️",description:"Attacking the enemy king",setup:"custom",pieces:[{piece:"wQ",row:4,col:3},{piece:"bK",row:0,col:3}],instructions:"When you attack the opponent's king, it's called 'CHECK'. The king must escape! Put the black king in check by moving your queen.",task:{type:"check",from:{row:4,col:3},target:{row:0,col:3}}},{title:"Checkmate! 🏆",description:"Winning the game",setup:"custom",pieces:[{piece:"wQ",row:7,col:3},{piece:"wR",row:1,col:0},{piece:"bK",row:0,col:0}],instructions:"Checkmate means the king is in check and cannot escape! Move the queen to deliver checkmate!",task:{type:"checkmate",from:{row:7,col:3},to:{row:0,col:1}}},{title:"Congratulations! 🎉",description:"You've learned the basics!",setup:"start",pieces:[],instructions:"You now know how all the pieces move! Ready to play a full game? Start with the AI on beginner mode to practice!",task:null}]}start(){this.currentLesson=0,this.active=!0,this.showLesson()}showLesson(){const e=this.lessons[this.currentLesson];this.setupBoard(e),this.showLessonUI(e),e.task&&this.enableTask(e.task)}setupBoard(e){const t=this.app.engine.getBoard();t.clear(),e.setup==="start"?this.app.engine.newGame():e.setup==="custom"&&e.pieces&&e.pieces.forEach(({piece:i,row:s,col:n})=>{t.setPiece(s,n,i)}),this.app.render()}showLessonUI(e){let t=document.getElementById("learn-panel");t||(t=document.createElement("div"),t.id="learn-panel",t.className="learn-panel",document.body.appendChild(t));const i=((this.currentLesson+1)/this.lessons.length*100).toFixed(0);t.innerHTML=`
      <div class="learn-header">
        <span class="learn-icon">🎓</span>
        <div class="learn-title">
          <h3>${e.title}</h3>
          <p>${e.description}</p>
        </div>
        <button class="learn-close" onclick="window.app.learnMode.exit()">×</button>
      </div>
      <div class="learn-progress">
        <div class="progress-bar">
          <div class="progress-fill" style="width: ${i}%"></div>
        </div>
        <span class="progress-text">Lesson ${this.currentLesson+1} of ${this.lessons.length}</span>
      </div>
      <div class="learn-content">
        <p class="learn-instructions">${e.instructions}</p>
      </div>
      <div class="learn-actions">
        ${this.currentLesson>0?'<button class="btn-secondary" onclick="window.app.learnMode.previousLesson()">← Previous</button>':""}
        ${e.task?"":'<button class="btn-primary" onclick="window.app.learnMode.nextLesson()">Next →</button>'}
      </div>
    `,t.style.display="flex"}enableTask(e){this.app.currentTask=e}validateTask(e,t,i,s){const n=this.app.currentTask;return!n||n.from&&(n.from.row!==e||n.from.col!==t)?!1:n.type==="move_piece"?n.validMoves.some(o=>o.row===i&&o.col===s):n.type==="capture"||n.type==="check"||n.type==="checkmate"?n.to?n.to.row===i&&n.to.col===s:n.target?n.target.row===i&&n.target.col===s:!1:!1}taskCompleted(){this.app.showNotification("✅ Great job! Moving to next lesson..."),setTimeout(()=>this.nextLesson(),1500)}nextLesson(){this.currentLesson<this.lessons.length-1?(this.currentLesson++,this.showLesson()):this.complete()}previousLesson(){this.currentLesson>0&&(this.currentLesson--,this.showLesson())}complete(){this.app.showNotification("🎉 Tutorial complete! You're ready to play!"),this.exit()}exit(){this.active=!1,this.app.currentTask=null;const e=document.getElementById("learn-panel");e&&(e.style.display="none"),this.app.engine.newGame(),this.app.render()}}class x{constructor(e){this.app=e,this.engine=e.engine,this.isReplaying=!1,this.replayIndex=0,this.autoPlayInterval=null,this.replaySpeed=1e3,this.originalMoveHistory=[],this.originalBoard=null,this.originalTurn=null,this.setupEventListeners()}setupEventListeners(){var e,t,i,s,n,o,a,c;(e=document.getElementById("replay-btn"))==null||e.addEventListener("click",()=>{this.isReplaying?this.exit():this.start()}),(t=document.getElementById("replay-start"))==null||t.addEventListener("click",()=>this.jumpToStart()),(i=document.getElementById("replay-prev"))==null||i.addEventListener("click",()=>this.prevMove()),(s=document.getElementById("replay-play"))==null||s.addEventListener("click",()=>this.autoPlay()),(n=document.getElementById("replay-pause"))==null||n.addEventListener("click",()=>this.stopAutoPlay()),(o=document.getElementById("replay-next"))==null||o.addEventListener("click",()=>this.nextMove()),(a=document.getElementById("replay-end"))==null||a.addEventListener("click",()=>this.jumpToCurrent()),(c=document.getElementById("replay-exit"))==null||c.addEventListener("click",()=>this.exit()),document.addEventListener("keydown",r=>{if(this.isReplaying)switch(r.key){case"ArrowLeft":r.preventDefault(),this.prevMove();break;case"ArrowRight":r.preventDefault(),this.nextMove();break;case" ":r.preventDefault(),this.autoPlayInterval?this.stopAutoPlay():this.autoPlay();break;case"Home":r.preventDefault(),this.jumpToStart();break;case"End":r.preventDefault(),this.jumpToCurrent();break;case"Escape":r.preventDefault(),this.exit();break}})}start(){var t;const e=this.engine.getMoveHistory();if(e.length===0){this.app.showNotification("No moves to replay!");return}this.isReplaying=!0,this.originalMoveHistory=[...e],this.originalBoard=this.engine.getBoard(),this.originalTurn=this.engine.getCurrentTurn(),this.jumpToStart(),this.showControls(),(t=document.querySelector(".footer"))==null||t.style.setProperty("display","none"),this.app.showNotification("🎬 Replay Mode - Use ← → or buttons")}exit(){var e,t;if(this.isReplaying){this.stopAutoPlay(),this.isReplaying=!1,this.engine.gameState.reset(),this.engine.gameState.moveHistory=[...this.originalMoveHistory];for(const i of this.originalMoveHistory)this.engine.makeMove(i.from.row,i.from.col,i.to.row,i.to.col,(e=i.promotion)==null?void 0:e.to[1]);this.hideControls(),(t=document.querySelector(".footer"))==null||t.style.removeProperty("display"),this.app.render(),this.app.showNotification("Exited replay mode")}}jumpToStart(){this.replayIndex=0,this.renderAtIndex(0)}jumpToCurrent(){this.replayIndex=this.originalMoveHistory.length,this.renderAtIndex(this.replayIndex)}prevMove(){this.replayIndex>0&&(this.replayIndex--,this.renderAtIndex(this.replayIndex))}nextMove(){this.replayIndex<this.originalMoveHistory.length&&(this.replayIndex++,this.renderAtIndex(this.replayIndex))}autoPlay(){this.autoPlayInterval||(document.getElementById("replay-play").style.display="none",document.getElementById("replay-pause").style.display="inline-block",this.autoPlayInterval=setInterval(()=>{this.replayIndex<this.originalMoveHistory.length?this.nextMove():this.stopAutoPlay()},this.replaySpeed))}stopAutoPlay(){this.autoPlayInterval&&(clearInterval(this.autoPlayInterval),this.autoPlayInterval=null,document.getElementById("replay-play").style.display="inline-block",document.getElementById("replay-pause").style.display="none")}renderAtIndex(e){var s;const t=new S;t.newGame();for(let n=0;n<e;n++){const o=this.originalMoveHistory[n];t.makeMove(o.from.row,o.from.col,o.to.row,o.to.col,(s=o.promotion)==null?void 0:s.to[1])}const i=this.app.engine;this.app.engine=t,e>0?this.app.lastMove=this.originalMoveHistory[e-1]:this.app.lastMove=null,this.app.render(),this.app.engine=i,this.updateReplayUI()}updateReplayUI(){const e=this.originalMoveHistory.length,t=this.replayIndex,i=document.getElementById("replay-position");i&&(i.textContent=`Move ${t} of ${e}`);const s=document.getElementById("current-move-display");if(s&&t>0){const h=this.originalMoveHistory[t-1],l=Math.floor((t-1)/2)+1,d=(t-1)%2===0?"":"...";s.textContent=`${l}${d}. ${h.notation}`}else s&&(s.textContent="Starting position");const n=document.getElementById("current-turn");if(n){const h=t%2===0?"White":"Black";n.textContent=`${h} to move`}const o=document.getElementById("replay-start"),a=document.getElementById("replay-prev"),c=document.getElementById("replay-next"),r=document.getElementById("replay-end");o&&(o.disabled=t===0),a&&(a.disabled=t===0),c&&(c.disabled=t===e),r&&(r.disabled=t===e)}showControls(){const e=document.getElementById("replay-controls");e&&(e.style.display="flex");const t=document.getElementById("replay-btn");t&&(t.textContent="✖️ Exit Replay",t.classList.add("active"))}hideControls(){const e=document.getElementById("replay-controls");e&&(e.style.display="none");const t=document.getElementById("replay-btn");t&&(t.textContent="🎬 Replay",t.classList.remove("active"))}isActive(){return this.isReplaying}setSpeed(e){this.replaySpeed=e,this.autoPlayInterval&&(this.stopAutoPlay(),this.autoPlay())}}class E{constructor(){this.base36Chars="0123456789abcdefghijklmnopqrstuvwxyz"}generateGameId(){const e=Date.now()%1679616;return this.toBase36(e,4)}toBase36(e,t=1){let i="",s=e;do i=this.base36Chars[s%36]+i,s=Math.floor(s/36);while(s>0);for(;i.length<t;)i="0"+i;return i}fromBase36(e){let t=0;for(let i=0;i<e.length;i++){const s=this.base36Chars.indexOf(e[i].toLowerCase());if(s===-1)throw new Error("Invalid base36 character");t=t*36+s}return t}encodeMove(e){if(e.castle)return e.castle==="kingside"||e.notation==="O-O"?"O-O":"O-O-O";if(e.notation)return e.notation;const t=this.positionToSquare(e.from.row,e.from.col),i=this.positionToSquare(e.to.row,e.to.col),s=e.piece[1],n=e.captured?"x":"";return s==="P"?n?t[0]+n+i:i:s+n+i}decodeMove(e,t,i){if(e==="O-O"||e==="O-O-O"){const u=i==="white"?7:0;return{type:"castle",side:e==="O-O"?"kingside":"queenside",from:{row:u,col:4},to:{row:u,col:e==="O-O"?6:2}}}const s=i[0];let n="P",o="",a=null,c=null,r=null;const h=e.match(/([a-h][18])=?([QRBN])/);if(h)o=h[1],r=h[2],n="P";else{const u=e.match(/^([KQRBN])?([a-h])?([1-8])?(x)?([a-h][1-8])$/);u?(n=u[1]||"P",a=u[2],c=u[3],o=u[5]):o=e}const l=this.squareToPosition(o);return{from:this.findPieceForMove(t,s+n,l,a,c),to:l,piece:s+n,promotion:r}}findPieceForMove(e,t,i,s,n){for(let o=0;o<8;o++)for(let a=0;a<8;a++)if(e.getPiece(o,a)===t&&!(s&&String.fromCharCode(97+a)!==s)&&!(n&&(8-o).toString()!==n))return{row:o,col:a};throw new Error(`Cannot find ${t} that can move to target`)}positionToSquare(e,t){const i=String.fromCharCode(97+t),s=8-e;return i+s}squareToPosition(e){const t=e.charCodeAt(0)-97;return{row:8-parseInt(e[1]),col:t}}encodeGameState(e,t=null){t||(t=this.generateGameId());const i=e.map(n=>this.encodeMove(n)).join("-");return`${window.location.origin}/m/${t}-${i}`}decodeGameState(e){let t=e;e.includes("://")&&(t=new URL(e).pathname);const i=t.match(/\/m\/([a-z0-9]{4})(?:-(.+))?$/);if(!i)throw new Error("Invalid game URL format");const s=i[1],n=i[2]||"",o=n?n.split("-"):[];return{gameId:s,moves:o}}createShareMessage(e,t){return`♟️ Your turn! ${t==="white"?"Black":"White"} to move.

Play here: ${e}`}estimateUrlLength(e){return 26+e*4}}class B{constructor(e){this.app=e,this.encoder=new E,this.currentGameId=null}async shareGame(){const e=this.app.engine.getMoveHistory();if(e.length===0)return this.app.showNotification("No moves to share yet!"),!1;this.currentGameId||(this.currentGameId=this.encoder.generateGameId(),this.saveGameId());const t=this.encoder.encodeGameState(e,this.currentGameId),i=this.app.engine.getCurrentTurn(),s=this.encoder.createShareMessage(t,i);if(this.canUseWebShare())try{return await navigator.share({title:"Mate - Your Turn!",text:s,url:t}),this.app.showNotification("✅ Game shared!"),!0}catch(n){if(n.name!=="AbortError")console.error("Share failed:",n);else return!1}return await this.copyToClipboard(t,s)}async copyToClipboard(e,t=null){const i=t||e;try{return navigator.clipboard&&navigator.clipboard.writeText?(await navigator.clipboard.writeText(i),this.app.showNotification("🔗 Link copied! Share it with your friend."),this.showShareOptionsDialog(e),!0):this.fallbackCopy(i)}catch(s){return console.error("Clipboard failed:",s),this.fallbackCopy(i)}}fallbackCopy(e){const t=document.createElement("textarea");t.value=e,t.style.position="fixed",t.style.opacity="0",t.style.pointerEvents="none",document.body.appendChild(t);try{t.select(),t.setSelectionRange(0,t.value.length);const i=document.execCommand("copy");return document.body.removeChild(t),i?(this.app.showNotification("🔗 Link copied to clipboard!"),!0):(this.app.showNotification("❌ Failed to copy link"),!1)}catch{return document.body.removeChild(t),this.app.showNotification("❌ Failed to copy link"),!1}}showShareOptionsDialog(e){const t=document.createElement("div");t.className="share-dialog",t.innerHTML=`
      <div class="share-dialog-content">
        <h3>Share via:</h3>
        <div class="share-options">
          <a href="sms:?body=${encodeURIComponent(e)}" class="share-btn sms">
            <span class="share-icon">📱</span>
            <span>SMS</span>
          </a>
          <a href="https://wa.me/?text=${encodeURIComponent(e)}" target="_blank" class="share-btn whatsapp">
            <span class="share-icon">💬</span>
            <span>WhatsApp</span>
          </a>
          <button class="share-btn copy" onclick="navigator.clipboard.writeText('${e}')">
            <span class="share-icon">📋</span>
            <span>Copy Again</span>
          </button>
        </div>
        <input type="text" readonly value="${e}" class="share-url-input" onclick="this.select()">
        <button class="btn-secondary" onclick="this.closest('.share-dialog').remove()">Close</button>
      </div>
    `,t.style.cssText=`
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 5000;
    `,document.body.appendChild(t),t.addEventListener("click",i=>{i.target===t&&t.remove()}),setTimeout(()=>{t.parentNode&&t.remove()},3e4)}canUseWebShare(){return navigator.share&&navigator.canShare}generateShareText(e){const i=this.app.engine.getCurrentTurn()==="white"?"Black":"White",s=this.app.engine.getMoveHistory().length;return`♟️ Mate - Your Turn!

${i} to move (Move ${s+1})

${e}`}saveGameId(){this.currentGameId&&localStorage.setItem("mate-current-game-id",this.currentGameId)}loadGameId(){return this.currentGameId=localStorage.getItem("mate-current-game-id"),this.currentGameId}newGame(){return this.currentGameId=this.encoder.generateGameId(),this.saveGameId(),this.currentGameId}getGameId(){return this.currentGameId||(this.currentGameId=this.loadGameId()||this.encoder.generateGameId(),this.saveGameId()),this.currentGameId}setGameId(e){this.currentGameId=e,this.saveGameId()}getShareUrl(){const e=this.app.engine.getMoveHistory(),t=this.getGameId();return this.encoder.encodeGameState(e,t)}estimateUrlLength(){const e=this.app.engine.getMoveHistory().length;return this.encoder.estimateUrlLength(e)}}class G{constructor(){this.engine=new S}decodeGame(e,t){try{this.engine.newGame();for(let i=0;i<t.length;i++){const s=t[i];if(s==="O-O"||s==="O-O-O"){if(!this.applyCastling(s))return{valid:!1,error:`Invalid castling at move ${i+1}: ${s}`,engine:null};continue}if(!this.applyMoveFromNotation(s))return{valid:!1,error:`Invalid move at position ${i+1}: ${s}`,engine:null}}return{valid:!0,engine:this.engine,gameId:e,moveCount:t.length,error:null}}catch(i){return{valid:!1,error:i.message,engine:null}}}applyCastling(e){const i=this.engine.getCurrentTurn()==="white"?7:0,s=e==="O-O"?"kingside":"queenside";return this.engine.makeMove(i,4,i,s==="kingside"?6:2)}applyMoveFromNotation(e){const t=this.engine.getCurrentTurn(),i=this.engine.getBoard(),s=t[0],n=e.match(/([a-h][18])=?([QRBN])/);if(n){const u=n[1],g=n[2],m=this.squareToPosition(u),I=u.charCodeAt(0)-97,P=t==="white"?1:6;return this.engine.makeMove(P,I,m.row,m.col,g)}let o="P",a="",c=null,r=null;const h=e.match(/^([a-h])x([a-h][1-8])$/);if(h)o="P",c=h[1],a=h[2];else{const u=e.match(/^([KQRBN])?([a-h])?([1-8])?(x)?([a-h][1-8])$/);if(u)o=u[1]||"P",c=u[2],r=u[3],u[4],a=u[5];else if(e.match(/^[a-h][1-8]$/))a=e,o="P";else return console.error("Cannot parse notation:",e),!1}const l=this.squareToPosition(a),d=this.findPieceForMove(i,s+o,l,c,r,t);return d?this.engine.makeMove(d.row,d.col,l.row,l.col):(console.error("Cannot find piece for move:",e),!1)}findPieceForMove(e,t,i,s,n,o){const a=[];for(let c=0;c<8;c++)for(let r=0;r<8;r++){if(e.getPiece(c,r)!==t||s&&String.fromCharCode(97+r)!==s||n&&(8-c).toString()!==n)continue;this.engine.getLegalMoves(c,r).some(u=>u.row===i.row&&u.col===i.col)&&a.push({row:c,col:r})}return a.length===0?null:(a.length===1||console.warn("Multiple candidates for move, using first:",a),a[0])}squareToPosition(e){const t=e.charCodeAt(0)-97;return{row:8-parseInt(e[1]),col:t}}static isValidGameUrl(e){return/\/m\/[a-z0-9]{4}(?:-[a-zA-Z0-9\-]+)?$/.test(e)}static getGameInfo(e){const t=e.match(/\/m\/([a-z0-9]{4})(?:-(.+))?$/);if(!t)return null;const i=t[1],s=t[2]||"",n=s?s.split("-"):[];return{gameId:i,moveCount:n.length,lastMove:n[n.length-1]||null}}}console.log("♟️ Mate starting...");class q{constructor(){console.log("Chess app initialized!"),this.canvas=document.getElementById("chess-board"),this.ctx=this.canvas.getContext("2d"),this.squareSize=this.canvas.width/8,this.engine=new S,this.engine.newGame(),this.themeManager=new b,this.aiManager=new k(this),this.learnMode=new L(this),this.replayManager=new x(this),this.shareManager=new B(this),this.selectedSquare=null,this.legalMoves=[],this.lastMove=null,this.coachSuggestion=null,this.currentTask=null,this.boardOrientation=localStorage.getItem("mate-board-orientation")||"bottom",this.showHints=localStorage.getItem("mate-show-hints"),this.showHints=this.showHints===null||this.showHints==="true",this.setupEventListeners(),this.checkForNewGame(),this.loadGameFromUrl(),this.restoreGameState(),this.render(),console.log("✅ Chess PWA ready!")}setupEventListeners(){var e,t,i,s,n;this.canvas.addEventListener("click",this.handleBoardClick.bind(this)),this.canvas.addEventListener("touchstart",o=>{o.preventDefault(),this.handleBoardClick(o.touches[0])},{passive:!1}),(e=document.getElementById("learn-btn"))==null||e.addEventListener("click",()=>{this.learnMode.start()}),(t=document.getElementById("coach-btn"))==null||t.addEventListener("click",()=>{this.toggleCoachMode()}),(i=document.getElementById("share-btn"))==null||i.addEventListener("click",()=>{this.shareManager.shareGame()}),(s=document.getElementById("settings-btn"))==null||s.addEventListener("click",()=>{this.saveGameState(),window.location.href="/settings.html"}),(n=document.getElementById("undo-btn"))==null||n.addEventListener("click",()=>{this.engine.undoMove()&&(this.selectedSquare=null,this.legalMoves=[],this.render(),this.showNotification("Move undone"))})}handleBoardClick(e){if(this.replayManager.isActive()){this.showNotification("Exit replay mode to make moves");return}this.boardOrientation=localStorage.getItem("mate-board-orientation")||"bottom";const t=this.canvas.getBoundingClientRect(),i=e.clientX-t.left,s=e.clientY-t.top;let n=Math.floor(i/this.squareSize),o=Math.floor(s/this.squareSize);this.boardOrientation==="top"&&(o=7-o,n=7-n),!(o<0||o>7||n<0||n>7)&&(console.log("Clicked square:",{row:o,col:n}),this.selectedSquare?this.tryMove(this.selectedSquare.row,this.selectedSquare.col,o,n):this.selectPiece(o,n))}selectPiece(e,t){const s=this.engine.getBoard().getPiece(e,t),n=this.engine.getCurrentTurn();s&&s[0]===n[0]&&(this.selectedSquare={row:e,col:t},this.showHints=localStorage.getItem("mate-show-hints"),this.showHints=this.showHints===null||this.showHints==="true",this.legalMoves=this.engine.getLegalMoves(e,t),console.log("Selected piece:",s,"Legal moves:",this.legalMoves.length),this.legalMoves.length===0&&this.showHints&&(this.flashSquare(e,t),this.showNotification("❌ No legal moves for this piece!")),this.render())}flashSquare(e,t){const i=this.selectedSquare;this.selectedSquare=null,this.render(),setTimeout(()=>{this.selectedSquare=i,this.render()},150)}tryMove(e,t,i,s,n=null){if(this.currentTask&&this.learnMode.active&&!this.learnMode.validateTask(e,t,i,s)){this.showNotification("❌ Try again! Follow the instructions."),this.selectedSquare=null,this.legalMoves=[],this.render();return}const o=this.engine.makeMove(e,t,i,s,n);if(o==="promotion")console.log("Pawn promotion required!"),this.showPromotionDialog(e,t,i,s),this.lastMove=this.engine.getLastMove(),this.selectedSquare=null,this.legalMoves=[],this.render(),this.updateGameInfo();else if(o){console.log("Move successful!"),this.currentTask&&this.learnMode.active&&(this.learnMode.taskCompleted(),this.currentTask=null),this.aiManager.recordMove(e,t,i,s,n),this.lastMove=this.engine.getLastMove(),this.selectedSquare=null,this.legalMoves=[],this.render(),this.updateGameInfo(),this.saveGameState();const a=this.engine.getGameStatus();if(a==="checkmate"){const c=this.engine.getCurrentTurn()==="white"?"Black":"White";this.showNotification(`Checkmate! ${c} wins!`),this.aiManager.stopVsComputer()}else a==="check"?this.showNotification(`${this.engine.getCurrentTurn()} is in check!`):a==="stalemate"&&(this.showNotification("Stalemate! Game is a draw."),this.aiManager.stopVsComputer())}else console.log("Illegal move"),this.selectedSquare=null,this.legalMoves=[],this.render()}showPromotionDialog(e,t,i,s){const n=document.getElementById("promotion-modal");n.style.display="flex",n.querySelectorAll(".promotion-btn").forEach(a=>{a.onclick=()=>{const c=a.dataset.piece;this.handlePromotion(c,e,t,i,s),n.style.display="none"}})}handlePromotion(e,t,i,s,n){this.tryMove(0,0,0,0,e),this.aiManager.recordMove(t,i,s,n,e)}showNewGameDialog(){const e=document.getElementById("new-game-modal");e.style.display="flex"}checkForNewGame(){if(localStorage.getItem("mate-new-game")==="true")if(localStorage.removeItem("mate-new-game"),localStorage.getItem("mate-ai-mode")==="true"){const i=localStorage.getItem("mate-ai-color"),s=parseInt(localStorage.getItem("mate-ai-skill")||"10");localStorage.removeItem("mate-ai-mode"),localStorage.removeItem("mate-ai-color"),localStorage.removeItem("mate-ai-skill"),this.startVsAIFromSetup(i,s)}else this.startTwoPlayerGame()}startTwoPlayerGame(){this.aiManager.stopVsComputer(),this.engine.newGame(),this.selectedSquare=null,this.legalMoves=[],this.lastMove=null;const e=this.shareManager.newGame();this.clearSavedGame(),this.render(),this.showNotification(`New 2-player game started! (Game ID: ${e})`)}async startVsAIFromSetup(e,t){this.engine.newGame(),this.shareManager.newGame(),this.selectedSquare=null,this.legalMoves=[],this.lastMove=null,this.clearSavedGame(),await this.aiManager.startAIGame(e,t),this.render(),this.updateGameInfo(),this.showNotification(`🤖 AI game started! (Level ${t})`)}showAIDialog(){const e=document.getElementById("ai-modal");e.style.display="flex";const t=document.getElementById("ai-skill-level"),i=document.getElementById("skill-level-display");t&&i&&(t.oninput=()=>{const s=parseInt(t.value),n=k.getSkillLevelName(s),o=k.getApproxELO(s);i.textContent=`${n} (Level ${s}, ~${o} ELO)`},t.oninput())}async startVsAI(e){const t=document.getElementById("ai-skill-level"),i=t?parseInt(t.value):10,s=e==="white"?"black":"white";if(document.getElementById("ai-modal").style.display="none",this.showNotification("Loading AI engine..."),await this.aiManager.startVsComputer(s,i)){this.render();const o=k.getSkillLevelName(i);this.showNotification(`Game started! AI: ${o} (${s})`)}}async toggleCoachMode(){this.aiManager.coachAI.enabled?(this.aiManager.coachAI.disable(),this.showNotification("Coach mode disabled")):(this.showNotification("Loading chess coach..."),await this.aiManager.coachAI.enable()&&this.showNotification('🎓 Coach ready! Click "Get Hint" for help.'))}async requestHint(){this.aiManager.coachAI.enabled||await this.toggleCoachMode(),this.showNotification("Coach is analyzing...");const e=await this.aiManager.coachAI.getHint(this.aiManager.moveHistory);e?this.aiManager.coachAI.displayHint(e):this.showNotification("Unable to get hint")}async requestAnalysis(){this.aiManager.coachAI.enabled||await this.toggleCoachMode(),this.showNotification("Coach is analyzing...");const e=await this.aiManager.coachAI.analyzePosition(this.aiManager.moveHistory);e?this.aiManager.coachAI.displayHint(e):this.showNotification("Unable to analyze position")}updateGameInfo(){const e=this.engine.getCurrentTurn();document.getElementById("current-turn").textContent=`${e.charAt(0).toUpperCase()+e.slice(1)} to move`;const t=this.engine.getMoveHistory(),i=document.getElementById("move-history");i&&(i.innerHTML=t.map((s,n)=>`<div>${n+1}. ${s.notation}</div>`).join(""),i.scrollTop=i.scrollHeight)}render(){this.drawBoard(),this.drawPieces(),this.updateGameInfo()}drawBoard(){const e=this.themeManager.getCurrentBoardTheme();for(let t=0;t<8;t++)for(let i=0;i<8;i++){let s=t,n=i;this.boardOrientation==="top"&&(s=7-t,n=7-i);const o=n*this.squareSize,a=s*this.squareSize;let r=(t+i)%2===0?e.light:e.dark;this.lastMove&&(this.lastMove.from.row===t&&this.lastMove.from.col===i||this.lastMove.to.row===t&&this.lastMove.to.col===i)&&(r=e.lastMove),this.selectedSquare&&this.selectedSquare.row===t&&this.selectedSquare.col===i&&(r=e.selected),this.showHints&&this.legalMoves.some(u=>u.row===t&&u.col===i)&&(r=e.legalMove);const l=this.engine.getBoard().getPiece(t,i),d=this.engine.getGameStatus();if(l&&l[1]==="K"&&d==="check"){const u=this.engine.getCurrentTurn();l[0]===u[0]&&(r=e.check)}this.ctx.fillStyle=r,this.ctx.fillRect(o,a,this.squareSize,this.squareSize)}this.ctx.strokeStyle=e.border,this.ctx.lineWidth=4,this.ctx.strokeRect(0,0,this.canvas.width,this.canvas.height)}drawPieces(){const e=this.engine.getBoard(),t=this.themeManager.getCurrentPieceSet(),i=t.style;this.ctx.font=`${this.squareSize*i.fontSize}px Arial`,this.ctx.textAlign="center",this.ctx.textBaseline="middle",i.glow?this.ctx.shadowBlur=8:this.ctx.shadowBlur=0;for(let s=0;s<8;s++)for(let n=0;n<8;n++){const o=e.getPiece(s,n);if(o){const a=t.pieces[o];let c=n,r=s;this.boardOrientation==="top"&&(c=7-n,r=7-s);const h=c*this.squareSize+this.squareSize/2,l=r*this.squareSize+this.squareSize/2;o[0]==="b"?(this.ctx.strokeStyle=i.blackShadow,this.ctx.fillStyle=i.blackColor,i.glow&&(this.ctx.shadowColor=i.blackColor)):(this.ctx.strokeStyle=i.whiteShadow,this.ctx.fillStyle=i.whiteColor,i.glow&&(this.ctx.shadowColor=i.whiteColor)),this.ctx.lineWidth=i.strokeWidth,this.ctx.strokeText(a,h,l),this.ctx.fillText(a,h,l)}}this.ctx.shadowBlur=0}loadGameFromUrl(){const e=window.location.pathname;if(e.startsWith("/m/")){console.log("Loading game from URL:",e);try{const t=new G,s=this.shareManager.encoder.decodeGameState(e),n=t.decodeGame(s.gameId,s.moves);if(!n.valid){console.error("Invalid game URL:",n.error),this.showNotification(`❌ Invalid game link: ${n.error}`);return}this.engine=n.engine,this.shareManager.setGameId(s.gameId),this.lastMove=this.engine.getLastMove(),this.render();const o=this.engine.getCurrentTurn(),a=o==="white"?"Black":"White";this.showNotification(`✅ Game loaded! ${a} to move (${s.moves.length} moves)`),console.log("✅ Game loaded successfully:",{gameId:s.gameId,moves:s.moves.length,turn:o})}catch(t){console.error("Failed to load game from URL:",t),this.showNotification("❌ Failed to load game from link")}}}saveGameState(){try{if(this.engine.getMoveHistory().length===0){console.log("No moves yet, skipping save");return}const e={board:this.engine.getBoard().squares,currentTurn:this.engine.getCurrentTurn(),moveHistory:this.engine.getMoveHistory(),capturedPieces:this.engine.getCapturedPieces(),gameStatus:this.engine.getGameStatus(),gameId:this.shareManager.gameId,isAIGame:this.aiManager.vsComputerActive,aiColor:this.aiManager.aiColor,aiSkillLevel:this.aiManager.skillLevel,savedAt:Date.now(),pieceMoveTracker:Array.from(this.engine.gameState.pieceMoveTracker||[])};localStorage.setItem("mate-current-game",JSON.stringify(e)),console.log("✅ Game state saved:",{moves:e.moveHistory.length,turn:e.currentTurn,gameId:e.gameId})}catch(e){console.error("❌ Failed to save game state:",e)}}restoreGameState(){try{const e=localStorage.getItem("mate-current-game");if(!e){console.log("No saved game found");return}const t=JSON.parse(e),i=7*24*60*60*1e3;if(Date.now()-t.savedAt>i){console.log("Saved game is too old, discarding"),localStorage.removeItem("mate-current-game");return}console.log("Restoring saved game:",{moves:t.moveHistory.length,turn:t.currentTurn,savedAt:new Date(t.savedAt).toLocaleString()}),this.engine.gameState.board.squares=t.board,this.engine.gameState.currentTurn=t.currentTurn,this.engine.gameState.moveHistory=t.moveHistory,this.engine.gameState.capturedPieces=t.capturedPieces,this.engine.gameState.gameStatus=t.gameStatus,this.engine.gameState.gameId=t.gameId,t.pieceMoveTracker&&(this.engine.gameState.pieceMoveTracker=new Set(t.pieceMoveTracker)),t.gameId&&this.shareManager.setGameId(t.gameId),t.isAIGame&&this.aiManager.startAIGame(t.aiColor,t.aiSkillLevel),t.moveHistory.length>0&&(this.lastMove=t.moveHistory[t.moveHistory.length-1]),this.showNotification(`✅ Game resumed! (${t.moveHistory.length} moves)`)}catch(e){console.error("❌ Failed to restore game state:",e),localStorage.removeItem("mate-current-game")}}clearSavedGame(){localStorage.removeItem("mate-current-game"),console.log("Saved game cleared")}showNotification(e){const t=document.getElementById("game-status");t&&(t.textContent=e,setTimeout(()=>{t.textContent=""},3e3))}}document.addEventListener("DOMContentLoaded",()=>{try{window.app=new q,console.log("✅ Chess PWA ready!")}catch(p){console.error("❌ Failed to initialize Chess PWA:",p)}});
