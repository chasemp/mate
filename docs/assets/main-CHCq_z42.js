import"./main-Dk7HipaO.js";import{C as f,M as I}from"./multi-game-app-CoV4zca3.js";import{T as b}from"./theme-manager-CdLvXRPk.js";class g{constructor(){this.worker=null,this.ready=!1,this.resolveMove=null,this.rejectMove=null,this.currentFen="",this.skillLevel=10,this.thinkingTime=1e3}async init(){this.worker&&this.quit();try{return this.worker=new Worker("/stockfish-worker.js"),this.worker.onmessage=this.handleMessage.bind(this),this.worker.onerror=e=>{console.error("❌ Stockfish Worker Error:",e),this.rejectMove&&(this.rejectMove(new Error("Stockfish worker error")),this.rejectMove=null)},new Promise((e,t)=>{const i=setTimeout(()=>{t(new Error("Stockfish initialization timeout"))},1e4),s=n=>{const a=n.data;if(a&&a.type==="ready"){clearTimeout(i),this.sendCommand("uci");const o=()=>{const r=n.data;typeof r=="string"&&r==="uciok"&&(this.ready=!0,console.log("✅ Stockfish initialized"),this.worker.removeEventListener("message",o),this.configureEngine(),e(!0))};this.worker.addEventListener("message",o)}};this.worker.addEventListener("message",s)})}catch(e){throw console.error("❌ Failed to initialize Stockfish:",e),e}}configureEngine(){this.setSkillLevel(this.skillLevel),this.sendCommand("ucinewgame")}handleMessage(e){const t=e.data;if(typeof t=="string"){if(console.log("Stockfish:",t),t.startsWith("bestmove")){const i=t.match(/bestmove ([a-h][1-8][a-h][1-8])([qrbn])?/);if(i&&this.resolveMove){const s={from:i[1].substring(0,2),to:i[1].substring(2,4),promotion:i[2]||null};this.resolveMove(s),this.resolveMove=null,this.rejectMove=null}}t==="uciok"&&(this.ready=!0)}}sendCommand(e){this.worker&&(console.log("→ Stockfish:",e),this.worker.postMessage(e))}setSkillLevel(e){this.skillLevel=Math.max(0,Math.min(20,e));const t=800+this.skillLevel*110;this.sendCommand("setoption name Skill Level value "+this.skillLevel),this.sendCommand("setoption name UCI_LimitStrength value true"),this.sendCommand("setoption name UCI_Elo value "+t)}async getBestMove(e,t=[]){if(!this.ready)throw new Error("Stockfish not ready");return new Promise((i,s)=>{if(this.resolveMove=i,this.rejectMove=s,t.length>0){const n=t.map(a=>this.moveToUCI(a)).join(" ");this.sendCommand(`position startpos moves ${n}`)}else this.sendCommand(`position fen ${e}`);this.sendCommand(`go movetime ${this.thinkingTime}`),setTimeout(()=>{this.rejectMove&&(this.rejectMove(new Error("Move calculation timeout")),this.rejectMove=null,this.resolveMove=null)},this.thinkingTime+5e3)})}moveToUCI(e){if(typeof e=="string")return e;const t=this.positionToSquare(e.from.row,e.from.col),i=this.positionToSquare(e.to.row,e.to.col),s=e.promotion?e.promotion.to[1].toLowerCase():"";return t+i+s}positionToSquare(e,t){const i=String.fromCharCode(97+t),s=8-e;return i+s}squareToPosition(e){const t=e.charCodeAt(0)-97;return{row:8-parseInt(e[1]),col:t}}stop(){this.worker&&this.sendCommand("stop")}quit(){this.worker&&(this.sendCommand("quit"),this.worker.terminate(),this.worker=null,this.ready=!1)}}class C{constructor(e){this.app=e,this.engine=null,this.enabled=!1,this.autoHint=!1,this.lastAnalysis=null}async init(){if(this.engine)return!0;try{return console.log("Initializing Coach AI..."),this.engine=new g,await this.engine.init(),this.engine.setSkillLevel(20),console.log("Coach AI ready!"),!0}catch(e){return console.error("Failed to initialize Coach AI:",e),!1}}async enable(e=!1){return await this.init()?(this.enabled=!0,this.autoHint=e,this.showCoachPanel(),!0):!1}disable(){this.enabled=!1,this.hideCoachPanel()}async getHint(e=[]){if(!this.enabled||!this.engine)return null;try{const t=await this.engine.getBestMove(null,e,2e3);if(!t)return null;const i=g.uciToCoords(t),s=this.explainMove(i,e);return this.lastAnalysis={bestMove:i,uciMove:t,explanation:s},this.lastAnalysis}catch(t){return console.error("Coach hint error:",t),null}}explainMove(e,t){const i=this.app.engine.getBoard(),s=i.getPiece(e.from.row,e.from.col),n=s?s[1]:"?",a={P:"pawn",N:"knight",B:"bishop",R:"rook",Q:"queen",K:"king"},o=a[n]||"piece",u="abcdefgh"[e.to.col]+"87654321"[e.to.row],h=[];t.length<20&&h.push(`Move your ${o} to ${u}. In the opening, focus on controlling the center and developing your pieces.`);const m=i.getPiece(e.to.row,e.to.col);if(m){const p=a[m[1]]||"piece";h.push(`This captures the opponent's ${p}!`)}n!=="P"&&t.length<20&&h.push("Good development - getting pieces into the game early is crucial.");const c=["This move strengthens your position.","Look for tactical opportunities after this move.","This improves your piece coordination.","Consider your opponent's threats after moving."];return h.length===0&&h.push(c[Math.floor(Math.random()*c.length)]),h.join(" ")}async analyzePosition(e=[]){if(!this.enabled)return null;const t=await this.getHint(e);if(!t)return null;const i=this.getGameStage(e),s=this.getStrategicAdvice(i);return{...t,stage:i,advice:s}}getGameStage(e){const t=e.length;return t<20?"opening":t<60?"middlegame":"endgame"}getStrategicAdvice(e){const t={opening:["🎯 Opening Tips: Control the center, develop knights before bishops, castle early for king safety.","📚 Opening Goals: Get your pieces out, control key squares, prepare for the middlegame.","♟️ Opening Principles: Don't move the same piece twice, develop with a threat when possible."],middlegame:["⚔️ Middlegame Strategy: Look for tactical opportunities, improve piece placement, create threats.","🎭 Middlegame Focus: Attack weak points, coordinate your pieces, consider pawn breaks.","🧩 Middlegame Plans: Improve your worst piece, target opponent weaknesses, maintain tension."],endgame:["👑 Endgame Key: Activate your king! In the endgame, the king becomes a strong piece.","⚡ Endgame Priority: Passed pawns are crucial, keep your king active, use opposition.","🏆 Endgame Technique: Push passed pawns, use your king actively, be precise with moves."]},i=t[e]||t.middlegame;return i[Math.floor(Math.random()*i.length)]}showCoachPanel(){let e=document.getElementById("coach-panel");e||(e=document.createElement("div"),e.id="coach-panel",e.className="coach-panel",e.innerHTML=`
        <div class="coach-header">
          <span class="coach-icon">🎓</span>
          <span class="coach-title">Chess Coach</span>
          <button class="coach-close" onclick="window.app.aiManager.coachAI.disable()">×</button>
        </div>
        <div class="coach-content">
          <div class="coach-hint" id="coach-hint">
            <em>Click "Get Hint" to see the best move!</em>
          </div>
          <div class="coach-advice" id="coach-advice"></div>
        </div>
        <div class="coach-actions">
          <button class="btn-primary" onclick="window.app.requestHint()">💡 Get Hint</button>
          <button class="btn-secondary" onclick="window.app.requestAnalysis()">📊 Analyze</button>
        </div>
      `,document.body.appendChild(e)),e.style.display="flex"}hideCoachPanel(){const e=document.getElementById("coach-panel");e&&(e.style.display="none")}displayHint(e){const t=document.getElementById("coach-hint"),i=document.getElementById("coach-advice");if(t&&e){const s="abcdefgh",n="87654321",a=s[e.bestMove.from.col]+n[e.bestMove.from.row],o=s[e.bestMove.to.col]+n[e.bestMove.to.row];t.innerHTML=`
        <strong>💡 Best Move:</strong> ${a} → ${o}<br>
        <em>${e.explanation}</em>
      `,this.highlightSuggestion(e.bestMove)}i&&e&&e.advice&&(i.innerHTML=`<div class="strategic-tip">${e.advice}</div>`)}highlightSuggestion(e){this.app.coachSuggestion=e,this.app.render(),setTimeout(()=>{this.app.coachSuggestion=null,this.app.render()},1e4)}clearHint(){const e=document.getElementById("coach-hint");e&&(e.innerHTML='<em>Click "Get Hint" to see the best move!</em>'),this.app.coachSuggestion=null,this.app.render()}}class v{constructor(e){this.app=e,this.engine=null,this.coachAI=null,this.enabled=!1,this.vsComputerActive=!1,this.aiColor="black",this.skillLevel=10,this.thinking=!1,this.moveHistory=[],this.coachAI=new C(e)}async init(){if(this.engine)return!0;try{return console.log("Initializing Stockfish engine..."),this.engine=new g,await this.engine.init(),this.engine.setSkillLevel(this.skillLevel),console.log("Stockfish engine ready!"),!0}catch(e){return console.error("Failed to initialize AI:",e),this.app.showNotification("Failed to load AI engine"),!1}}async startVsComputer(e="black",t=10){return await this.init()?(this.enabled=!0,this.vsComputerActive=!0,this.aiColor=e,this.skillLevel=t,this.moveHistory=[],this.engine.setSkillLevel(t),this.app.engine.newGame(),this.app.lastMove=null,this.app.selectedSquare=null,this.app.legalMoves=[],this.app.render(),console.log(`Starting game vs computer (AI plays ${e}, skill ${t})`),e==="white"&&setTimeout(()=>this.makeAIMove(),500),!0):!1}async startAIGame(e="black",t=10){return this.startVsComputer(e,t)}stopVsComputer(){this.enabled=!1,this.vsComputerActive=!1,this.thinking=!1,this.moveHistory=[],this.hideThinkingIndicator()}isAITurn(){if(!this.enabled)return console.log("AI not enabled"),!1;const e=this.app.engine.getCurrentTurn(),t=e==="white"&&this.aiColor==="white"||e==="black"&&this.aiColor==="black";return console.log("AI turn check:",{enabled:this.enabled,currentTurn:e,aiColor:this.aiColor,isTurn:t}),t}async makeAIMove(){if(!this.enabled||this.thinking)return;const e=this.app.engine.getGameStatus();if(!(e==="checkmate"||e==="stalemate")){this.thinking=!0,this.showThinkingIndicator();try{const s=500+this.skillLevel/20*1500;console.log(`AI thinking... (${Math.round(s)}ms)`);const n=await this.engine.getBestMove(null,this.moveHistory,s);if(!n){console.error("AI failed to find a move"),this.thinking=!1,this.hideThinkingIndicator();return}console.log("AI chose move:",n);const a=g.uciToCoords(n);this.app.engine.makeMove(a.from.row,a.from.col,a.to.row,a.to.col,a.promotion)==="promotion"&&this.app.engine.makeMove(0,0,0,0,a.promotion||"Q"),this.moveHistory.push(n),this.app.lastMove=this.app.engine.getLastMove(),this.app.selectedSquare=null,this.app.legalMoves=[],this.app.render(),this.app.updateGameInfo();const r=this.app.engine.getGameStatus();if(r==="checkmate"){const l=this.app.engine.getCurrentTurn()==="white"?"Black":"White";this.app.showNotification(`Checkmate! ${l} wins!`),this.stopVsComputer()}else r==="check"?this.app.showNotification("Check!"):r==="stalemate"&&(this.app.showNotification("Stalemate! Game is a draw."),this.stopVsComputer())}catch(t){console.error("AI move error:",t),this.app.showNotification("AI error - please try again")}finally{this.thinking=!1,this.hideThinkingIndicator()}}}recordMove(e,t,i,s,n=null){if(!this.enabled)return;const a=g.coordsToUci(e,t,i,s,n);this.moveHistory.push(a),this.isAITurn()&&setTimeout(()=>this.makeAIMove(),300)}showThinkingIndicator(){let e=document.getElementById("ai-thinking");e||(e=document.createElement("div"),e.id="ai-thinking",e.className="ai-thinking",e.innerHTML=`
        <div class="thinking-content">
          <div class="thinking-spinner"></div>
          <span>AI is thinking...</span>
        </div>
      `,document.body.appendChild(e)),e.style.display="flex"}hideThinkingIndicator(){const e=document.getElementById("ai-thinking");e&&(e.style.display="none")}static getSkillLevelName(e){return e<=3?"Beginner":e<=7?"Casual":e<=12?"Intermediate":e<=16?"Advanced":"Expert"}static getApproxELO(e){return 800+e*110}}class T{constructor(e){this.app=e,this.currentLesson=0,this.active=!1,this.lessons=[{title:"Welcome to Chess!",description:"Let's learn how to play chess step by step.",setup:"empty",pieces:[],instructions:"Chess is played on an 8×8 board with 64 squares. Each player starts with 16 pieces. Click 'Next' to continue!",task:null},{title:"The Pawn ♟️",description:"Pawns are the foot soldiers of chess",setup:"custom",pieces:[{piece:"wP",row:6,col:4}],instructions:"Pawns move forward one square. On their first move, they can move two squares! Try moving this white pawn forward.",task:{type:"move_piece",from:{row:6,col:4},validMoves:[{row:5,col:4},{row:4,col:4}]}},{title:"Pawn Captures ⚔️",description:"Pawns capture diagonally",setup:"custom",pieces:[{piece:"wP",row:4,col:4},{piece:"bP",row:3,col:5}],instructions:"Pawns capture pieces diagonally, one square forward. Capture the black pawn!",task:{type:"capture",from:{row:4,col:4},target:{row:3,col:5}}},{title:"The Rook ♜",description:"Rooks move in straight lines",setup:"custom",pieces:[{piece:"wR",row:7,col:0}],instructions:"Rooks move any number of squares horizontally or vertically. Try moving the rook!",task:{type:"move_piece",from:{row:7,col:0},validMoves:[{row:7,col:3},{row:7,col:4},{row:4,col:0},{row:3,col:0}]}},{title:"The Bishop ♝",description:"Bishops move diagonally",setup:"custom",pieces:[{piece:"wB",row:7,col:2}],instructions:"Bishops move any number of squares diagonally. Move the bishop along a diagonal!",task:{type:"move_piece",from:{row:7,col:2},validMoves:[{row:5,col:4},{row:4,col:5},{row:6,col:3},{row:5,col:0}]}},{title:"The Knight ♞",description:"Knights jump in an L-shape",setup:"custom",pieces:[{piece:"wN",row:7,col:1}],instructions:"Knights move in an 'L' shape: 2 squares in one direction, then 1 square perpendicular. Knights can jump over other pieces!",task:{type:"move_piece",from:{row:7,col:1},validMoves:[{row:5,col:0},{row:5,col:2},{row:6,col:3}]}},{title:"The Queen ♛",description:"The most powerful piece",setup:"custom",pieces:[{piece:"wQ",row:4,col:4}],instructions:"The Queen combines rook and bishop powers! She can move any number of squares horizontally, vertically, or diagonally.",task:{type:"move_piece",from:{row:4,col:4},validMoves:[{row:4,col:7},{row:7,col:4},{row:1,col:1},{row:2,col:6}]}},{title:"The King ♚",description:"The most important piece",setup:"custom",pieces:[{piece:"wK",row:7,col:4}],instructions:"The King moves one square in any direction. The goal of chess is to checkmate the opponent's king! Move your king one square.",task:{type:"move_piece",from:{row:7,col:4},validMoves:[{row:7,col:3},{row:7,col:5},{row:6,col:3},{row:6,col:4},{row:6,col:5}]}},{title:"Check! ⚠️",description:"Attacking the enemy king",setup:"custom",pieces:[{piece:"wQ",row:4,col:3},{piece:"bK",row:0,col:3}],instructions:"When you attack the opponent's king, it's called 'CHECK'. The king must escape! Put the black king in check by moving your queen.",task:{type:"check",from:{row:4,col:3},target:{row:0,col:3}}},{title:"Checkmate! 🏆",description:"Winning the game",setup:"custom",pieces:[{piece:"wQ",row:7,col:3},{piece:"wR",row:1,col:0},{piece:"bK",row:0,col:0}],instructions:"Checkmate means the king is in check and cannot escape! Move the queen to deliver checkmate!",task:{type:"checkmate",from:{row:7,col:3},to:{row:0,col:1}}},{title:"Congratulations! 🎉",description:"You've learned the basics!",setup:"start",pieces:[],instructions:"You now know how all the pieces move! Ready to play a full game? Start with the AI on beginner mode to practice!",task:null}]}start(){this.currentLesson=0,this.active=!0,this.showLesson()}showLesson(){const e=this.lessons[this.currentLesson];this.setupBoard(e),this.showLessonUI(e),e.task&&this.enableTask(e.task)}setupBoard(e){const t=this.app.engine.getBoard();t.clear(),e.setup==="start"?this.app.engine.newGame():e.setup==="custom"&&e.pieces&&e.pieces.forEach(({piece:i,row:s,col:n})=>{t.setPiece(s,n,i)}),this.app.render()}showLessonUI(e){let t=document.getElementById("learn-panel");t||(t=document.createElement("div"),t.id="learn-panel",t.className="learn-panel",document.body.appendChild(t));const i=((this.currentLesson+1)/this.lessons.length*100).toFixed(0);t.innerHTML=`
      <div class="learn-header">
        <span class="learn-icon">🎓</span>
        <div class="learn-title">
          <h3>${e.title}</h3>
          <p>${e.description}</p>
        </div>
        <button class="learn-close" onclick="window.app.learnMode.exit()">×</button>
      </div>
      <div class="learn-progress">
        <div class="progress-bar">
          <div class="progress-fill" style="width: ${i}%"></div>
        </div>
        <span class="progress-text">Lesson ${this.currentLesson+1} of ${this.lessons.length}</span>
      </div>
      <div class="learn-content">
        <p class="learn-instructions">${e.instructions}</p>
      </div>
      <div class="learn-actions">
        ${this.currentLesson>0?'<button class="btn-secondary" onclick="window.app.learnMode.previousLesson()">← Previous</button>':""}
        ${e.task?"":'<button class="btn-primary" onclick="window.app.learnMode.nextLesson()">Next →</button>'}
      </div>
    `,t.style.display="flex"}enableTask(e){this.app.currentTask=e}validateTask(e,t,i,s){const n=this.app.currentTask;return!n||n.from&&(n.from.row!==e||n.from.col!==t)?!1:n.type==="move_piece"?n.validMoves.some(a=>a.row===i&&a.col===s):n.type==="capture"||n.type==="check"||n.type==="checkmate"?n.to?n.to.row===i&&n.to.col===s:n.target?n.target.row===i&&n.target.col===s:!1:!1}taskCompleted(){this.app.showNotification("✅ Great job! Moving to next lesson..."),setTimeout(()=>this.nextLesson(),1500)}nextLesson(){this.currentLesson<this.lessons.length-1?(this.currentLesson++,this.showLesson()):this.complete()}previousLesson(){this.currentLesson>0&&(this.currentLesson--,this.showLesson())}complete(){this.app.showNotification("🎉 Tutorial complete! You're ready to play!"),this.exit()}exit(){this.active=!1,this.app.currentTask=null;const e=document.getElementById("learn-panel");e&&(e.style.display="none"),this.app.engine.newGame(),this.app.render()}}class G{constructor(e){this.app=e,this.engine=e.engine,this.isReplaying=!1,this.replayIndex=0,this.autoPlayInterval=null,this.replaySpeed=1e3,this.originalMoveHistory=[],this.originalBoard=null,this.originalTurn=null,this.setupEventListeners()}setupEventListeners(){this.addTouchEvents("replay-btn",()=>{this.isReplaying?this.exit():this.start()}),this.addTouchEvents("replay-start",()=>this.jumpToStart()),this.addTouchEvents("replay-prev",()=>this.prevMove()),this.addTouchEvents("replay-play",()=>this.autoPlay()),this.addTouchEvents("replay-pause",()=>this.stopAutoPlay()),this.addTouchEvents("replay-next",()=>this.nextMove()),this.addTouchEvents("replay-end",()=>this.jumpToCurrent()),this.addTouchEvents("replay-exit",()=>this.exit()),document.addEventListener("keydown",e=>{if(this.isReplaying)switch(e.key){case"ArrowLeft":e.preventDefault(),this.prevMove();break;case"ArrowRight":e.preventDefault(),this.nextMove();break;case" ":e.preventDefault(),this.autoPlayInterval?this.stopAutoPlay():this.autoPlay();break;case"Home":e.preventDefault(),this.jumpToStart();break;case"End":e.preventDefault(),this.jumpToCurrent();break;case"Escape":e.preventDefault(),this.exit();break}})}addTouchEvents(e,t){const i=document.getElementById(e);i&&(i.addEventListener("click",t),i.addEventListener("touchstart",s=>{s.preventDefault(),t()},{passive:!1}),i.addEventListener("touchend",s=>{s.preventDefault()},{passive:!1}))}start(){var t;const e=this.engine.getMoveHistory();if(e.length===0){this.app.showNotification("No moves to replay!");return}this.isReplaying=!0,this.originalMoveHistory=[...e],this.originalBoard=this.engine.getBoard(),this.originalTurn=this.engine.getCurrentTurn(),this.jumpToStart(),this.showControls(),(t=document.querySelector(".footer"))==null||t.style.setProperty("display","none"),this.app.showNotification("🎬 Replay Mode - Use ← → or buttons")}exit(){var e,t;if(this.isReplaying){this.stopAutoPlay(),this.isReplaying=!1,this.engine.gameState.reset(),this.engine.gameState.moveHistory=[...this.originalMoveHistory];for(const i of this.originalMoveHistory)this.engine.makeMove(i.from.row,i.from.col,i.to.row,i.to.col,(e=i.promotion)==null?void 0:e.to[1]);this.hideControls(),(t=document.querySelector(".footer"))==null||t.style.removeProperty("display"),this.app.render(),this.app.showNotification("Exited replay mode")}}jumpToStart(){this.replayIndex=0,this.renderAtIndex(0)}jumpToCurrent(){this.replayIndex=this.originalMoveHistory.length,this.renderAtIndex(this.replayIndex)}prevMove(){this.replayIndex>0&&(this.replayIndex--,this.renderAtIndex(this.replayIndex))}nextMove(){this.replayIndex<this.originalMoveHistory.length&&(this.replayIndex++,this.renderAtIndex(this.replayIndex))}autoPlay(){this.autoPlayInterval||(document.getElementById("replay-play").style.display="none",document.getElementById("replay-pause").style.display="inline-block",this.autoPlayInterval=setInterval(()=>{this.replayIndex<this.originalMoveHistory.length?this.nextMove():this.stopAutoPlay()},this.replaySpeed))}stopAutoPlay(){this.autoPlayInterval&&(clearInterval(this.autoPlayInterval),this.autoPlayInterval=null,document.getElementById("replay-play").style.display="inline-block",document.getElementById("replay-pause").style.display="none")}renderAtIndex(e){var s;const t=new f;t.newGame();for(let n=0;n<e;n++){const a=this.originalMoveHistory[n];t.makeMove(a.from.row,a.from.col,a.to.row,a.to.col,(s=a.promotion)==null?void 0:s.to[1])}const i=this.app.engine;this.app.engine=t,e>0?this.app.lastMove=this.originalMoveHistory[e-1]:this.app.lastMove=null,this.app.render(),this.app.engine=i,this.updateReplayUI()}updateReplayUI(){const e=this.originalMoveHistory.length,t=this.replayIndex,i=document.getElementById("replay-position");i&&(i.textContent=`Move ${t} of ${e}`);const s=document.getElementById("current-move-display");if(s&&t>0){const u=this.originalMoveHistory[t-1],h=Math.floor((t-1)/2)+1,m=(t-1)%2===0?"":"...";s.textContent=`${h}${m}. ${u.notation}`}else s&&(s.textContent="Starting position");const n=document.getElementById("current-turn");if(n){const u=t%2===0?"White":"Black",h=`${u} to move`;n.textContent=h;const m=document.getElementById("header-turn-text");m&&(m.textContent=h);const c=document.getElementById("header-turn-piece");if(c){const p=u==="White"?"♔":"♚";c.textContent=p}}const a=document.getElementById("replay-start"),o=document.getElementById("replay-prev"),r=document.getElementById("replay-next"),l=document.getElementById("replay-end");a&&(a.disabled=t===0),o&&(o.disabled=t===0),r&&(r.disabled=t===e),l&&(l.disabled=t===e)}showControls(){const e=document.getElementById("replay-controls");e&&(e.style.display="flex");const t=document.getElementById("replay-btn");t&&(t.textContent="✖️ Exit Replay",t.classList.add("active")),document.body.classList.add("replay-active")}hideControls(){const e=document.getElementById("replay-controls");e&&(e.style.display="none");const t=document.getElementById("replay-btn");t&&(t.textContent="🎬 Replay",t.classList.remove("active")),document.body.classList.remove("replay-active")}isActive(){return this.isReplaying}setSpeed(e){this.replaySpeed=e,this.autoPlayInterval&&(this.stopAutoPlay(),this.autoPlay())}}class x{constructor(){this.base36Chars="0123456789abcdefghijklmnopqrstuvwxyz"}generateGameId(){const e=Date.now()%1679616;return this.toBase36(e,4)}toBase36(e,t=1){let i="",s=e;do i=this.base36Chars[s%36]+i,s=Math.floor(s/36);while(s>0);for(;i.length<t;)i="0"+i;return i}fromBase36(e){let t=0;for(let i=0;i<e.length;i++){const s=this.base36Chars.indexOf(e[i].toLowerCase());if(s===-1)throw new Error("Invalid base36 character");t=t*36+s}return t}encodeMove(e){if(e.castle)return e.castle==="kingside"||e.notation==="O-O"?"O-O":"O-O-O";if(e.notation)return e.notation;const t=this.positionToSquare(e.from.row,e.from.col),i=this.positionToSquare(e.to.row,e.to.col),s=e.piece[1],n=e.captured?"x":"";return s==="P"?n?t[0]+n+i:i:s+n+i}decodeMove(e,t,i){if(e==="O-O"||e==="O-O-O"){const c=i==="white"?7:0;return{type:"castle",side:e==="O-O"?"kingside":"queenside",from:{row:c,col:4},to:{row:c,col:e==="O-O"?6:2}}}const s=i[0];let n="P",a="",o=null,r=null,l=null;const u=e.match(/([a-h][18])=?([QRBN])/);if(u)a=u[1],l=u[2],n="P";else{const c=e.match(/^([KQRBN])?([a-h])?([1-8])?(x)?([a-h][1-8])$/);c?(n=c[1]||"P",o=c[2],r=c[3],a=c[5]):a=e}const h=this.squareToPosition(a);return{from:this.findPieceForMove(t,s+n,h,o,r),to:h,piece:s+n,promotion:l}}findPieceForMove(e,t,i,s,n){for(let a=0;a<8;a++)for(let o=0;o<8;o++)if(e.getPiece(a,o)===t&&!(s&&String.fromCharCode(97+o)!==s)&&!(n&&(8-a).toString()!==n))return{row:a,col:o};throw new Error(`Cannot find ${t} that can move to target`)}positionToSquare(e,t){const i=String.fromCharCode(97+t),s=8-e;return i+s}squareToPosition(e){const t=e.charCodeAt(0)-97;return{row:8-parseInt(e[1]),col:t}}encodeGameState(e,t=null){t||(t=this.generateGameId());const i=e.map(n=>this.encodeMove(n)).join("-");return`${window.location.origin}/m/${t}-${i}`}decodeGameState(e){let t=e;e.includes("://")&&(t=new URL(e).pathname);const i=t.match(/\/m\/([a-z0-9]{4})(?:-(.+))?$/);if(!i)throw new Error("Invalid game URL format");const s=i[1],n=i[2]||"",a=n?n.split("-"):[];return{gameId:s,moves:a}}createShareMessage(e,t){return`♟️ Your turn! ${t==="white"?"Black":"White"} to move.

Play here: ${e}`}estimateUrlLength(e){return 26+e*4}}class A{constructor(e){this.app=e,this.encoder=new x,this.currentGameId=null}async shareGame(){const e=this.app.engine.getMoveHistory();if(e.length===0)return this.app.showNotification("No moves to share yet!"),!1;this.currentGameId||(this.currentGameId=this.encoder.generateGameId(),this.saveGameId());const t=this.encoder.encodeGameState(e,this.currentGameId),i=this.app.engine.getCurrentTurn(),s=this.encoder.createShareMessage(t,i);if(this.canUseWebShare())try{return await navigator.share({title:"Mate - Your Turn!",text:s,url:t}),this.app.showNotification("✅ Game shared!"),!0}catch(n){if(n.name!=="AbortError")console.error("Share failed:",n);else return!1}return await this.copyToClipboard(t,s)}async copyToClipboard(e,t=null){const i=t||e;try{return navigator.clipboard&&navigator.clipboard.writeText?(await navigator.clipboard.writeText(i),this.app.showNotification("🔗 Link copied! Share it with your friend."),this.showShareOptionsDialog(e),!0):this.fallbackCopy(i)}catch(s){return console.error("Clipboard failed:",s),this.fallbackCopy(i)}}fallbackCopy(e){const t=document.createElement("textarea");t.value=e,t.style.position="fixed",t.style.opacity="0",t.style.pointerEvents="none",document.body.appendChild(t);try{t.select(),t.setSelectionRange(0,t.value.length);const i=document.execCommand("copy");return document.body.removeChild(t),i?(this.app.showNotification("🔗 Link copied to clipboard!"),!0):(this.app.showNotification("❌ Failed to copy link"),!1)}catch{return document.body.removeChild(t),this.app.showNotification("❌ Failed to copy link"),!1}}showShareOptionsDialog(e){const t=document.createElement("div");t.className="share-dialog",t.innerHTML=`
      <div class="share-dialog-content">
        <h3>Share via:</h3>
        <div class="share-options">
          <a href="sms:?body=${encodeURIComponent(e)}" class="share-btn sms">
            <span class="share-icon">📱</span>
            <span>SMS</span>
          </a>
          <a href="https://wa.me/?text=${encodeURIComponent(e)}" target="_blank" class="share-btn whatsapp">
            <span class="share-icon">💬</span>
            <span>WhatsApp</span>
          </a>
          <button class="share-btn copy" onclick="navigator.clipboard.writeText('${e}')">
            <span class="share-icon">📋</span>
            <span>Copy Again</span>
          </button>
        </div>
        <input type="text" readonly value="${e}" class="share-url-input" onclick="this.select()">
        <button class="btn-secondary" onclick="this.closest('.share-dialog').remove()">Close</button>
      </div>
    `,t.style.cssText=`
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 5000;
    `,document.body.appendChild(t),t.addEventListener("click",i=>{i.target===t&&t.remove()}),setTimeout(()=>{t.parentNode&&t.remove()},3e4)}canUseWebShare(){return navigator.share&&navigator.canShare}generateShareText(e){const i=this.app.engine.getCurrentTurn()==="white"?"Black":"White",s=this.app.engine.getMoveHistory().length;return`♟️ Mate - Your Turn!

${i} to move (Move ${s+1})

${e}`}saveGameId(){this.currentGameId&&localStorage.setItem("mate-current-game-id",this.currentGameId)}loadGameId(){return this.currentGameId=localStorage.getItem("mate-current-game-id"),this.currentGameId}newGame(){return this.currentGameId=this.encoder.generateGameId(),this.saveGameId(),this.currentGameId}getGameId(){return this.currentGameId||(this.currentGameId=this.loadGameId()||this.encoder.generateGameId(),this.saveGameId()),this.currentGameId}setGameId(e){this.currentGameId=e,this.saveGameId()}getShareUrl(){const e=this.app.engine.getMoveHistory(),t=this.getGameId();return this.encoder.encodeGameState(e,t)}estimateUrlLength(){const e=this.app.engine.getMoveHistory().length;return this.encoder.estimateUrlLength(e)}}class E{constructor(){this.engine=new f}decodeGame(e,t){try{this.engine.newGame();for(let i=0;i<t.length;i++){const s=t[i];if(s==="O-O"||s==="O-O-O"){if(!this.applyCastling(s))return{valid:!1,error:`Invalid castling at move ${i+1}: ${s}`,engine:null};continue}if(!this.applyMoveFromNotation(s))return{valid:!1,error:`Invalid move at position ${i+1}: ${s}`,engine:null}}return{valid:!0,engine:this.engine,gameId:e,moveCount:t.length,error:null}}catch(i){return{valid:!1,error:i.message,engine:null}}}applyCastling(e){const i=this.engine.getCurrentTurn()==="white"?7:0,s=e==="O-O"?"kingside":"queenside";return this.engine.makeMove(i,4,i,s==="kingside"?6:2)}applyMoveFromNotation(e){const t=this.engine.getCurrentTurn(),i=this.engine.getBoard(),s=t[0],n=e.match(/([a-h][18])=?([QRBN])/);if(n){const c=n[1],p=n[2],y=this.squareToPosition(c),S=c.charCodeAt(0)-97,M=t==="white"?1:6;return this.engine.makeMove(M,S,y.row,y.col,p)}let a="P",o="",r=null,l=null;const u=e.match(/^([a-h])x([a-h][1-8])$/);if(u)a="P",r=u[1],o=u[2];else{const c=e.match(/^([KQRBN])?([a-h])?([1-8])?(x)?([a-h][1-8])$/);if(c)a=c[1]||"P",r=c[2],l=c[3],c[4],o=c[5];else if(e.match(/^[a-h][1-8]$/))o=e,a="P";else return console.error("Cannot parse notation:",e),!1}const h=this.squareToPosition(o),m=this.findPieceForMove(i,s+a,h,r,l,t);return m?this.engine.makeMove(m.row,m.col,h.row,h.col):(console.error("Cannot find piece for move:",e),!1)}findPieceForMove(e,t,i,s,n,a){const o=[];for(let r=0;r<8;r++)for(let l=0;l<8;l++){if(e.getPiece(r,l)!==t||s&&String.fromCharCode(97+l)!==s||n&&(8-r).toString()!==n)continue;this.engine.getLegalMoves(r,l).some(c=>c.row===i.row&&c.col===i.col)&&o.push({row:r,col:l})}return o.length===0?null:(o.length===1||console.warn("Multiple candidates for move, using first:",o),o[0])}squareToPosition(e){const t=e.charCodeAt(0)-97;return{row:8-parseInt(e[1]),col:t}}static isValidGameUrl(e){return/\/m\/[a-z0-9]{4}(?:-[a-zA-Z0-9\-]+)?$/.test(e)}static getGameInfo(e){const t=e.match(/\/m\/([a-z0-9]{4})(?:-(.+))?$/);if(!t)return null;const i=t[1],s=t[2]||"",n=s?s.split("-"):[];return{gameId:i,moveCount:n.length,lastMove:n[n.length-1]||null}}}class w{constructor(){this.enabled=this.loadSoundSetting(),this.audioContext=null,this.sounds={},this.initialized=!1,this.pendingSound=null}init(){if(!this.initialized)try{const e=window.AudioContext||window.webkitAudioContext;this.audioContext=new e,this.initialized=!0,console.log("[Sound] Audio context initialized"),this.pendingSound&&(this.play(this.pendingSound),this.pendingSound=null)}catch(e){console.error("[Sound] Failed to initialize audio context:",e)}}play(e){if(this.enabled){if(!this.initialized&&(this.init(),!this.initialized)){this.pendingSound=e;return}try{switch(e){case"move":this.playMoveSound();break;case"capture":this.playCaptureSound();break;case"check":this.playCheckSound();break;case"checkmate":this.playCheckmateSound();break;case"illegal":this.playIllegalSound();break;case"select":this.playSelectSound();break;default:console.warn("[Sound] Unknown sound type:",e)}}catch(t){console.error("[Sound] Error playing sound:",t)}}}playMoveSound(){const e=this.audioContext,t=e.createOscillator(),i=e.createGain();t.connect(i),i.connect(e.destination),t.frequency.setValueAtTime(800,e.currentTime),t.frequency.exponentialRampToValueAtTime(600,e.currentTime+.05),i.gain.setValueAtTime(.15,e.currentTime),i.gain.exponentialRampToValueAtTime(.01,e.currentTime+.05),t.start(e.currentTime),t.stop(e.currentTime+.05)}playCaptureSound(){const e=this.audioContext,t=e.createOscillator(),i=e.createGain();t.connect(i),i.connect(e.destination),t.frequency.setValueAtTime(1200,e.currentTime),t.frequency.exponentialRampToValueAtTime(400,e.currentTime+.08),i.gain.setValueAtTime(.2,e.currentTime),i.gain.exponentialRampToValueAtTime(.01,e.currentTime+.08),t.start(e.currentTime),t.stop(e.currentTime+.08)}playCheckSound(){const e=this.audioContext;for(let t=0;t<2;t++){const i=e.createOscillator(),s=e.createGain();i.connect(s),s.connect(e.destination);const n=e.currentTime+t*.1;i.frequency.setValueAtTime(900,n),s.gain.setValueAtTime(.18,n),s.gain.exponentialRampToValueAtTime(.01,n+.08),i.start(n),i.stop(n+.08)}}playCheckmateSound(){const e=this.audioContext;[{freq:523.25,time:0},{freq:659.25,time:.12},{freq:783.99,time:.24},{freq:1046.5,time:.36}].forEach(i=>{const s=e.createOscillator(),n=e.createGain();s.connect(n),n.connect(e.destination);const a=e.currentTime+i.time;s.frequency.setValueAtTime(i.freq,a),n.gain.setValueAtTime(.2,a),n.gain.exponentialRampToValueAtTime(.01,a+.3),s.start(a),s.stop(a+.3)})}playIllegalSound(){const e=this.audioContext,t=e.createOscillator(),i=e.createGain();t.connect(i),i.connect(e.destination),t.frequency.setValueAtTime(200,e.currentTime),i.gain.setValueAtTime(.1,e.currentTime),i.gain.exponentialRampToValueAtTime(.01,e.currentTime+.1),t.start(e.currentTime),t.stop(e.currentTime+.1)}playSelectSound(){const e=this.audioContext,t=e.createOscillator(),i=e.createGain();t.connect(i),i.connect(e.destination),t.frequency.setValueAtTime(1e3,e.currentTime),t.frequency.exponentialRampToValueAtTime(800,e.currentTime+.03),i.gain.setValueAtTime(.08,e.currentTime),i.gain.exponentialRampToValueAtTime(.01,e.currentTime+.03),t.start(e.currentTime),t.stop(e.currentTime+.03)}toggle(){return this.enabled=!this.enabled,this.saveSoundSetting(),this.enabled}setEnabled(e){this.enabled=e,this.saveSoundSetting()}loadSoundSetting(){const e=localStorage.getItem("mate-sound-enabled");return e===null?!0:e==="true"}saveSoundSetting(){localStorage.setItem("mate-sound-enabled",this.enabled.toString())}isEnabled(){return this.enabled}}if(typeof window<"u"){window.soundManager=new w;const d=()=>{window.soundManager.init(),document.removeEventListener("click",d),document.removeEventListener("touchstart",d),document.removeEventListener("keydown",d)};document.addEventListener("click",d,{once:!0}),document.addEventListener("touchstart",d,{once:!0}),document.addEventListener("keydown",d,{once:!0})}class L{constructor(e,t,i){this.canvas=e,this.ctx=t,this.squareSize=i,this.animations=new Map,this.animationId=null,this.isAnimating=!1,this.moveDuration=300,this.fadeDuration=200,this.flipDuration=500,this.easing=this.easeInOutCubic}animateMove(e,t,i,s,n,a=null){const o=`move_${Date.now()}_${Math.random()}`,r=performance.now(),l=t*this.squareSize,u=e*this.squareSize,h=s*this.squareSize,m=i*this.squareSize,c={id:o,type:"move",startTime:r,duration:this.moveDuration,startX:l,startY:u,endX:h,endY:m,piece:n,onComplete:a};return this.animations.set(o,c),this.startAnimationLoop(),o}animateCapture(e,t,i,s=null){const n=`capture_${Date.now()}_${Math.random()}`,a=performance.now(),o=t*this.squareSize,r=e*this.squareSize,l={id:n,type:"capture",startTime:a,duration:this.fadeDuration,x:o,y:r,piece:i,opacity:1,onComplete:s};return this.animations.set(n,l),this.startAnimationLoop(),n}animateBoardFlip(e=null){const t=`flip_${Date.now()}_${Math.random()}`,i=performance.now(),s={id:t,type:"flip",startTime:i,duration:this.flipDuration,scale:1,onComplete:e};return this.animations.set(t,s),this.startAnimationLoop(),t}startAnimationLoop(){if(this.animationId)return;this.isAnimating=!0;const e=t=>{let i=!1;for(const[s,n]of this.animations){const a=t-n.startTime,o=Math.min(a/n.duration,1);o<1?(i=!0,this.updateAnimation(n,o)):(this.completeAnimation(n),this.animations.delete(s))}i?this.animationId=requestAnimationFrame(e):(this.animationId=null,this.isAnimating=!1)};this.animationId=requestAnimationFrame(e)}updateAnimation(e,t){const i=this.easing(t);switch(e.type){case"move":e.currentX=e.startX+(e.endX-e.startX)*i,e.currentY=e.startY+(e.endY-e.startY)*i;break;case"capture":e.opacity=1-i;break;case"flip":t<.5?e.scale=1-i*.4:e.scale=.6+(i-.5)*.8;break}}completeAnimation(e){e.onComplete&&e.onComplete(e)}renderAnimations(e){if(this.isAnimating)for(const t of this.animations.values())this.renderAnimation(t,e)}renderAnimation(e,t){switch(this.ctx.save(),e.type){case"move":this.ctx.globalAlpha=.8,t(e.piece,e.currentX+this.squareSize/2,e.currentY+this.squareSize/2,this.squareSize*.8);break;case"capture":this.ctx.globalAlpha=e.opacity,t(e.piece,e.x+this.squareSize/2,e.y+this.squareSize/2,this.squareSize*.8);break;case"flip":const i=this.canvas.width/2,s=this.canvas.height/2;this.ctx.translate(i,s),this.ctx.scale(e.scale,e.scale),this.ctx.translate(-i,-s);break}this.ctx.restore()}easeInOutCubic(e){return e<.5?4*e*e*e:1-Math.pow(-2*e+2,3)/2}hasActiveAnimations(){return this.animations.size>0}cancelAllAnimations(){this.animations.clear(),this.animationId&&(cancelAnimationFrame(this.animationId),this.animationId=null,this.isAnimating=!1)}cancelAnimation(e){this.animations.delete(e),this.animations.size===0&&this.animationId&&(cancelAnimationFrame(this.animationId),this.animationId=null,this.isAnimating=!1)}setMoveDuration(e){this.moveDuration=e}setFadeDuration(e){this.fadeDuration=e}setFlipDuration(e){this.flipDuration=e}}class k{constructor(){this.enabled=this.loadHapticSetting(),this.vibrationSupported="vibrate"in navigator,this.hapticSupported="vibrate"in navigator,console.log("[Haptic] Initialized:",{enabled:this.enabled,vibrationSupported:this.vibrationSupported,hapticSupported:this.hapticSupported})}move(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate(50)}catch(e){console.warn("[Haptic] Move feedback failed:",e)}}capture(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate([50,30,50])}catch(e){console.warn("[Haptic] Capture feedback failed:",e)}}check(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate([100,50,100])}catch(e){console.warn("[Haptic] Check feedback failed:",e)}}checkmate(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate([100,50,100,50,200])}catch(e){console.warn("[Haptic] Checkmate feedback failed:",e)}}illegal(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate([200,100,200])}catch(e){console.warn("[Haptic] Illegal feedback failed:",e)}}select(){if(!(!this.enabled||!this.hapticSupported))try{navigator.vibrate(25)}catch(e){console.warn("[Haptic] Select feedback failed:",e)}}setEnabled(e){this.enabled=e,this.saveHapticSetting()}toggle(){return this.enabled=!this.enabled,this.saveHapticSetting(),this.enabled}isEnabled(){return this.enabled}isSupported(){return this.hapticSupported}loadHapticSetting(){const e=localStorage.getItem("mate-haptic-enabled");return e===null?!0:e==="true"}saveHapticSetting(){localStorage.setItem("mate-haptic-enabled",this.enabled.toString())}}typeof window<"u"&&(window.hapticManager=new k);class q{constructor(){this.currentGame=null,this.gameContainer=null,this.gameInfo=null}init(e,t){this.currentGame=e,this.gameInfo=t,this.gameContainer=document.getElementById("game-container"),this.updateGameTitle(),this.updateGameDescription()}updateGameTitle(){const e=document.getElementById("game-title");e&&this.gameInfo&&(e.textContent=this.gameInfo.name)}updateGameDescription(){const e=document.getElementById("game-description");e&&this.gameInfo&&(e.textContent=this.gameInfo.description)}showGameSelection(e,t){let i=document.getElementById("game-selection-modal");i||(i=this.createGameSelectionModal(),document.body.appendChild(i)),this.populateGameSelection(e),i.style.display="flex",i.onclick=s=>{s.target===i&&this.hideGameSelection()},i._onSelect=t}hideGameSelection(){const e=document.getElementById("game-selection-modal");e&&(e.style.display="none")}createGameSelectionModal(){const e=document.createElement("div");return e.id="game-selection-modal",e.className="modal",e.innerHTML=`
      <div class="modal-content">
        <div class="modal-header">
          <h2>🎮 Choose a Game</h2>
          <button class="modal-close" onclick="this.closest('.modal').style.display='none'">&times;</button>
        </div>
        <div class="modal-body">
          <div id="game-selection-grid" class="game-selection-grid">
            <!-- Games will be populated here -->
          </div>
        </div>
      </div>
    `,e}populateGameSelection(e){const t=document.getElementById("game-selection-grid");t&&(t.innerHTML=e.map(i=>`
      <div class="game-card" data-game-id="${i.id}">
        <div class="game-icon">${i.icon}</div>
        <div class="game-name">${i.name}</div>
        <div class="game-description">${i.description}</div>
        <div class="game-meta">
          <span class="game-players">👥 ${i.minPlayers}-${i.maxPlayers} players</span>
          ${i.aiSupported?'<span class="game-ai">🤖 AI</span>':""}
        </div>
      </div>
    `).join(""),t.querySelectorAll(".game-card").forEach(i=>{i.addEventListener("click",()=>{const s=i.dataset.gameId,n=document.getElementById("game-selection-modal");n._onSelect&&n._onSelect(s),this.hideGameSelection()})}))}updateGameInfo(e){const t=document.getElementById("current-turn");t&&(t.textContent=e.currentTurn);const i=document.getElementById("move-count");i&&(i.textContent=e.moveHistory.length);const s=document.getElementById("game-status");s&&(s.textContent=this.formatGameStatus(e.status))}formatGameStatus(e){return{playing:"Playing",check:"Check!",checkmate:"Checkmate!",stalemate:"Stalemate",draw:"Draw"}[e]||e}showGameSettings(e){console.log("[GameUIManager] Game settings for:",e.name)}updateBoardDimensions(e){const t=document.getElementById("chess-board");if(t){const i=Math.min(400,500)/Math.max(e.rows,e.cols);t.width=e.cols*i,t.height=e.rows*i}}}class B{constructor(){this.stats=this.loadStats(),this.currentGame=null,this.gameStartTime=null,this.moveCount=0,this.captureCount=0,this.checkCount=0,this.checkmateCount=0,this.undoCount=0,this.hintCount=0}startGame(e,t,i=null,s=null){this.currentGame={gameType:e,gameMode:t,aiDifficulty:i,playerColor:s,startTime:Date.now(),endTime:null,moves:[],captures:[],checks:[],checkmates:[],undos:0,hints:0,result:null,winner:null},this.gameStartTime=Date.now(),this.moveCount=0,this.captureCount=0,this.checkCount=0,this.checkmateCount=0,this.undoCount=0,this.hintCount=0}recordMove(e,t,i,s=null,n=null){if(!this.currentGame)return;const a={from:e,to:t,piece:i,captured:s,special:n,timestamp:Date.now(),moveNumber:this.moveCount+1};this.currentGame.moves.push(a),this.moveCount++,s&&(this.captureCount++,this.currentGame.captures.push({piece:s,moveNumber:this.moveCount,timestamp:Date.now()}))}recordCheck(e,t){this.currentGame&&(this.checkCount++,this.currentGame.checks.push({kingPosition:e,checkingPiece:t,moveNumber:this.moveCount,timestamp:Date.now()}))}recordCheckmate(e,t){this.currentGame&&(this.checkmateCount++,this.currentGame.checkmates.push({kingPosition:e,matingPiece:t,moveNumber:this.moveCount,timestamp:Date.now()}))}recordUndo(){this.currentGame&&(this.undoCount++,this.currentGame.undos++)}recordHint(){this.currentGame&&(this.hintCount++,this.currentGame.hints++)}endGame(e,t=null){this.currentGame&&(this.currentGame.endTime=Date.now(),this.currentGame.result=e,this.currentGame.winner=t,this.currentGame.duration=this.currentGame.endTime-this.currentGame.startTime,this.updateOverallStats(),this.saveGameToHistory(),this.currentGame=null)}updateOverallStats(){if(!this.currentGame)return;const e=this.currentGame.gameType;this.currentGame.gameMode,this.stats.games[e]||(this.stats.games[e]={total:0,wins:0,losses:0,draws:0,totalTime:0,totalMoves:0,totalCaptures:0,totalChecks:0,totalCheckmates:0,totalUndos:0,totalHints:0,bestTime:null,worstTime:null,averageTime:0,averageMoves:0,winRate:0,streaks:{current:0,longest:0}});const t=this.stats.games[e];t.total++,t.totalTime+=this.currentGame.duration,t.totalMoves+=this.moveCount,t.totalCaptures+=this.captureCount,t.totalChecks+=this.checkCount,t.totalCheckmates+=this.checkmateCount,t.totalUndos+=this.undoCount,t.totalHints+=this.hintCount,this.currentGame.result==="win"?(t.wins++,t.streaks.current++,t.streaks.current>t.streaks.longest&&(t.streaks.longest=t.streaks.current)):this.currentGame.result==="loss"?(t.losses++,t.streaks.current=0):this.currentGame.result==="draw"&&(t.draws++,t.streaks.current=0),(t.bestTime===null||this.currentGame.duration<t.bestTime)&&(t.bestTime=this.currentGame.duration),(t.worstTime===null||this.currentGame.duration>t.worstTime)&&(t.worstTime=this.currentGame.duration),t.averageTime=t.totalTime/t.total,t.averageMoves=t.totalMoves/t.total,t.winRate=t.wins/t.total*100,this.stats.overall.totalGames++,this.stats.overall.totalTime+=this.currentGame.duration,this.stats.overall.totalMoves+=this.moveCount,this.updateDailyStats(),this.saveStats()}updateDailyStats(){const e=new Date().toDateString();this.stats.daily[e]||(this.stats.daily[e]={games:0,time:0,moves:0,wins:0,losses:0,draws:0});const t=this.stats.daily[e];t.games++,t.time+=this.currentGame.duration,t.moves+=this.moveCount,this.currentGame.result==="win"?t.wins++:this.currentGame.result==="loss"?t.losses++:this.currentGame.result==="draw"&&t.draws++}saveGameToHistory(){if(!this.currentGame)return;const e=this.loadGameHistory();e.unshift({...this.currentGame,id:Date.now().toString()}),e.length>100&&e.splice(100),localStorage.setItem("mate-game-history",JSON.stringify(e))}getCurrentGameStats(){return this.currentGame?{gameType:this.currentGame.gameType,gameMode:this.currentGame.gameMode,duration:Date.now()-this.currentGame.startTime,moves:this.moveCount,captures:this.captureCount,checks:this.checkCount,checkmates:this.checkmateCount,undos:this.undoCount,hints:this.hintCount}:null}getOverallStats(){return this.stats.overall}getGameTypeStats(e){return this.stats.games[e]||null}getDailyStats(e=7){const t=[],i=new Date;for(let s=0;s<e;s++){const n=new Date(i);n.setDate(n.getDate()-s);const a=n.toDateString();t.unshift({date:a,...this.stats.daily[a]||{games:0,time:0,moves:0,wins:0,losses:0,draws:0}})}return t}getGameHistory(e=20){return this.loadGameHistory().slice(0,e)}getAchievements(){const e=[];this.stats.overall.totalGames>=1&&e.push({id:"first-game",name:"First Game",description:"Played your first game",unlocked:!0}),this.stats.overall.totalGames>=10&&e.push({id:"ten-games",name:"Getting Started",description:"Played 10 games",unlocked:!0}),this.stats.overall.totalGames>=100&&e.push({id:"hundred-games",name:"Century",description:"Played 100 games",unlocked:!0});const t=this.stats.games.chess;return t&&t.streaks.longest>=3&&e.push({id:"win-streak-3",name:"Hot Streak",description:"Won 3 games in a row",unlocked:!0}),t&&t.streaks.longest>=10&&e.push({id:"win-streak-10",name:"Unstoppable",description:"Won 10 games in a row",unlocked:!0}),t&&t.bestTime&&t.bestTime<6e4&&e.push({id:"quick-win",name:"Lightning",description:"Won a game in under 1 minute",unlocked:!0}),e}loadStats(){const e=localStorage.getItem("mate-game-stats");return e?JSON.parse(e):{overall:{totalGames:0,totalTime:0,totalMoves:0,firstGame:null,lastGame:null},games:{},daily:{},achievements:[]}}loadGameHistory(){const e=localStorage.getItem("mate-game-history");return e?JSON.parse(e):[]}saveStats(){localStorage.setItem("mate-game-stats",JSON.stringify(this.stats))}clearStats(){this.stats={overall:{totalGames:0,totalTime:0,totalMoves:0,firstGame:null,lastGame:null},games:{},daily:{},achievements:[]},localStorage.removeItem("mate-game-stats"),localStorage.removeItem("mate-game-history")}exportStats(){return{stats:this.stats,history:this.loadGameHistory(),exportDate:new Date().toISOString()}}importStats(e){e.stats&&(this.stats=e.stats,this.saveStats()),e.history&&localStorage.setItem("mate-game-history",JSON.stringify(e.history))}}console.log("♟️ Mate starting...");class P{constructor(){console.log("Chess app initialized!"),this.canvas=document.getElementById("chess-board"),this.ctx=this.canvas.getContext("2d"),this.squareSize=this.canvas.width/8,this.engine=new f,this.engine.newGame(),this.themeManager=new b,this.soundManager=new w,this.animationManager=new L(this.canvas,this.ctx,this.squareSize),this.hapticManager=new k,this.multiGameApp=new I,this.gameUIManager=new q,this.gameStats=new B,this.aiManager=new v(this),this.learnMode=new T(this),this.replayManager=new G(this),this.shareManager=new A(this),this.selectedSquare=null,this.legalMoves=[],this.lastMove=null,this.coachSuggestion=null,this.currentTask=null,this.boardOrientation=localStorage.getItem("mate-board-orientation")||"bottom",this.showHints=localStorage.getItem("mate-show-hints"),this.showHints=this.showHints===null||this.showHints==="true",this.setupEventListeners(),this.checkForNewGame(),this.loadGameFromUrl(),this.checkForGameSelection(),this.restoreGameState(),this.render(),console.log("✅ Chess PWA ready!")}setupEventListeners(){this.canvas.addEventListener("click",this.handleBoardClick.bind(this)),this.canvas.addEventListener("touchstart",e=>{e.preventDefault(),console.log("Touch start:",e.touches[0]),this.handleBoardClick(e.touches[0])},{passive:!1}),this.addTouchEvents("learn-btn",()=>{this.learnMode.start()}),this.addTouchEvents("coach-btn",()=>{this.toggleCoachMode()}),this.addTouchEvents("share-btn",()=>{this.shareManager.shareGame()}),this.addTouchEvents("game-select-btn",()=>{window.location.href="/games.html"}),this.addTouchEvents("settings-btn",()=>{this.saveGameState(),window.location.href="/settings.html"}),this.addTouchEvents("undo-btn",()=>{this.engine.undoMove()&&(this.selectedSquare=null,this.legalMoves=[],this.render(),this.showNotification("Move undone"))}),this.addTouchEvents("new-game-btn",()=>{}),this.addTouchEvents("new-game-header",()=>{window.location.href="/new-game.html"}),this.addTouchEvents("stats-btn",()=>{})}addTouchEvents(e,t){const i=document.getElementById(e);i&&(i.addEventListener("click",t),i.addEventListener("touchstart",s=>{s.preventDefault(),t()},{passive:!1}),i.addEventListener("touchend",s=>{s.preventDefault()},{passive:!1}))}handleBoardClick(e){if(this.replayManager.isActive()){this.showNotification("Exit replay mode to make moves");return}this.boardOrientation=localStorage.getItem("mate-board-orientation")||"bottom";const t=this.canvas.getBoundingClientRect(),i=e.clientX-t.left,s=e.clientY-t.top;let n=Math.floor(i/this.squareSize),a=Math.floor(s/this.squareSize);if(console.log("handleBoardClick:",{clientX:e.clientX,clientY:e.clientY,rectLeft:t.left,rectTop:t.top,x:i,y:s,squareSize:this.squareSize,rawCol:n,rawRow:a}),this.boardOrientation==="top"&&(a=7-a,n=7-n),a<0||a>7||n<0||n>7){console.log("Click outside board bounds");return}console.log("Clicked square:",{row:a,col:n}),this.selectedSquare?this.tryMove(this.selectedSquare.row,this.selectedSquare.col,a,n):this.selectPiece(a,n)}selectPiece(e,t){const s=this.engine.getBoard().getPiece(e,t),n=this.engine.getCurrentTurn();console.log("selectPiece called:",{row:e,col:t,piece:s,currentTurn:n}),s&&s[0]===n[0]?(this.selectedSquare={row:e,col:t},this.soundManager.play("select"),this.hapticManager.select(),this.showHints=localStorage.getItem("mate-show-hints"),this.showHints=this.showHints===null||this.showHints==="true",this.legalMoves=this.engine.getLegalMoves(e,t),console.log("Selected piece:",s,"Legal moves:",this.legalMoves.length),this.legalMoves.length===0&&this.showHints&&(this.flashSquare(e,t),this.soundManager.play("illegal"),this.hapticManager.illegal(),this.showNotification("❌ No legal moves for this piece!")),this.render()):console.log("Piece selection failed:",{piece:s,currentTurn:n,pieceColor:s?s[0]:"none",currentTurnColor:n[0]})}flashSquare(e,t){const i=this.selectedSquare;this.selectedSquare=null,this.render(),setTimeout(()=>{this.selectedSquare=i,this.render()},150)}tryMove(e,t,i,s,n=null){if(this.currentTask&&this.learnMode.active&&!this.learnMode.validateTask(e,t,i,s)){this.showNotification("❌ Try again! Follow the instructions."),this.selectedSquare=null,this.legalMoves=[],this.render();return}const a=this.engine.getBoard(),o=a.getPiece(i,s),r=a.getPiece(e,t),l=this.engine.makeMove(e,t,i,s,n);l==="promotion"?(console.log("Pawn promotion required!"),this.showPromotionDialog(e,t,i,s),this.lastMove=this.engine.getLastMove(),this.selectedSquare=null,this.legalMoves=[],this.render(),this.updateGameInfo()):l?(console.log("Move successful!"),this.currentTask&&this.learnMode.active&&(this.learnMode.taskCompleted(),this.currentTask=null),this.aiManager.recordMove(e,t,i,s,n),this.lastMove=this.engine.getLastMove(),this.selectedSquare=null,this.legalMoves=[],this.animateMove(e,t,i,s,r,o),console.log("Checking AI turn...",{enabled:this.aiManager.enabled,currentTurn:this.engine.getCurrentTurn(),aiColor:this.aiManager.aiColor,isAITurn:this.aiManager.isAITurn()}),this.aiManager.isAITurn()?(console.log("AI turn detected, triggering move..."),setTimeout(()=>{this.aiManager.makeAIMove()},1e3)):console.log("Not AI turn, skipping...")):(console.log("Illegal move"),this.soundManager.play("illegal"),this.hapticManager.illegal(),this.selectedSquare=null,this.legalMoves=[],this.render())}animateMove(e,t,i,s,n,a){a?this.animationManager.animateCapture(i,s,a,()=>{this.animationManager.animateMove(e,t,i,s,n,()=>{this.onMoveAnimationComplete(e,t,i,s,a)})}):this.animationManager.animateMove(e,t,i,s,n,()=>{this.onMoveAnimationComplete(e,t,i,s,a)})}onMoveAnimationComplete(e,t,i,s,n){this.render(),this.updateGameInfo(),this.saveGameState();const a=this.engine.getGameStatus(),o=this.lastMove&&this.lastMove.captured;if(a==="checkmate"){const r=this.engine.getCurrentTurn()==="white"?"Black":"White";this.showNotification(`Checkmate! ${r} wins!`),this.soundManager.play("checkmate"),this.hapticManager.checkmate(),this.aiManager.stopVsComputer()}else a==="check"?(this.showNotification(`${this.engine.getCurrentTurn()} is in check!`),this.soundManager.play("check"),this.hapticManager.check()):a==="stalemate"?(this.showNotification("Stalemate! Game is a draw."),this.soundManager.play("move"),this.hapticManager.move(),this.aiManager.stopVsComputer()):o?(this.soundManager.play("capture"),this.hapticManager.capture()):(this.soundManager.play("move"),this.hapticManager.move())}checkForGameSelection(){const e=localStorage.getItem("mate-selected-game");e&&(localStorage.removeItem("mate-selected-game"),this.switchToGame(e))}switchToGame(e){if(this.multiGameApp.switchGame(e)){const t=this.multiGameApp.getCurrentGameInfo();this.gameUIManager.init(e,t),this.multiGameApp.startNewGame(),this.updateGameInfo(),this.showNotification(`Switched to ${t.name}! 🎮`)}else this.showNotification("Failed to switch game. Please try again.")}showPromotionDialog(e,t,i,s){const n=document.getElementById("promotion-modal");n.style.display="flex",n.querySelectorAll(".promotion-btn").forEach(o=>{o.onclick=null,o.removeEventListener("click",o._promotionHandler),o.removeEventListener("touchstart",o._promotionTouchHandler);const r=()=>{const u=o.dataset.piece;this.handlePromotion(u,e,t,i,s),n.style.display="none"},l=u=>{u.preventDefault(),r()};o._promotionHandler=r,o._promotionTouchHandler=l,o.addEventListener("click",r),o.addEventListener("touchstart",l,{passive:!1})})}handlePromotion(e,t,i,s,n){this.tryMove(0,0,0,0,e),this.aiManager.recordMove(t,i,s,n,e)}showNewGameDialog(){const e=document.getElementById("new-game-modal");e.style.display="flex"}checkForNewGame(){if(localStorage.getItem("mate-new-game")==="true")if(localStorage.removeItem("mate-new-game"),localStorage.getItem("mate-ai-mode")==="true"){const i=localStorage.getItem("mate-ai-color"),s=parseInt(localStorage.getItem("mate-ai-skill")||"10");localStorage.removeItem("mate-ai-mode"),localStorage.removeItem("mate-ai-color"),localStorage.removeItem("mate-ai-skill"),this.startVsAIFromSetup(i,s)}else this.startTwoPlayerGame()}startTwoPlayerGame(){this.aiManager.stopVsComputer(),this.engine.newGame(),this.selectedSquare=null,this.legalMoves=[],this.lastMove=null;const e=this.shareManager.newGame();this.clearSavedGame(),this.render(),this.showNotification(`New 2-player game started! (Game ID: ${e})`)}async startVsAIFromSetup(e,t){this.engine.newGame(),this.shareManager.newGame(),this.selectedSquare=null,this.legalMoves=[],this.lastMove=null,this.clearSavedGame(),await this.aiManager.startVsComputer(e,t),this.render(),this.updateGameInfo(),this.showNotification(`🤖 AI game started! (Level ${t})`)}showAIDialog(){const e=document.getElementById("ai-modal");e.style.display="flex";const t=document.getElementById("ai-skill-level"),i=document.getElementById("skill-level-display");t&&i&&(t.oninput=()=>{const s=parseInt(t.value),n=v.getSkillLevelName(s),a=v.getApproxELO(s);i.textContent=`${n} (Level ${s}, ~${a} ELO)`},t.oninput())}async startVsAI(e){const t=document.getElementById("ai-skill-level"),i=t?parseInt(t.value):10,s=e==="white"?"black":"white";if(document.getElementById("ai-modal").style.display="none",this.showNotification("Loading AI engine..."),await this.aiManager.startVsComputer(s,i)){this.render();const a=v.getSkillLevelName(i);this.showNotification(`Game started! AI: ${a} (${s})`)}}async toggleCoachMode(){this.aiManager.coachAI.enabled?(this.aiManager.coachAI.disable(),this.showNotification("Coach mode disabled")):(this.showNotification("Loading chess coach..."),await this.aiManager.coachAI.enable()&&this.showNotification('🎓 Coach ready! Click "Get Hint" for help.'))}async requestHint(){this.aiManager.coachAI.enabled||await this.toggleCoachMode(),this.showNotification("Coach is analyzing...");const e=await this.aiManager.coachAI.getHint(this.aiManager.moveHistory);e?this.aiManager.coachAI.displayHint(e):this.showNotification("Unable to get hint")}async requestAnalysis(){this.aiManager.coachAI.enabled||await this.toggleCoachMode(),this.showNotification("Coach is analyzing...");const e=await this.aiManager.coachAI.analyzePosition(this.aiManager.moveHistory);e?this.aiManager.coachAI.displayHint(e):this.showNotification("Unable to analyze position")}updateGameInfo(){const e=this.engine.getCurrentTurn(),t=`${e.charAt(0).toUpperCase()+e.slice(1)} to move`;document.getElementById("current-turn").textContent=t,document.getElementById("header-turn-text").textContent=t;const i=e==="white"?"♔":"♚";document.getElementById("header-turn-piece").textContent=i;const s=this.engine.getMoveHistory(),n=document.getElementById("move-history");n&&(n.innerHTML=s.map((a,o)=>`<div>${o+1}. ${a.notation}</div>`).join(""),n.scrollTop=n.scrollHeight)}render(){this.drawBoard(),this.drawPieces(),this.animationManager.renderAnimations((e,t,i,s)=>{this.drawPieceAt(e,t,i,s)}),this.updateGameInfo()}drawBoard(){const e=this.themeManager.getCurrentBoardTheme();for(let t=0;t<8;t++)for(let i=0;i<8;i++){let s=t,n=i;this.boardOrientation==="top"&&(s=7-t,n=7-i);const a=n*this.squareSize,o=s*this.squareSize;let l=(t+i)%2===0?e.light:e.dark;this.lastMove&&(this.lastMove.from.row===t&&this.lastMove.from.col===i||this.lastMove.to.row===t&&this.lastMove.to.col===i)&&(l=e.lastMove),this.selectedSquare&&this.selectedSquare.row===t&&this.selectedSquare.col===i&&(l=e.selected),this.showHints&&this.legalMoves.some(c=>c.row===t&&c.col===i)&&(l=e.legalMove);const h=this.engine.getBoard().getPiece(t,i),m=this.engine.getGameStatus();if(h&&h[1]==="K"&&m==="check"){const c=this.engine.getCurrentTurn();h[0]===c[0]&&(l=e.check)}this.ctx.fillStyle=l,this.ctx.fillRect(a,o,this.squareSize,this.squareSize)}this.ctx.strokeStyle=e.border,this.ctx.lineWidth=4,this.ctx.strokeRect(0,0,this.canvas.width,this.canvas.height)}drawPieces(){const e=this.engine.getBoard(),t=this.themeManager.getCurrentPieceSet(),i=t.style;this.ctx.font=`${this.squareSize*i.fontSize}px Arial`,this.ctx.textAlign="center",this.ctx.textBaseline="middle",i.glow?this.ctx.shadowBlur=8:this.ctx.shadowBlur=0;for(let s=0;s<8;s++)for(let n=0;n<8;n++){const a=e.getPiece(s,n);if(a){const o=t.pieces[a];let r=n,l=s;this.boardOrientation==="top"&&(r=7-n,l=7-s);const u=r*this.squareSize+this.squareSize/2,h=l*this.squareSize+this.squareSize/2;a[0]==="b"?(this.ctx.strokeStyle=i.blackShadow,this.ctx.fillStyle=i.blackColor,i.glow&&(this.ctx.shadowColor=i.blackColor)):(this.ctx.strokeStyle=i.whiteShadow,this.ctx.fillStyle=i.whiteColor,i.glow&&(this.ctx.shadowColor=i.whiteColor)),this.ctx.lineWidth=i.strokeWidth,this.ctx.strokeText(o,u,h),this.ctx.fillText(o,u,h)}}this.ctx.shadowBlur=0}drawPieceAt(e,t,i,s){const n=this.themeManager.getCurrentPieceSet(),a=n.style,o=s*a.fontSize;this.ctx.font=`${o}px Arial`,this.ctx.textAlign="center",this.ctx.textBaseline="middle",a.glow?this.ctx.shadowBlur=8:this.ctx.shadowBlur=0;const r=n.pieces[e];e[0]==="b"?(this.ctx.strokeStyle=a.blackShadow,this.ctx.fillStyle=a.blackColor,a.glow&&(this.ctx.shadowColor=a.blackColor)):(this.ctx.strokeStyle=a.whiteShadow,this.ctx.fillStyle=a.whiteColor,a.glow&&(this.ctx.shadowColor=a.whiteColor)),this.ctx.lineWidth=1,this.ctx.strokeText(r,t,i),this.ctx.fillText(r,t,i)}isPieceAnimating(e,t){return!1}loadGameFromUrl(){const e=window.location.pathname;if(e.startsWith("/m/")){console.log("Loading game from URL:",e);try{const t=new E,s=this.shareManager.encoder.decodeGameState(e),n=t.decodeGame(s.gameId,s.moves);if(!n.valid){console.error("Invalid game URL:",n.error),this.showNotification(`❌ Invalid game link: ${n.error}`);return}this.engine=n.engine,this.shareManager.setGameId(s.gameId),this.lastMove=this.engine.getLastMove(),this.render();const a=this.engine.getCurrentTurn(),o=a==="white"?"Black":"White";this.showNotification(`✅ Game loaded! ${o} to move (${s.moves.length} moves)`),console.log("✅ Game loaded successfully:",{gameId:s.gameId,moves:s.moves.length,turn:a})}catch(t){console.error("Failed to load game from URL:",t),this.showNotification("❌ Failed to load game from link")}}}saveGameState(){try{if(this.engine.getMoveHistory().length===0){console.log("No moves yet, skipping save");return}const e={board:this.engine.getBoard().squares,currentTurn:this.engine.getCurrentTurn(),moveHistory:this.engine.getMoveHistory(),capturedPieces:this.engine.getCapturedPieces(),gameStatus:this.engine.getGameStatus(),gameId:this.shareManager.gameId,isAIGame:this.aiManager.vsComputerActive,aiColor:this.aiManager.aiColor,aiSkillLevel:this.aiManager.skillLevel,savedAt:Date.now(),pieceMoveTracker:Array.from(this.engine.gameState.pieceMoveTracker||[])};localStorage.setItem("mate-current-game",JSON.stringify(e)),console.log("✅ Game state saved:",{moves:e.moveHistory.length,turn:e.currentTurn,gameId:e.gameId})}catch(e){console.error("❌ Failed to save game state:",e)}}restoreGameState(){try{const e=localStorage.getItem("mate-current-game");if(!e){console.log("No saved game found");return}const t=JSON.parse(e),i=7*24*60*60*1e3;if(Date.now()-t.savedAt>i){console.log("Saved game is too old, discarding"),localStorage.removeItem("mate-current-game");return}console.log("Restoring saved game:",{moves:t.moveHistory.length,turn:t.currentTurn,savedAt:new Date(t.savedAt).toLocaleString()}),this.engine.gameState.board.squares=t.board,this.engine.gameState.currentTurn=t.currentTurn,this.engine.gameState.moveHistory=t.moveHistory,this.engine.gameState.capturedPieces=t.capturedPieces,this.engine.gameState.gameStatus=t.gameStatus,this.engine.gameState.gameId=t.gameId,t.pieceMoveTracker&&(this.engine.gameState.pieceMoveTracker=new Set(t.pieceMoveTracker)),t.gameId&&this.shareManager.setGameId(t.gameId),t.isAIGame&&this.aiManager.startVsComputer(t.aiColor,t.aiSkillLevel),t.moveHistory.length>0&&(this.lastMove=t.moveHistory[t.moveHistory.length-1]),this.showNotification(`✅ Game resumed! (${t.moveHistory.length} moves)`)}catch(e){console.error("❌ Failed to restore game state:",e),localStorage.removeItem("mate-current-game")}}clearSavedGame(){localStorage.removeItem("mate-current-game"),console.log("Saved game cleared")}showNotification(e){const t=document.getElementById("game-status");t&&(t.textContent=e,setTimeout(()=>{t.textContent=""},3e3))}}document.addEventListener("DOMContentLoaded",()=>{try{window.app=new P,console.log("✅ Chess PWA ready!")}catch(d){console.error("❌ Failed to initialize Chess PWA:",d)}});
